2021-02-02 08:47:58.612  INFO 22956 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 22956 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 08:47:58.626 DEBUG 22956 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 08:47:58.627  INFO 22956 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 08:47:58.791  INFO 22956 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 08:47:58.792  INFO 22956 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 08:48:03.528  INFO 22956 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 08:48:03.746  INFO 22956 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 08:48:03.747  INFO 22956 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 08:48:04.370  INFO 22956 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 08:48:04.371  INFO 22956 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 5578 ms
2021-02-02 08:48:06.026  INFO 22956 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 08:48:06.157  INFO 22956 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 08:48:06.637  INFO 22956 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 08:48:06.685  INFO 22956 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 08:48:06.699  INFO 22956 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 9.294 seconds (JVM running for 11.014)
2021-02-02 08:52:45.418  INFO 22956 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 08:52:45.418  INFO 22956 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 08:52:45.435  INFO 22956 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 17 ms
2021-02-02 08:52:45.485  INFO 22956 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 08:52:45.501  INFO 22956 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 08:52:45.770  INFO 22956 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 08:52:45.910 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 08:52:45.949 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 08:52:45.969 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 08:52:45.974 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 08:52:45.975 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 08:52:45.983 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 08:52:45.990 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 08:52:45.992 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 08:52:45.994 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 08:52:46.002 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 08:52:46.003 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 08:52:46.012 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 08:52:46.023 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 08:52:46.025 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 08:52:46.030 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 6
2021-02-02 08:52:46.036 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 08:52:46.037 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 08:52:46.040 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 08:52:46.042  INFO 22956 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 08:52:52.273  INFO 22956 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/about', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.AboutShowController.about', args=[]}
2021-02-02 08:52:52.281  INFO 22956 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : about
2021-02-02 08:53:01.265  INFO 22956 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/archives', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.ArchiveShowController.archive', args=[{count=Count(id=null, count=null, createTime=null), org.springframework.validation.BindingResult.count=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, Count(id=null, count=null, createTime=null)]}
2021-02-02 08:53:01.274 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.findGroupYear         : ==>  Preparing: select date_format(b.create_time,'%Y') year from t_blog b group by year order by year desc
2021-02-02 08:53:01.274 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.findGroupYear         : ==> Parameters: 
2021-02-02 08:53:01.279 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.findGroupYear         : <==      Total: 2
2021-02-02 08:53:01.284 DEBUG 22956 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.findByYear   : ==>  Preparing: select b.id bid, b.title, b.create_time, b.flag,t.name from t_blog b, t_type t where date_format(b.create_time,'%Y')=? and b.type_id=t.id order by b.create_time desc
2021-02-02 08:53:01.285 DEBUG 22956 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.findByYear   : ==> Parameters: 2021(String)
2021-02-02 08:53:01.289 DEBUG 22956 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.findByYear   : <==      Total: 2
2021-02-02 08:53:01.290 DEBUG 22956 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.findByYear   : ==>  Preparing: select b.id bid, b.title, b.create_time, b.flag,t.name from t_blog b, t_type t where date_format(b.create_time,'%Y')=? and b.type_id=t.id order by b.create_time desc
2021-02-02 08:53:01.291 DEBUG 22956 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.findByYear   : ==> Parameters: 2020(String)
2021-02-02 08:53:01.294 DEBUG 22956 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.findByYear   : <==      Total: 4
2021-02-02 08:53:01.299 DEBUG 22956 --- [http-nio-8080-exec-4] com.personblog.dao.BlogMapper.count      : ==>  Preparing: select count(*) from t_blog
2021-02-02 08:53:01.300 DEBUG 22956 --- [http-nio-8080-exec-4] com.personblog.dao.BlogMapper.count      : ==> Parameters: 
2021-02-02 08:53:01.302 DEBUG 22956 --- [http-nio-8080-exec-4] com.personblog.dao.BlogMapper.count      : <==      Total: 1
2021-02-02 08:53:01.305 DEBUG 22956 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.deleteCount  : ==>  Preparing: delete from t_count
2021-02-02 08:53:01.306 DEBUG 22956 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.deleteCount  : ==> Parameters: 
2021-02-02 08:53:01.311 DEBUG 22956 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.deleteCount  : <==    Updates: 3
2021-02-02 08:53:01.312 DEBUG 22956 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.insertCount  : ==>  Preparing: insert into t_count(count,create_time) (select count(*) count, create_time from t_blog GROUP BY year(create_time),month(create_time) order by create_time desc)
2021-02-02 08:53:01.313 DEBUG 22956 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.insertCount  : ==> Parameters: 
2021-02-02 08:53:01.316 DEBUG 22956 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.insertCount  : <==    Updates: 3
2021-02-02 08:53:01.319 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.findGroupYear2        : ==>  Preparing: select date_format(t_count.create_time,'%Y年%m月') year1 from t_count GROUP BY year1 order by year1 desc
2021-02-02 08:53:01.320 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.findGroupYear2        : ==> Parameters: 
2021-02-02 08:53:01.341 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.findGroupYear2        : <==      Total: 3
2021-02-02 08:53:01.343 DEBUG 22956 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.findByYear2  : ==>  Preparing: select c.id,c.count,c.create_time from t_count c where date_format(c.create_time,'%Y年%m月')=? order by c.create_time desc
2021-02-02 08:53:01.344 DEBUG 22956 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.findByYear2  : ==> Parameters: 2021年01月(String)
2021-02-02 08:53:01.347 DEBUG 22956 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.findByYear2  : <==      Total: 1
2021-02-02 08:53:01.348 DEBUG 22956 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.findByYear2  : ==>  Preparing: select c.id,c.count,c.create_time from t_count c where date_format(c.create_time,'%Y年%m月')=? order by c.create_time desc
2021-02-02 08:53:01.349 DEBUG 22956 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.findByYear2  : ==> Parameters: 2020年08月(String)
2021-02-02 08:53:01.351 DEBUG 22956 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.findByYear2  : <==      Total: 1
2021-02-02 08:53:01.352 DEBUG 22956 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.findByYear2  : ==>  Preparing: select c.id,c.count,c.create_time from t_count c where date_format(c.create_time,'%Y年%m月')=? order by c.create_time desc
2021-02-02 08:53:01.354 DEBUG 22956 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.findByYear2  : ==> Parameters: 2020年07月(String)
2021-02-02 08:53:01.356 DEBUG 22956 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.findByYear2  : <==      Total: 1
2021-02-02 08:53:01.358  INFO 22956 --- [http-nio-8080-exec-4] c.p.service.impl.BlogServiceImpl         : {2021年01月=[Count(id=115, count=2, createTime=Sun Jan 31 17:44:18 CST 2021)], 2020年08月=[Count(id=116, count=3, createTime=Thu Aug 27 10:00:05 CST 2020)], 2020年07月=[Count(id=117, count=1, createTime=Wed Jul 01 10:36:01 CST 2020)]}
2021-02-02 08:53:01.364  INFO 22956 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : archives
2021-02-02 08:53:09.376  INFO 22956 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/message', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.message', args=[]}
2021-02-02 08:53:09.385  INFO 22956 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Result : message
2021-02-02 08:53:09.970  INFO 22956 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/messagecomment', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.messages', args=[{}]}
2021-02-02 08:53:09.973 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.MessageMapper.findByParentIdNull   : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 08:53:09.973 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.MessageMapper.findByParentIdNull   : ==> Parameters: -1(Long)
2021-02-02 08:53:09.975 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.MessageMapper.findByParentIdNull   : <==      Total: 6
2021-02-02 08:53:09.977 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 08:53:09.977 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 118(Long)
2021-02-02 08:53:09.979 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.M.findByParentIdNotNull            : <==      Total: 0
2021-02-02 08:53:09.981 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 08:53:09.981 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 117(Long)
2021-02-02 08:53:09.983 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.M.findByParentIdNotNull            : <==      Total: 0
2021-02-02 08:53:09.984 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 08:53:09.984 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 116(Long)
2021-02-02 08:53:09.986 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.M.findByParentIdNotNull            : <==      Total: 0
2021-02-02 08:53:09.986 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 08:53:09.987 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 115(Long)
2021-02-02 08:53:09.988 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.M.findByParentIdNotNull            : <==      Total: 0
2021-02-02 08:53:09.988 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 08:53:09.988 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 114(Long)
2021-02-02 08:53:09.990 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.M.findByParentIdNotNull            : <==      Total: 0
2021-02-02 08:53:09.990 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 08:53:09.990 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 112(Long)
2021-02-02 08:53:09.992 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.M.findByParentIdNotNull            : <==      Total: 1
2021-02-02 08:53:09.994 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.MessageMapper.findByReplayId     : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 08:53:09.994 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.MessageMapper.findByReplayId     : ==> Parameters: 113(Long)
2021-02-02 08:53:09.995 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.MessageMapper.findByReplayId     : <==      Total: 0
2021-02-02 08:53:09.996  INFO 22956 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : message::messageList
2021-02-02 08:53:13.427  INFO 22956 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/tags/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TagShowController.tag', args=[1, -1, {}]}
2021-02-02 08:53:13.435 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 08:53:13.435 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 08:53:13.442 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 6
2021-02-02 08:53:13.448 DEBUG 22956 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.getByTagId   : ==>  Preparing: select b.id,b.title,b.first_picture,b.flag,b.views,b.update_time,b.description, t.id,t.name, u.nickname, u.avatar, b.comment_count from t_blog b, t_type t,t_blog_tag tb ,t_user u,t_tag tt where b.type_id = t.id and u.id = b.user_id and tb.blog_id = b.id and tb.tag_id = tt.id and tb.tag_id = ? order by b.update_time desc
2021-02-02 08:53:13.449 DEBUG 22956 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.getByTagId   : ==> Parameters: 8(Long)
2021-02-02 08:53:13.459 DEBUG 22956 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.getByTagId   : <==      Total: 6
2021-02-02 08:53:13.461  INFO 22956 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : tags
2021-02-02 08:53:13.537 ERROR 22956 --- [http-nio-8080-exec-9] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/tags/jquery.mCustomScrollbar.css, Exception : {}

org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "jquery.mCustomScrollbar.css"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:121)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NumberFormatException: For input string: "jquery.mCustomScrollbar.css"
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Long.parseLong(Long.java:589)
	at java.lang.Long.valueOf(Long.java:803)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:214)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:693)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 47 common frames omitted

2021-02-02 08:53:13.540 ERROR 22956 --- [http-nio-8080-exec-4] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/tags/jquery.mCustomScrollbar.concat.min.js, Exception : {}

org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "jquery.mCustomScrollbar.concat.min.js"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:121)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NumberFormatException: For input string: "jquery.mCustomScrollbar.concat.min.js"
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Long.parseLong(Long.java:589)
	at java.lang.Long.valueOf(Long.java:803)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:214)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:693)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 47 common frames omitted

2021-02-02 08:53:13.542  WARN 22956 --- [http-nio-8080-exec-9] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "jquery.mCustomScrollbar.css"]
2021-02-02 08:53:13.542  WARN 22956 --- [http-nio-8080-exec-4] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "jquery.mCustomScrollbar.concat.min.js"]
2021-02-02 08:53:17.726  INFO 22956 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/types/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TypeShowController.typeShow', args=[{}, -1, 1]}
2021-02-02 08:53:17.731 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 08:53:17.733 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 08:53:17.738 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 08:53:17.740 DEBUG 22956 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.getByTypeId  : ==>  Preparing: select b.id,b.title,b.flag,b.first_picture,b.published,b.views,b.update_time,b.description, t.id tid,t.name, b.comment_count, b.type_id, u.nickname, u.avatar from t_blog b join t_user u on b.user_id=u.id join t_type t on t.id=b.type_id and b.type_id = ? order by b.update_time desc
2021-02-02 08:53:17.741 DEBUG 22956 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.getByTypeId  : ==> Parameters: 17(Long)
2021-02-02 08:53:17.746 DEBUG 22956 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.getByTypeId  : <==      Total: 1
2021-02-02 08:53:17.747  INFO 22956 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : types
2021-02-02 08:53:17.818 ERROR 22956 --- [http-nio-8080-exec-2] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/types/jquery.mCustomScrollbar.concat.min.js, Exception : {}

org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "jquery.mCustomScrollbar.concat.min.js"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:121)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NumberFormatException: For input string: "jquery.mCustomScrollbar.concat.min.js"
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Long.parseLong(Long.java:589)
	at java.lang.Long.valueOf(Long.java:803)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:214)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:693)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 47 common frames omitted

2021-02-02 08:53:17.821  WARN 22956 --- [http-nio-8080-exec-2] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "jquery.mCustomScrollbar.concat.min.js"]
2021-02-02 08:53:17.819 ERROR 22956 --- [http-nio-8080-exec-5] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/types/jquery.mCustomScrollbar.css, Exception : {}

org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "jquery.mCustomScrollbar.css"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:121)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NumberFormatException: For input string: "jquery.mCustomScrollbar.css"
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Long.parseLong(Long.java:589)
	at java.lang.Long.valueOf(Long.java:803)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:214)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:693)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 47 common frames omitted

2021-02-02 08:53:17.826  WARN 22956 --- [http-nio-8080-exec-5] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "jquery.mCustomScrollbar.css"]
2021-02-02 08:53:20.836  INFO 22956 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 08:53:20.845 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 08:53:20.846 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 08:53:20.848 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 08:53:20.848 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 08:53:20.849 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 08:53:20.854 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 08:53:20.856 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 08:53:20.857 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 08:53:20.860 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 08:53:20.864 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 08:53:20.864 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 08:53:20.869 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 08:53:20.872 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 08:53:20.872 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 08:53:20.875 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 6
2021-02-02 08:53:20.876 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 08:53:20.877 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 08:53:20.879 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 08:53:20.881  INFO 22956 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 08:53:43.625 DEBUG 22956 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : ==>  Preparing: select username, password from t_user where username=? and password=?;
2021-02-02 08:53:43.626 DEBUG 22956 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 08:53:43.627 DEBUG 22956 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 08:59:24.375 DEBUG 22956 --- [http-nio-8080-exec-9] com.personblog.dao.UserMapper.login      : ==>  Preparing: select username, password from t_user where username=? and password=?;
2021-02-02 08:59:24.376 DEBUG 22956 --- [http-nio-8080-exec-9] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 08:59:24.378 DEBUG 22956 --- [http-nio-8080-exec-9] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 09:01:17.042 DEBUG 22956 --- [http-nio-8080-exec-7] com.personblog.dao.UserMapper.login      : ==>  Preparing: select username, password from t_user where username=? and password=?;
2021-02-02 09:01:17.043 DEBUG 22956 --- [http-nio-8080-exec-7] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 09:01:17.044 DEBUG 22956 --- [http-nio-8080-exec-7] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 09:01:24.994 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 09:01:24.994 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 09:01:24.995 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 09:01:24.999 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 09:01:25.000 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 09:01:25.004 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 5
2021-02-02 09:01:25.007 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 09:01:25.008 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 09:01:25.010 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:01:30.139 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 09:01:30.140 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 09:01:30.141 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 09:01:30.144 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 09:01:30.144 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 09:01:30.146 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:01:34.159 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTag_COUNT     : ==>  Preparing: SELECT count(0) FROM t_tag
2021-02-02 09:01:34.160 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTag_COUNT     : ==> Parameters: 
2021-02-02 09:01:34.161 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTag_COUNT     : <==      Total: 1
2021-02-02 09:01:34.172 DEBUG 22956 --- [http-nio-8080-exec-5] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: SELECT id, name FROM t_tag order by id desc LIMIT ?
2021-02-02 09:01:34.172 DEBUG 22956 --- [http-nio-8080-exec-5] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 5(Integer)
2021-02-02 09:01:34.174 DEBUG 22956 --- [http-nio-8080-exec-5] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 4
2021-02-02 09:01:38.304 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.d.N.selectAllNotice_COUNT            : ==>  Preparing: SELECT count(0) FROM t_notice
2021-02-02 09:01:38.304 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.d.N.selectAllNotice_COUNT            : ==> Parameters: 
2021-02-02 09:01:38.305 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.d.N.selectAllNotice_COUNT            : <==      Total: 1
2021-02-02 09:01:38.307 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: SELECT id, content FROM t_notice order by id desc LIMIT ?
2021-02-02 09:01:38.307 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 5(Integer)
2021-02-02 09:01:38.309 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:01:42.932 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 09:01:42.933 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 09:01:42.934 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 09:01:42.938 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 09:01:42.939 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 09:01:42.943 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 5
2021-02-02 09:01:42.946 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 09:01:42.947 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 09:01:42.950 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:02:10.752  INFO 22956 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/types/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TypeShowController.typeShow', args=[{}, -1, 1]}
2021-02-02 09:02:10.754 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:02:10.755 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:02:10.759 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 09:02:10.761 DEBUG 22956 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.getByTypeId  : ==>  Preparing: select b.id,b.title,b.flag,b.first_picture,b.published,b.views,b.update_time,b.description, t.id tid,t.name, b.comment_count, b.type_id, u.nickname, u.avatar from t_blog b join t_user u on b.user_id=u.id join t_type t on t.id=b.type_id and b.type_id = ? order by b.update_time desc
2021-02-02 09:02:10.762 DEBUG 22956 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.getByTypeId  : ==> Parameters: 17(Long)
2021-02-02 09:02:10.769 DEBUG 22956 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.getByTypeId  : <==      Total: 1
2021-02-02 09:02:10.771  INFO 22956 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : types
2021-02-02 09:02:10.839 ERROR 22956 --- [http-nio-8080-exec-1] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/types/jquery.mCustomScrollbar.css, Exception : {}

org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "jquery.mCustomScrollbar.css"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:121)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NumberFormatException: For input string: "jquery.mCustomScrollbar.css"
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Long.parseLong(Long.java:589)
	at java.lang.Long.valueOf(Long.java:803)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:214)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:693)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 47 common frames omitted

2021-02-02 09:02:10.839 ERROR 22956 --- [http-nio-8080-exec-6] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/types/jquery.mCustomScrollbar.concat.min.js, Exception : {}

org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "jquery.mCustomScrollbar.concat.min.js"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:121)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NumberFormatException: For input string: "jquery.mCustomScrollbar.concat.min.js"
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Long.parseLong(Long.java:589)
	at java.lang.Long.valueOf(Long.java:803)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:214)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:693)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 47 common frames omitted

2021-02-02 09:02:10.842  WARN 22956 --- [http-nio-8080-exec-6] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "jquery.mCustomScrollbar.concat.min.js"]
2021-02-02 09:02:10.842  WARN 22956 --- [http-nio-8080-exec-1] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "jquery.mCustomScrollbar.css"]
2021-02-02 09:02:12.505  INFO 22956 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 09:02:12.509 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 09:02:12.510 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 09:02:12.512 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 09:02:12.512 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 09:02:12.513 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 09:02:12.516 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 09:02:12.517 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 09:02:12.518 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 09:02:12.519 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 09:02:12.520 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:02:12.520 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:02:12.523 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 09:02:12.525 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 09:02:12.525 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 09:02:12.528 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 6
2021-02-02 09:02:12.530 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 09:02:12.530 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 09:02:12.532 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:02:12.532  INFO 22956 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 09:08:31.594  INFO 22956 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 09:08:31.599 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 09:08:31.600 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 09:08:31.602 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 09:08:31.602 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 09:08:31.602 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 09:08:31.605 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 09:08:31.607 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 09:08:31.607 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 09:08:31.608 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 09:08:31.609 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:08:31.609 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:08:31.614 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 09:08:31.618 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 09:08:31.619 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 09:08:31.620 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 6
2021-02-02 09:08:31.621 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 09:08:31.621 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 09:08:31.622 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:08:31.622  INFO 22956 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 09:10:30.244  INFO 22956 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 09:10:30.249 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 09:10:30.249 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 09:10:30.250 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 09:10:30.251 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 09:10:30.252 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 09:10:30.254 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 09:10:30.256 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 09:10:30.256 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 09:10:30.258 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 09:10:30.263 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:10:30.263 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:10:30.265 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 09:10:30.267 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 09:10:30.268 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 09:10:30.270 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 6
2021-02-02 09:10:30.271 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 09:10:30.272 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 09:10:30.273 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:10:30.273  INFO 22956 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 09:11:05.915  INFO 22956 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 09:11:05.919 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 09:11:05.920 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 09:11:05.920 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 09:11:05.921 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 09:11:05.921 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 09:11:05.924 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 09:11:05.927 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 09:11:05.928 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 09:11:05.929 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 09:11:05.931 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:11:05.931 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:11:05.933 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 09:11:05.935 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 09:11:05.936 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 09:11:05.938 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 6
2021-02-02 09:11:05.940 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 09:11:05.940 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 09:11:05.942 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:11:05.942  INFO 22956 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 09:11:24.722  INFO 22956 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 09:11:24.727 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 09:11:24.727 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 09:11:24.729 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 09:11:24.729 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 09:11:24.730 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 09:11:24.733 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 09:11:24.735 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 09:11:24.735 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 09:11:24.737 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 09:11:24.741 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:11:24.742 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:11:24.744 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 09:11:24.746 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 09:11:24.746 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 09:11:24.748 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 6
2021-02-02 09:11:24.750 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 09:11:24.750 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 09:11:24.752 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:11:24.753  INFO 22956 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 09:11:39.686  INFO 22956 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 09:11:39.688 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 09:11:39.689 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 09:11:39.690 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 09:11:39.690 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 09:11:39.691 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 09:11:39.695 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 09:11:39.701 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 09:11:39.701 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 09:11:39.704 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 09:11:39.706 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:11:39.706 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:11:39.708 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 09:11:39.709 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 09:11:39.710 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 09:11:39.712 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 6
2021-02-02 09:11:39.713 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 09:11:39.713 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 09:11:39.714 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:11:39.715  INFO 22956 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 09:14:26.441  INFO 22956 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 09:14:26.444 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 09:14:26.444 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 09:14:26.445 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 09:14:26.445 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 09:14:26.447 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 09:14:26.452 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 09:14:26.454 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 09:14:26.455 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 09:14:26.456 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 09:14:26.458 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:14:26.458 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:14:26.459 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 09:14:26.461 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 09:14:26.461 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 09:14:26.463 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 6
2021-02-02 09:14:26.464 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 09:14:26.464 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 09:14:26.465 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:14:26.465  INFO 22956 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 09:15:06.650  INFO 22956 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 09:15:06.655 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 09:15:06.656 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 09:15:06.659 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 09:15:06.660 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 09:15:06.660 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 09:15:06.663 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 09:15:06.664 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 09:15:06.665 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 09:15:06.666 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 09:15:06.667 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:15:06.668 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:15:06.669 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 09:15:06.670 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 09:15:06.671 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 09:15:06.672 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 6
2021-02-02 09:15:06.674 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 09:15:06.674 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 09:15:06.676 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:15:06.677  INFO 22956 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 09:15:46.130  INFO 22956 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 09:15:46.135 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 09:15:46.136 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 09:15:46.138 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 09:15:46.139 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 09:15:46.140 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 09:15:46.143 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 09:15:46.145 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 09:15:46.145 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 09:15:46.146 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 09:15:46.148 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:15:46.148 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:15:46.150 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 09:15:46.151 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 09:15:46.152 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 09:15:46.158 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 6
2021-02-02 09:15:46.160 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 09:15:46.161 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 09:15:46.162 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:15:46.162  INFO 22956 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 09:16:19.222  INFO 22956 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 09:16:19.226 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 09:16:19.227 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 09:16:19.228 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 09:16:19.229 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 09:16:19.229 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 09:16:19.233 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 09:16:19.235 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 09:16:19.235 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 09:16:19.237 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 09:16:19.243 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:16:19.243 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:16:19.245 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 09:16:19.247 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 09:16:19.248 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 09:16:19.250 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 6
2021-02-02 09:16:19.251 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 09:16:19.251 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 09:16:19.252 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:16:19.253  INFO 22956 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 09:16:45.773  INFO 22956 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 09:16:45.776 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 09:16:45.777 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 09:16:45.778 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 09:16:45.778 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 09:16:45.779 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 09:16:45.785 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 09:16:45.787 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 09:16:45.787 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 09:16:45.789 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 09:16:45.791 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:16:45.791 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:16:45.793 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 09:16:45.795 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 09:16:45.795 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 09:16:45.797 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 6
2021-02-02 09:16:45.798 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 09:16:45.798 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 09:16:45.799 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:16:45.800  INFO 22956 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 09:17:06.836  INFO 22956 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 09:17:06.838 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 09:17:06.839 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 09:17:06.840 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 09:17:06.840 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 09:17:06.840 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 09:17:06.844 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 09:17:06.847 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 09:17:06.848 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 09:17:06.849 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 09:17:06.851 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:17:06.851 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:17:06.852 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 09:17:06.853 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 09:17:06.854 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 09:17:06.855 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 6
2021-02-02 09:17:06.856 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 09:17:06.856 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 09:17:06.857 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:17:06.858  INFO 22956 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 09:17:36.720  INFO 22956 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 09:17:36.726 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 09:17:36.726 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 09:17:36.727 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 09:17:36.728 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 09:17:36.728 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 09:17:36.731 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 09:17:36.733 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 09:17:36.734 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 09:17:36.735 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 09:17:36.736 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:17:36.737 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:17:36.741 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 09:17:36.744 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 09:17:36.745 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 09:17:36.747 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 6
2021-02-02 09:17:36.749 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 09:17:36.750 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 09:17:36.751 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:17:36.751  INFO 22956 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 09:18:32.692  INFO 22956 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 09:18:32.695 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 09:18:32.696 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 09:18:32.698 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 09:18:32.699 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 09:18:32.700 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 09:18:32.704 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 09:18:32.706 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 09:18:32.706 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 09:18:32.707 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 09:18:32.708 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:18:32.708 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:18:32.710 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 09:18:32.711 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 09:18:32.712 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 09:18:32.713 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 6
2021-02-02 09:18:32.715 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 09:18:32.715 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 09:18:32.716 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:18:32.717  INFO 22956 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 09:19:00.756  INFO 22956 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 09:19:00.763 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 09:19:00.764 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 09:19:00.765 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 09:19:00.766 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 09:19:00.766 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 09:19:00.769 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 09:19:00.771 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 09:19:00.771 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 09:19:00.772 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 09:19:00.774 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:19:00.775 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:19:00.777 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 09:19:00.779 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 09:19:00.779 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 09:19:00.783 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 6
2021-02-02 09:19:00.785 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 09:19:00.786 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 09:19:00.787 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:19:00.787  INFO 22956 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 09:19:27.804  INFO 22956 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 09:19:27.808 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 09:19:27.808 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 09:19:27.809 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 09:19:27.810 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 09:19:27.810 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 09:19:27.812 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 09:19:27.813 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 09:19:27.814 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 09:19:27.815 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 09:19:27.817 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:19:27.817 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:19:27.818 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 09:19:27.819 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 09:19:27.820 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 09:19:27.821 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 6
2021-02-02 09:19:27.823 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 09:19:27.824 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 09:19:27.825 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:19:27.825  INFO 22956 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 09:19:41.444  INFO 22956 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 09:19:41.449 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 09:19:41.449 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 09:19:41.452 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 09:19:41.452 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 09:19:41.452 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 09:19:41.454 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 09:19:41.456 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 09:19:41.457 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 09:19:41.457 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 09:19:41.459 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:19:41.459 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:19:41.460 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 09:19:41.462 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 09:19:41.463 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 09:19:41.465 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 6
2021-02-02 09:19:41.466 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 09:19:41.466 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 09:19:41.470 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:19:41.471  INFO 22956 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 09:27:34.153  INFO 22956 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 09:27:34.162 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 09:27:34.163 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 09:27:34.175 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 09:27:34.176 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 09:27:34.176 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 09:27:34.181 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 09:27:34.183 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 09:27:34.183 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 09:27:34.184 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 09:27:34.186 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:27:34.186 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:27:34.187 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 09:27:34.189 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 09:27:34.190 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 09:27:34.192 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 6
2021-02-02 09:27:34.193 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 09:27:34.193 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 09:27:34.195 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:27:34.195  INFO 22956 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 09:28:49.721  INFO 22956 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 09:28:49.725 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 09:28:49.725 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 09:28:49.726 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 09:28:49.727 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 09:28:49.728 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 09:28:49.733 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 09:28:49.736 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 09:28:49.736 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 09:28:49.737 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 09:28:49.741 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:28:49.741 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:28:49.744 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 09:28:49.746 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 09:28:49.746 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 09:28:49.749 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 6
2021-02-02 09:28:49.750 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 09:28:49.751 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 09:28:49.752 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:28:49.752  INFO 22956 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 09:31:04.932  INFO 22956 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 09:31:04.936 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 09:31:04.936 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 09:31:04.938 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 09:31:04.938 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 09:31:04.939 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 09:31:04.941 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 09:31:04.943 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 09:31:04.944 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 09:31:04.945 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 09:31:04.946 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:31:04.946 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:31:04.948 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 09:31:04.951 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 09:31:04.951 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 09:31:04.953 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 6
2021-02-02 09:31:04.955 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 09:31:04.955 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 09:31:04.957 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:31:04.957  INFO 22956 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 09:31:21.268  INFO 22956 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 09:31:21.270 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 09:31:21.271 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 09:31:21.272 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 09:31:21.272 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 09:31:21.273 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 09:31:21.276 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 09:31:21.278 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 09:31:21.278 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 09:31:21.279 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 09:31:21.281 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:31:21.281 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:31:21.283 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 09:31:21.286 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 09:31:21.286 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 09:31:21.288 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 6
2021-02-02 09:31:21.290 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 09:31:21.290 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 09:31:21.291 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:31:21.291  INFO 22956 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 09:31:53.911  INFO 22956 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 09:31:53.915 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 09:31:53.915 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 09:31:53.916 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 09:31:53.917 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 09:31:53.917 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 09:31:53.919 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 09:31:53.921 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 09:31:53.921 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 09:31:53.922 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 09:31:53.924 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:31:53.925 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:31:53.926 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 09:31:53.929 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 09:31:53.929 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 09:31:53.933 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 6
2021-02-02 09:31:53.934 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 09:31:53.935 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 09:31:53.936 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:31:53.937  INFO 22956 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 09:32:10.943  INFO 22956 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 09:32:10.945 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 09:32:10.945 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 09:32:10.946 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 09:32:10.946 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 09:32:10.946 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 09:32:10.949 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 09:32:10.952 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 09:32:10.953 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 09:32:10.954 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 09:32:10.956 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:32:10.956 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:32:10.958 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 09:32:10.960 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 09:32:10.960 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 09:32:10.961 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 6
2021-02-02 09:32:10.962 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 09:32:10.963 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 09:32:10.963 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:32:10.964  INFO 22956 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 09:32:35.153  INFO 22956 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 09:32:35.155 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 09:32:35.156 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 09:32:35.158 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 09:32:35.160 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 09:32:35.160 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 09:32:35.163 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 09:32:35.165 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 09:32:35.165 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 09:32:35.167 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 09:32:35.168 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:32:35.169 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:32:35.170 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 09:32:35.172 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 09:32:35.172 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 09:32:35.174 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 6
2021-02-02 09:32:35.175 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 09:32:35.175 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 09:32:35.176 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:32:35.176  INFO 22956 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 09:32:56.297  INFO 22956 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 09:32:56.301 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 09:32:56.301 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 09:32:56.301 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 09:32:56.302 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 09:32:56.303 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 09:32:56.306 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 09:32:56.308 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 09:32:56.309 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 09:32:56.310 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 09:32:56.311 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:32:56.311 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:32:56.312 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 09:32:56.314 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 09:32:56.314 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 09:32:56.315 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 6
2021-02-02 09:32:56.316 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 09:32:56.317 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 09:32:56.318 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:32:56.318  INFO 22956 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 09:35:18.844  INFO 22956 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 09:35:18.850 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 09:35:18.851 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 09:35:18.852 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 09:35:18.853 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 09:35:18.853 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 09:35:18.855 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 09:35:18.857 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 09:35:18.858 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 09:35:18.858 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 09:35:18.860 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:35:18.861 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:35:18.862 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 09:35:18.863 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 09:35:18.863 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 09:35:18.865 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 6
2021-02-02 09:35:18.867 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 09:35:18.868 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 09:35:18.870 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:35:18.871  INFO 22956 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 09:36:15.473  INFO 22956 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 09:36:15.477 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 09:36:15.478 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 09:36:15.478 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 09:36:15.479 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 09:36:15.479 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 09:36:15.481 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 09:36:15.482 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 09:36:15.483 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 09:36:15.483 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 09:36:15.485 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:36:15.485 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:36:15.486 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 09:36:15.488 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 09:36:15.488 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 09:36:15.490 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 6
2021-02-02 09:36:15.494 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 09:36:15.494 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 09:36:15.496 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:36:15.497  INFO 22956 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 09:36:30.486  INFO 22956 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 09:36:30.489 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 09:36:30.489 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 09:36:30.490 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 09:36:30.490 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 09:36:30.491 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 09:36:30.495 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 09:36:30.497 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 09:36:30.498 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 09:36:30.499 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 09:36:30.500 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:36:30.501 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:36:30.502 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 09:36:30.504 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 09:36:30.504 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 09:36:30.506 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 6
2021-02-02 09:36:30.507 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 09:36:30.507 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 09:36:30.508 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:36:30.508  INFO 22956 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 09:36:50.339  INFO 22956 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 09:36:50.344 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 09:36:50.344 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 09:36:50.347 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 09:36:50.348 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 09:36:50.348 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 09:36:50.353 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 09:36:50.355 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 09:36:50.355 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 09:36:50.356 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 09:36:50.358 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:36:50.358 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:36:50.359 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 09:36:50.361 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 09:36:50.361 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 09:36:50.363 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 6
2021-02-02 09:36:50.364 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 09:36:50.364 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 09:36:50.366 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:36:50.367  INFO 22956 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 09:37:11.050  INFO 22956 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 09:37:11.052 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 09:37:11.053 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 09:37:11.054 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 09:37:11.055 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 09:37:11.056 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 09:37:11.059 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 09:37:11.060 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 09:37:11.061 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 09:37:11.062 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 09:37:11.064 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:37:11.064 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:37:11.065 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 09:37:11.067 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 09:37:11.067 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 09:37:11.069 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 6
2021-02-02 09:37:11.070 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 09:37:11.070 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 09:37:11.071 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:37:11.072  INFO 22956 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 09:37:32.162  INFO 22956 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/types/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TypeShowController.typeShow', args=[{}, -1, 1]}
2021-02-02 09:37:32.164 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:37:32.165 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:37:32.166 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 09:37:32.167 DEBUG 22956 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.getByTypeId  : ==>  Preparing: select b.id,b.title,b.flag,b.first_picture,b.published,b.views,b.update_time,b.description, t.id tid,t.name, b.comment_count, b.type_id, u.nickname, u.avatar from t_blog b join t_user u on b.user_id=u.id join t_type t on t.id=b.type_id and b.type_id = ? order by b.update_time desc
2021-02-02 09:37:32.167 DEBUG 22956 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.getByTypeId  : ==> Parameters: 17(Long)
2021-02-02 09:37:32.170 DEBUG 22956 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.getByTypeId  : <==      Total: 1
2021-02-02 09:37:32.171  INFO 22956 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : types
2021-02-02 09:37:32.238 ERROR 22956 --- [http-nio-8080-exec-9] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/types/jquery.mCustomScrollbar.concat.min.js, Exception : {}

org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "jquery.mCustomScrollbar.concat.min.js"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:121)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NumberFormatException: For input string: "jquery.mCustomScrollbar.concat.min.js"
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Long.parseLong(Long.java:589)
	at java.lang.Long.valueOf(Long.java:803)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:214)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:693)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 47 common frames omitted

2021-02-02 09:37:32.240  WARN 22956 --- [http-nio-8080-exec-9] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "jquery.mCustomScrollbar.concat.min.js"]
2021-02-02 09:37:32.240 ERROR 22956 --- [http-nio-8080-exec-8] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/types/jquery.mCustomScrollbar.css, Exception : {}

org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "jquery.mCustomScrollbar.css"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:121)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NumberFormatException: For input string: "jquery.mCustomScrollbar.css"
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Long.parseLong(Long.java:589)
	at java.lang.Long.valueOf(Long.java:803)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:214)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:693)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 47 common frames omitted

2021-02-02 09:37:32.242  WARN 22956 --- [http-nio-8080-exec-8] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "jquery.mCustomScrollbar.css"]
2021-02-02 09:37:33.769  INFO 22956 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 09:37:33.772 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 09:37:33.772 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 09:37:33.773 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 09:37:33.774 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 09:37:33.774 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 09:37:33.776 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 09:37:33.778 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 09:37:33.778 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 09:37:33.779 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 09:37:33.781 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:37:33.781 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:37:33.782 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 6
2021-02-02 09:37:33.785 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 09:37:33.785 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 09:37:33.787 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 6
2021-02-02 09:37:33.789 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 09:37:33.789 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 09:37:33.790 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:37:33.790  INFO 22956 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 09:37:45.119 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 09:37:45.120 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 27(Long)
2021-02-02 09:37:45.124 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 1
2021-02-02 09:37:45.126 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.CommentMapper.findIdsByBlogId    : ==>  Preparing: select id from t_comment where blog_id=?
2021-02-02 09:37:45.126 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.CommentMapper.findIdsByBlogId    : ==> Parameters: 27(Long)
2021-02-02 09:37:45.130 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.CommentMapper.findIdsByBlogId    : <==      Total: 0
2021-02-02 09:37:45.131 DEBUG 22956 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.deleteBlog   : ==>  Preparing: delete from t_blog where id = ?
2021-02-02 09:37:45.131 DEBUG 22956 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.deleteBlog   : ==> Parameters: 27(Long)
2021-02-02 09:37:45.135 DEBUG 22956 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.deleteBlog   : <==    Updates: 1
2021-02-02 09:37:45.203 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 09:37:45.203 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 09:37:45.204 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 09:37:45.207 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 09:37:45.207 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 09:37:45.210 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 5
2021-02-02 09:37:45.212 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 09:37:45.212 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 09:37:45.214 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:37:50.390 DEBUG 22956 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 09:37:50.391 DEBUG 22956 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 26(Long)
2021-02-02 09:37:50.398 DEBUG 22956 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 09:37:50.401 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 09:37:50.401 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 09:37:50.402 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:37:50.404 DEBUG 22956 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 09:37:50.404 DEBUG 22956 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 09:37:50.405 DEBUG 22956 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 4
2021-02-02 09:38:09.463 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 09:38:09.464 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 09:38:09.465 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 09:38:09.466 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 09:38:09.466 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 09:38:09.467 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:38:11.087 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 09:38:11.088 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 18(Long)
2021-02-02 09:38:11.089 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 09:38:13.170  WARN 22956 --- [http-nio-8080-exec-2] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 09:38:13.277 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectTypeByName      : ==>  Preparing: select id, name from t_type where name = ?
2021-02-02 09:38:13.277 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectTypeByName      : ==> Parameters: Java多线程(String)
2021-02-02 09:38:13.278 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectTypeByName      : <==      Total: 1
2021-02-02 09:38:13.348 ERROR 22956 --- [http-nio-8080-exec-9] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/admin/types/jquery.mCustomScrollbar.css, Exception : {}

org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.handleNoMatch(RequestMappingInfoHandlerMapping.java:213)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:422)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:367)
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getHandlerInternal(RequestMappingInfoHandlerMapping.java:110)
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getHandlerInternal(RequestMappingInfoHandlerMapping.java:59)
	at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:395)
	at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1234)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1016)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-02-02 09:38:13.349  WARN 22956 --- [http-nio-8080-exec-9] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported]
2021-02-02 09:38:13.355 ERROR 22956 --- [http-nio-8080-exec-5] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/admin/types/jquery.mCustomScrollbar.concat.min.js, Exception : {}

org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.handleNoMatch(RequestMappingInfoHandlerMapping.java:213)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:422)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:367)
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getHandlerInternal(RequestMappingInfoHandlerMapping.java:110)
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getHandlerInternal(RequestMappingInfoHandlerMapping.java:59)
	at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:395)
	at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1234)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1016)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-02-02 09:38:13.356  WARN 22956 --- [http-nio-8080-exec-5] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported]
2021-02-02 09:38:21.204 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 09:38:21.204 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 09:38:21.205 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 09:38:21.207 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 09:38:21.208 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 09:38:21.215 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 5
2021-02-02 09:38:21.217 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 09:38:21.217 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 09:38:21.218 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:38:22.844 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTag_COUNT     : ==>  Preparing: SELECT count(0) FROM t_tag
2021-02-02 09:38:22.844 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTag_COUNT     : ==> Parameters: 
2021-02-02 09:38:22.845 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTag_COUNT     : <==      Total: 1
2021-02-02 09:38:22.847 DEBUG 22956 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: SELECT id, name FROM t_tag order by id desc LIMIT ?
2021-02-02 09:38:22.848 DEBUG 22956 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 5(Integer)
2021-02-02 09:38:22.849 DEBUG 22956 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 4
2021-02-02 09:38:24.564 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 09:38:24.565 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 11(Long)
2021-02-02 09:38:24.566 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 09:38:27.920  WARN 22956 --- [http-nio-8080-exec-10] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 09:38:27.934 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectTagByName        : ==>  Preparing: select id, name from t_tag where name = ?
2021-02-02 09:38:27.934 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectTagByName        : ==> Parameters: jvm(String)
2021-02-02 09:38:27.935 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectTagByName        : <==      Total: 1
2021-02-02 09:38:27.986 ERROR 22956 --- [http-nio-8080-exec-9] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/admin/tags/jquery.mCustomScrollbar.css, Exception : {}

org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.handleNoMatch(RequestMappingInfoHandlerMapping.java:213)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:422)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:367)
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getHandlerInternal(RequestMappingInfoHandlerMapping.java:110)
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getHandlerInternal(RequestMappingInfoHandlerMapping.java:59)
	at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:395)
	at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1234)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1016)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-02-02 09:38:27.987  WARN 22956 --- [http-nio-8080-exec-9] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported]
2021-02-02 09:38:27.994 ERROR 22956 --- [http-nio-8080-exec-1] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/admin/tags/jquery.mCustomScrollbar.concat.min.js, Exception : {}

org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.handleNoMatch(RequestMappingInfoHandlerMapping.java:213)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:422)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:367)
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getHandlerInternal(RequestMappingInfoHandlerMapping.java:110)
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getHandlerInternal(RequestMappingInfoHandlerMapping.java:59)
	at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:395)
	at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1234)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1016)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-02-02 09:38:27.995  WARN 22956 --- [http-nio-8080-exec-1] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported]
2021-02-02 09:38:34.375  WARN 22956 --- [http-nio-8080-exec-1] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 09:38:34.377 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectTagByName        : ==>  Preparing: select id, name from t_tag where name = ?
2021-02-02 09:38:34.377 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectTagByName        : ==> Parameters: jvm(String)
2021-02-02 09:38:34.378 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectTagByName        : <==      Total: 1
2021-02-02 09:38:34.427 ERROR 22956 --- [http-nio-8080-exec-10] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/admin/tags/jquery.mCustomScrollbar.css, Exception : {}

org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.handleNoMatch(RequestMappingInfoHandlerMapping.java:213)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:422)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:367)
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getHandlerInternal(RequestMappingInfoHandlerMapping.java:110)
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getHandlerInternal(RequestMappingInfoHandlerMapping.java:59)
	at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:395)
	at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1234)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1016)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-02-02 09:38:34.429  WARN 22956 --- [http-nio-8080-exec-10] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported]
2021-02-02 09:38:34.432 ERROR 22956 --- [http-nio-8080-exec-6] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/admin/tags/jquery.mCustomScrollbar.concat.min.js, Exception : {}

org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.handleNoMatch(RequestMappingInfoHandlerMapping.java:213)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:422)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:367)
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getHandlerInternal(RequestMappingInfoHandlerMapping.java:110)
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getHandlerInternal(RequestMappingInfoHandlerMapping.java:59)
	at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:395)
	at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1234)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1016)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-02-02 09:38:34.432  WARN 22956 --- [http-nio-8080-exec-6] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported]
2021-02-02 09:38:38.918 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 09:38:38.919 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 09:38:38.920 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 09:38:38.922 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 09:38:38.923 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 09:38:38.924 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 5
2021-02-02 09:38:38.926 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 09:38:38.926 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 09:38:38.927 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:41:23.329 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 09:41:23.330 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 09:41:23.331 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 09:41:23.332 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 09:41:23.333 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 09:41:23.334 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 5
2021-02-02 09:41:23.336 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 09:41:23.336 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 09:41:23.337 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:42:12.868 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 09:42:12.868 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 09:42:12.869 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 09:42:12.870 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 09:42:12.871 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 09:42:12.872 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 5
2021-02-02 09:42:12.874 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 09:42:12.874 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 09:42:12.875 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:42:18.644 DEBUG 22956 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 09:42:18.644 DEBUG 22956 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 26(Long)
2021-02-02 09:42:18.646 DEBUG 22956 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 09:42:18.648 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 09:42:18.649 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 09:42:18.650 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:42:18.652 DEBUG 22956 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 09:42:18.653 DEBUG 22956 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 09:42:18.654 DEBUG 22956 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 4
2021-02-02 09:43:42.239 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 09:43:42.240 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 09:43:42.241 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 09:43:42.242 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 09:43:42.242 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 09:43:42.244 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 5
2021-02-02 09:43:42.245 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 09:43:42.245 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 09:43:42.246 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:43:44.707 DEBUG 22956 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 09:43:44.708 DEBUG 22956 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 26(Long)
2021-02-02 09:43:44.710 DEBUG 22956 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 09:43:44.712 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 09:43:44.712 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 09:43:44.713 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:43:44.715 DEBUG 22956 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 09:43:44.715 DEBUG 22956 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 09:43:44.716 DEBUG 22956 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 4
2021-02-02 09:43:49.994 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 09:43:49.995 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 09:43:49.997 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 09:43:49.997 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 09:43:49.998 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 09:43:49.998 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:43:51.150 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 09:43:51.150 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 18(Long)
2021-02-02 09:43:51.151 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 09:43:53.092  WARN 22956 --- [http-nio-8080-exec-5] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 09:43:53.094 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeByName      : ==>  Preparing: select id, name from t_type where name = ?
2021-02-02 09:43:53.096 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeByName      : ==> Parameters: Java多线程(String)
2021-02-02 09:43:53.096 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeByName      : <==      Total: 1
2021-02-02 09:43:53.192 ERROR 22956 --- [http-nio-8080-exec-4] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/admin/types/jquery.mCustomScrollbar.concat.min.js, Exception : {}

org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.handleNoMatch(RequestMappingInfoHandlerMapping.java:213)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:422)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:367)
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getHandlerInternal(RequestMappingInfoHandlerMapping.java:110)
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getHandlerInternal(RequestMappingInfoHandlerMapping.java:59)
	at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:395)
	at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1234)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1016)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-02-02 09:43:53.193  WARN 22956 --- [http-nio-8080-exec-4] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported]
2021-02-02 09:43:59.369 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTag_COUNT     : ==>  Preparing: SELECT count(0) FROM t_tag
2021-02-02 09:43:59.370 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTag_COUNT     : ==> Parameters: 
2021-02-02 09:43:59.371 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTag_COUNT     : <==      Total: 1
2021-02-02 09:43:59.374 DEBUG 22956 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: SELECT id, name FROM t_tag order by id desc LIMIT ?
2021-02-02 09:43:59.374 DEBUG 22956 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 5(Integer)
2021-02-02 09:43:59.376 DEBUG 22956 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 4
2021-02-02 09:44:03.537 DEBUG 22956 --- [http-nio-8080-exec-1] com.personblog.dao.TagMapper.deleteTag   : ==>  Preparing: delete from t_tag where id = ?
2021-02-02 09:44:03.537 DEBUG 22956 --- [http-nio-8080-exec-1] com.personblog.dao.TagMapper.deleteTag   : ==> Parameters: 11(Long)
2021-02-02 09:44:03.539 DEBUG 22956 --- [http-nio-8080-exec-1] com.personblog.dao.TagMapper.deleteTag   : <==    Updates: 1
2021-02-02 09:44:03.551 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTag_COUNT     : ==>  Preparing: SELECT count(0) FROM t_tag
2021-02-02 09:44:03.551 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTag_COUNT     : ==> Parameters: 
2021-02-02 09:44:03.552 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTag_COUNT     : <==      Total: 1
2021-02-02 09:44:03.553 DEBUG 22956 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: SELECT id, name FROM t_tag order by id desc LIMIT ?
2021-02-02 09:44:03.553 DEBUG 22956 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 5(Integer)
2021-02-02 09:44:03.554 DEBUG 22956 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 09:44:06.491 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 09:44:06.492 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 09:44:06.493 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 09:44:06.494 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 09:44:06.495 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 09:44:06.497 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 5
2021-02-02 09:44:06.499 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 09:44:06.499 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 09:44:06.500 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:45:18.676 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 09:45:18.677 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 09:45:18.677 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 09:45:18.679 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 09:45:18.679 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 09:45:18.682 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 5
2021-02-02 09:45:18.684 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 09:45:18.684 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 09:45:18.685 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:45:21.947 DEBUG 22956 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 09:45:21.947 DEBUG 22956 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 26(Long)
2021-02-02 09:45:21.949 DEBUG 22956 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 09:45:21.951 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 09:45:21.951 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 09:45:21.952 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:45:21.954 DEBUG 22956 --- [http-nio-8080-exec-10] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 09:45:21.954 DEBUG 22956 --- [http-nio-8080-exec-10] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 09:45:21.956 DEBUG 22956 --- [http-nio-8080-exec-10] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 09:45:25.335 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 09:45:25.335 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 09:45:25.337 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 09:45:25.338 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 09:45:25.339 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 09:45:25.340 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:45:26.321 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 09:45:26.321 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 18(Long)
2021-02-02 09:45:26.322 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 09:45:27.342  WARN 22956 --- [http-nio-8080-exec-2] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 09:45:27.344 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectTypeByName      : ==>  Preparing: select id, name from t_type where name = ?
2021-02-02 09:45:27.345 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectTypeByName      : ==> Parameters: Java多线程(String)
2021-02-02 09:45:27.346 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectTypeByName      : <==      Total: 1
2021-02-02 09:45:27.418 ERROR 22956 --- [http-nio-8080-exec-9] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/admin/types/jquery.mCustomScrollbar.concat.min.js, Exception : {}

org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.handleNoMatch(RequestMappingInfoHandlerMapping.java:213)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:422)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:367)
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getHandlerInternal(RequestMappingInfoHandlerMapping.java:110)
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getHandlerInternal(RequestMappingInfoHandlerMapping.java:59)
	at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:395)
	at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1234)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1016)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-02-02 09:45:27.419  WARN 22956 --- [http-nio-8080-exec-9] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported]
2021-02-02 09:45:30.511 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 09:45:30.512 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 09:45:30.512 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 09:45:30.515 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 09:45:30.515 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 09:45:30.517 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 5
2021-02-02 09:45:30.519 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 09:45:30.519 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 09:45:30.520 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:45:58.552 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 09:45:58.552 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 09:45:58.553 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 09:45:58.554 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 09:45:58.554 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 09:45:58.556 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 5
2021-02-02 09:45:58.557 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 09:45:58.557 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 09:45:58.558 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:46:01.409 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 09:46:01.410 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 09:46:01.410 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 09:46:01.412 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 09:46:01.412 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 09:46:01.414 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:46:02.295 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 09:46:02.296 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 18(Long)
2021-02-02 09:46:02.296 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 09:46:03.547  WARN 22956 --- [http-nio-8080-exec-1] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 09:46:03.549 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeByName      : ==>  Preparing: select id, name from t_type where name = ?
2021-02-02 09:46:03.550 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeByName      : ==> Parameters: Java多线程(String)
2021-02-02 09:46:03.551 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeByName      : <==      Total: 1
2021-02-02 09:46:03.659 ERROR 22956 --- [http-nio-8080-exec-9] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/admin/types/jquery.mCustomScrollbar.concat.min.js, Exception : {}

org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.handleNoMatch(RequestMappingInfoHandlerMapping.java:213)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:422)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:367)
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getHandlerInternal(RequestMappingInfoHandlerMapping.java:110)
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getHandlerInternal(RequestMappingInfoHandlerMapping.java:59)
	at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:395)
	at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1234)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1016)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-02-02 09:46:03.661  WARN 22956 --- [http-nio-8080-exec-9] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported]
2021-02-02 09:46:09.013  WARN 22956 --- [http-nio-8080-exec-7] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 09:46:09.015 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectTypeByName      : ==>  Preparing: select id, name from t_type where name = ?
2021-02-02 09:46:09.016 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectTypeByName      : ==> Parameters: Java多线程1(String)
2021-02-02 09:46:09.017 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectTypeByName      : <==      Total: 0
2021-02-02 09:46:09.019 DEBUG 22956 --- [http-nio-8080-exec-7] c.personblog.dao.TypeMapper.updateType   : ==>  Preparing: update t_type set name = ? where id = ?
2021-02-02 09:46:09.020 DEBUG 22956 --- [http-nio-8080-exec-7] c.personblog.dao.TypeMapper.updateType   : ==> Parameters: Java多线程1(String), 18(Long)
2021-02-02 09:46:09.024 DEBUG 22956 --- [http-nio-8080-exec-7] c.personblog.dao.TypeMapper.updateType   : <==    Updates: 1
2021-02-02 09:46:09.042 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 09:46:09.043 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 09:46:09.043 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 09:46:09.045 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 09:46:09.045 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 09:46:09.046 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:46:20.966 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 09:46:20.966 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 09:46:20.967 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 09:46:20.968 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 09:46:20.968 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 09:46:20.970 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 5
2021-02-02 09:46:20.972 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 09:46:20.973 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 09:46:20.974 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:50:10.746 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 09:50:10.746 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 09:50:10.747 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 09:50:10.748 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 09:50:10.748 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 09:50:10.750 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 5
2021-02-02 09:50:10.751 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 09:50:10.751 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 09:50:10.752 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:50:14.929 DEBUG 22956 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 09:50:14.929 DEBUG 22956 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 26(Long)
2021-02-02 09:50:14.930 DEBUG 22956 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 09:50:14.932 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 09:50:14.932 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 09:50:14.934 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:50:14.935 DEBUG 22956 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 09:50:14.935 DEBUG 22956 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 09:50:14.936 DEBUG 22956 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 09:51:05.488 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 09:51:05.488 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 09:51:05.489 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 09:51:05.489 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 09:51:05.489 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 09:51:05.490 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 5
2021-02-02 09:51:05.492 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 09:51:05.492 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 09:51:05.493 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:51:08.965 DEBUG 22956 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 09:51:08.965 DEBUG 22956 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 26(Long)
2021-02-02 09:51:08.966 DEBUG 22956 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 09:51:08.968 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 09:51:08.968 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 09:51:08.969 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:51:08.970 DEBUG 22956 --- [http-nio-8080-exec-6] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 09:51:08.970 DEBUG 22956 --- [http-nio-8080-exec-6] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 09:51:08.971 DEBUG 22956 --- [http-nio-8080-exec-6] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 09:52:17.856  INFO 22956 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 09:52:17.860 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 09:52:17.861 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 09:52:17.867 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 09:52:17.868 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 09:52:17.869 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 09:52:17.877 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 09:52:17.879 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 09:52:17.879 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 09:52:17.881 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 09:52:17.882 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:52:17.883 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:52:17.884 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 5
2021-02-02 09:52:17.886 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 09:52:17.886 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 09:52:17.888 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 5
2021-02-02 09:52:17.891 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 09:52:17.891 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 09:52:17.893 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:52:17.894  INFO 22956 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 09:52:26.666  INFO 22956 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/26', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[26, {}]}
2021-02-02 09:52:26.673 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 09:52:26.673 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 26(Long)
2021-02-02 09:52:26.677 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 09:52:26.755 DEBUG 22956 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 09:52:26.755 DEBUG 22956 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 26(Long)
2021-02-02 09:52:26.758 DEBUG 22956 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 09:52:26.759 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 09:52:26.759 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 26(Long), 26(Long), 26(Long)
2021-02-02 09:52:26.762 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 09:52:26.775 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 09:52:26.775 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 26(Long), -1(Long)
2021-02-02 09:52:26.776 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 09:52:26.776  INFO 22956 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 09:52:27.840  INFO 22956 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/26', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[26, {}]}
2021-02-02 09:52:27.852 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 09:52:27.853 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 26(Long), -1(Long)
2021-02-02 09:52:27.855 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 09:52:27.857  INFO 22956 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 09:52:34.279  INFO 22956 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/types/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TypeShowController.typeShow', args=[{}, -1, 1]}
2021-02-02 09:52:34.281 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:52:34.281 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:52:34.282 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 5
2021-02-02 09:52:34.284 DEBUG 22956 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.getByTypeId  : ==>  Preparing: select b.id,b.title,b.flag,b.first_picture,b.published,b.views,b.update_time,b.description, t.id tid,t.name, b.comment_count, b.type_id, u.nickname, u.avatar from t_blog b join t_user u on b.user_id=u.id join t_type t on t.id=b.type_id and b.type_id = ? order by b.update_time desc
2021-02-02 09:52:34.284 DEBUG 22956 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.getByTypeId  : ==> Parameters: 16(Long)
2021-02-02 09:52:34.291 DEBUG 22956 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.getByTypeId  : <==      Total: 5
2021-02-02 09:52:34.293  INFO 22956 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : types
2021-02-02 09:52:39.977  INFO 22956 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 09:52:39.986 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 09:52:39.986 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 09:52:39.992 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 09:52:39.993 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 09:52:39.994 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 09:52:40.000 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 09:52:40.002 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 09:52:40.002 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 09:52:40.003 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 09:52:40.005 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 09:52:40.005 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 09:52:40.007 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 5
2021-02-02 09:52:40.008 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 09:52:40.008 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 09:52:40.010 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 5
2021-02-02 09:52:40.012 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 09:52:40.012 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 09:52:40.013 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:52:40.014  INFO 22956 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 09:54:15.078 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 09:54:15.079 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 09:54:15.079 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 09:54:15.081 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 09:54:15.081 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 09:54:15.083 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 5
2021-02-02 09:54:15.085 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 09:54:15.085 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 09:54:15.086 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:54:18.968 DEBUG 22956 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 09:54:18.969 DEBUG 22956 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 26(Long)
2021-02-02 09:54:18.972 DEBUG 22956 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 09:54:18.974 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 09:54:18.974 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 09:54:18.977 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:54:18.979 DEBUG 22956 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 09:54:18.979 DEBUG 22956 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 09:54:18.980 DEBUG 22956 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 09:54:52.095 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 09:54:52.095 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 09:54:52.096 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 09:54:52.098 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 09:54:52.098 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 09:54:52.100 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 5
2021-02-02 09:54:52.102 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 09:54:52.102 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 09:54:52.103 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:54:55.238 DEBUG 22956 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 09:54:55.239 DEBUG 22956 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 26(Long)
2021-02-02 09:54:55.239 DEBUG 22956 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 09:54:55.240 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 09:54:55.241 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 09:54:55.241 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:54:55.242 DEBUG 22956 --- [http-nio-8080-exec-6] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 09:54:55.243 DEBUG 22956 --- [http-nio-8080-exec-6] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 09:54:55.243 DEBUG 22956 --- [http-nio-8080-exec-6] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 09:55:30.246 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 09:55:30.246 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 09:55:30.247 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 09:55:30.248 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 09:55:30.249 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 09:55:30.250 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 5
2021-02-02 09:55:30.252 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 09:55:30.252 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 09:55:30.253 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:56:13.702 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 09:56:13.702 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 09:56:13.703 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 09:56:13.704 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 09:56:13.704 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 09:56:13.706 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 5
2021-02-02 09:56:13.708 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 09:56:13.708 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 09:56:13.709 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:56:48.845 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 09:56:48.846 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 09:56:48.846 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 09:56:48.847 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 09:56:48.847 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 09:56:48.850 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 5
2021-02-02 09:56:48.852 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 09:56:48.852 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 09:56:48.853 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:56:57.869 DEBUG 22956 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 09:56:57.870 DEBUG 22956 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 26(Long)
2021-02-02 09:56:57.874 DEBUG 22956 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 09:56:57.875 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 09:56:57.876 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 09:56:57.876 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:56:57.878 DEBUG 22956 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 09:56:57.878 DEBUG 22956 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 09:56:57.879 DEBUG 22956 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 09:57:44.817 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 09:57:44.817 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 09:57:44.819 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 09:57:44.820 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 09:57:44.820 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 09:57:44.822 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 5
2021-02-02 09:57:44.823 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 09:57:44.823 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 09:57:44.824 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:57:48.644 DEBUG 22956 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 09:57:48.644 DEBUG 22956 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 26(Long)
2021-02-02 09:57:48.646 DEBUG 22956 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 09:57:48.647 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 09:57:48.648 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 09:57:48.649 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:57:48.650 DEBUG 22956 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 09:57:48.651 DEBUG 22956 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 09:57:48.651 DEBUG 22956 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 09:58:02.353 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 09:58:02.354 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 09:58:02.355 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 09:58:02.356 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 09:58:02.356 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 09:58:02.358 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:58:05.393 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTag_COUNT     : ==>  Preparing: SELECT count(0) FROM t_tag
2021-02-02 09:58:05.394 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTag_COUNT     : ==> Parameters: 
2021-02-02 09:58:05.395 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTag_COUNT     : <==      Total: 1
2021-02-02 09:58:05.396 DEBUG 22956 --- [http-nio-8080-exec-8] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: SELECT id, name FROM t_tag order by id desc LIMIT ?
2021-02-02 09:58:05.396 DEBUG 22956 --- [http-nio-8080-exec-8] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 5(Integer)
2021-02-02 09:58:05.397 DEBUG 22956 --- [http-nio-8080-exec-8] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 09:58:08.317 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.d.N.selectAllNotice_COUNT            : ==>  Preparing: SELECT count(0) FROM t_notice
2021-02-02 09:58:08.318 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.d.N.selectAllNotice_COUNT            : ==> Parameters: 
2021-02-02 09:58:08.318 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.d.N.selectAllNotice_COUNT            : <==      Total: 1
2021-02-02 09:58:08.319 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: SELECT id, content FROM t_notice order by id desc LIMIT ?
2021-02-02 09:58:08.319 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 5(Integer)
2021-02-02 09:58:08.320 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 09:58:11.401 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 09:58:11.401 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 09:58:11.402 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 09:58:11.404 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 09:58:11.404 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 09:58:11.406 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 5
2021-02-02 09:58:11.408 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 09:58:11.408 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 09:58:11.409 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:59:34.727 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 09:59:34.728 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 09:59:34.729 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 09:59:34.732 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 09:59:34.732 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 09:59:34.733 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 5
2021-02-02 09:59:34.735 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 09:59:34.735 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 09:59:34.737 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 09:59:58.844 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 09:59:58.845 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 09:59:58.846 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 09:59:58.847 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 09:59:58.848 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 09:59:58.851 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 5
2021-02-02 09:59:58.852 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 09:59:58.852 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 09:59:58.853 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 10:01:22.521 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 10:01:22.521 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 10:01:22.522 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 10:01:22.523 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 10:01:22.523 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 10:01:22.524 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 5
2021-02-02 10:01:22.528 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 10:01:22.528 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 10:01:22.529 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 10:01:40.474 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 10:01:40.474 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 10:01:40.475 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 10:01:40.475 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 10:01:40.475 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 10:01:40.476 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 5
2021-02-02 10:01:40.478 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 10:01:40.478 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 10:01:40.479 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 10:01:43.628 DEBUG 22956 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 10:01:43.628 DEBUG 22956 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 26(Long)
2021-02-02 10:01:43.630 DEBUG 22956 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 10:01:43.631 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 10:01:43.631 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 10:01:43.631 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 10:01:43.632 DEBUG 22956 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 10:01:43.632 DEBUG 22956 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 10:01:43.633 DEBUG 22956 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 10:01:51.835 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 10:01:51.835 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 26(Long)
2021-02-02 10:01:51.836 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 1
2021-02-02 10:01:51.836 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.CommentMapper.findIdsByBlogId    : ==>  Preparing: select id from t_comment where blog_id=?
2021-02-02 10:01:51.837 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.CommentMapper.findIdsByBlogId    : ==> Parameters: 26(Long)
2021-02-02 10:01:51.839 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.CommentMapper.findIdsByBlogId    : <==      Total: 0
2021-02-02 10:01:51.839 DEBUG 22956 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.deleteBlog   : ==>  Preparing: delete from t_blog where id = ?
2021-02-02 10:01:51.840 DEBUG 22956 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.deleteBlog   : ==> Parameters: 26(Long)
2021-02-02 10:01:51.841 DEBUG 22956 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.deleteBlog   : <==    Updates: 1
2021-02-02 10:01:51.848 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 10:01:51.848 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 10:01:51.848 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 10:01:51.848 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 10:01:51.848 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 10:01:51.849 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 4
2021-02-02 10:01:51.850 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 10:01:51.850 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 10:01:51.850 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 10:01:54.718 DEBUG 22956 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 10:01:54.718 DEBUG 22956 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 21(Long)
2021-02-02 10:01:54.719 DEBUG 22956 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 10:01:54.720 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 10:01:54.720 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 10:01:54.721 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 10:01:54.722 DEBUG 22956 --- [http-nio-8080-exec-5] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 10:01:54.722 DEBUG 22956 --- [http-nio-8080-exec-5] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 10:01:54.723 DEBUG 22956 --- [http-nio-8080-exec-5] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 10:01:58.253  WARN 22956 --- [http-nio-8080-exec-10] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 10:01:58.260 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 10:01:58.260 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 16(Long)
2021-02-02 10:01:58.261 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 10:01:58.262 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 10:01:58.262 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 8(Long)
2021-02-02 10:01:58.262 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 10:01:58.263 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 10:01:58.263 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 21(Long)
2021-02-02 10:01:58.264 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 1
2021-02-02 10:01:58.264 DEBUG 22956 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.updateBlog   : ==>  Preparing: update t_blog set published = ?,flag = ? , title = ?, content = ?, type_id = ?, tag_ids = ?, first_picture = ? , description = ? , recommend = ? , share_statement = ?, appreciation = ?, commentabled = ? ,update_time = ? where id = ?
2021-02-02 10:01:58.265 DEBUG 22956 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.updateBlog   : ==> Parameters: false(Boolean), 原创(String), 标识符、关键字(String), **标识符：** 凡是程序员有权利自己命名的单词都是标识符

比如：类名、方法名、变量名、接口名、常量名...

**注意：main属于标识符，但是它不能更改**

**标识符的命名规则：**
- 标识符是由，数字，字母(包括中文)，下划线和美元符号($)构成，其他符号不可以
- 必须以字母、下划线或美元符号开头，不能以数字开头
- 关键字不能作为标识符
- 标识符区分大小写
- 标识符理论上没有长度限制

**标识符的命名规范：**

- 命名Java 标识符，最好见名知意

- 遵循驼峰命名方式（一高一低）

- 类名、接口名首字母大写、后面每个单词首字母大写

- 变量名、方法名首字母小写、后面每个单词首字母大写

- 所有常量名全部大写，并且单词之间采用下划线衔接

**关键字：** 提前定义好的具有特殊含义的单词(蓝色字体)，全部小写
,**标识符：** 凡是程序员有权利自己命名的单词都是标识符

比如：类名、方法名、变量名、接口名、常量名...

**注意：main属于标识符，但是它不能更改**

**标识符的命名规则：**
- 标识符是由，数字，字母(包括中文)，下划线和美元符号($)构成，其他符号不可以
- 必须以字母、下划线或美元符号开头，不能以数字开头
- 关键字不能作为标识符
- 标识符区分大小写
- 标识符理论上没有长度限制

**标识符的命名规范：**

- 命名Java 标识符，最好见名知意

- 遵循驼峰命名方式（一高一低）

- 类名、接口名首字母大写、后面每个单词首字母大写

- 变量名、方法名首字母小写、后面每个单词首字母大写

- 所有常量名全部大写，并且单词之间采用下划线衔接

**关键字：** 提前定义好的具有特殊含义的单词(蓝色字体)，全部小写
,**标识符：** 凡是程序员有权利自己命名的单词都是标识符

比如：类名、方法名、变量名、接口名、常量名...

**注意：main属于标识符，但是它不能更改**

**标识符的命名规则：**
- 标识符是由，数字，字母(包括中文)，下划线和美元符号($)构成，其他符号不可以
- 必须以字母、下划线或美元符号开头，不能以数字开头
- 关键字不能作为标识符
- 标识符区分大小写
- 标识符理论上没有长度限制

**标识符的命名规范：**

- 命名Java 标识符，最好见名知意

- 遵循驼峰命名方式（一高一低）

- 类名、接口名首字母大写、后面每个单词首字母大写

- 变量名、方法名首字母小写、后面每个单词首字母大写

- 所有常量名全部大写，并且单词之间采用下划线衔接

**关键字：** 提前定义好的具有特殊含义的单词(蓝色字体)，全部小写
,**标识符：** 凡是程序员有权利自己命名的单词都是标识符

比如：类名、方法名、变量名、接口名、常量名...

**注意：main属于标识符，但是它不能更改**

**标识符的命名规则：**
- 标识符是由，数字，字母(包括中文)，下划线和美元符号($)构成，其他符号不可以
- 必须以字母、下划线或美元符号开头，不能以数字开头
- 关键字不能作为标识符
- 标识符区分大小写
- 标识符理论上没有长度限制

**标识符的命名规范：**

- 命名Java 标识符，最好见名知意

- 遵循驼峰命名方式（一高一低）

- 类名、接口名首字母大写、后面每个单词首字母大写

- 变量名、方法名首字母小写、后面每个单词首字母大写

- 所有常量名全部大写，并且单词之间采用下划线衔接

**关键字：** 提前定义好的具有特殊含义的单词(蓝色字体)，全部小写
(String), 16(Long), 8(String), /images/kobe.jpg(String), 标识符和关键字(String), false(Boolean), true(Boolean), false(Boolean), true(Boolean), 2021-02-02 10:01:58.263(Timestamp), 21(Long)
2021-02-02 10:01:58.269 DEBUG 22956 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.updateBlog   : <==    Updates: 1
2021-02-02 10:01:58.270 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 10:01:58.270 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 8(Long), 21(Long)
2021-02-02 10:01:58.271 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 10:01:58.278 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 10:01:58.278 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 10:01:58.279 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 10:01:58.279 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 10:01:58.279 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 10:01:58.281 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 4
2021-02-02 10:01:58.282 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 10:01:58.282 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 10:01:58.282 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 10:02:06.481 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 10:02:06.481 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 10:02:06.481 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 10:02:06.482 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 10:02:06.482 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 10:02:06.482 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 10:02:08.676 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 10:02:08.676 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 18(Long)
2021-02-02 10:02:08.676 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 10:02:11.510  WARN 22956 --- [http-nio-8080-exec-10] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 10:02:11.511 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectTypeByName      : ==>  Preparing: select id, name from t_type where name = ?
2021-02-02 10:02:11.511 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectTypeByName      : ==> Parameters: Java多线程1(String)
2021-02-02 10:02:11.512 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectTypeByName      : <==      Total: 1
2021-02-02 10:02:27.768 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTag_COUNT     : ==>  Preparing: SELECT count(0) FROM t_tag
2021-02-02 10:02:27.768 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTag_COUNT     : ==> Parameters: 
2021-02-02 10:02:27.769 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTag_COUNT     : <==      Total: 1
2021-02-02 10:02:27.770 DEBUG 22956 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: SELECT id, name FROM t_tag order by id desc LIMIT ?
2021-02-02 10:02:27.770 DEBUG 22956 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 5(Integer)
2021-02-02 10:02:27.770 DEBUG 22956 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 10:02:31.307 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 10:02:31.307 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 10:02:31.307 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 10:02:31.308 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 10:02:31.308 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 10:02:31.309 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 10:02:31.947 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 10:02:31.947 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 10:02:31.947 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 10:02:31.948 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 10:02:31.948 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 10:02:31.949 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 4
2021-02-02 10:02:31.950 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 10:02:31.950 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 10:02:31.950 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 10:02:35.689 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 10:02:35.689 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 10:02:35.690 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 10:02:35.691 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 10:02:35.691 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 10:02:35.692 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 10:02:45.239 DEBUG 22956 --- [http-nio-8080-exec-6] c.personblog.dao.TypeMapper.deleteType   : ==>  Preparing: delete from t_type where id = ?
2021-02-02 10:02:45.239 DEBUG 22956 --- [http-nio-8080-exec-6] c.personblog.dao.TypeMapper.deleteType   : ==> Parameters: 18(Long)
2021-02-02 10:02:45.241 DEBUG 22956 --- [http-nio-8080-exec-6] c.personblog.dao.TypeMapper.deleteType   : <==    Updates: 1
2021-02-02 10:02:45.256 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 10:02:45.256 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 10:02:45.256 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 10:02:45.256 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 10:02:45.256 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 10:02:45.257 DEBUG 22956 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : <==      Total: 2
2021-02-02 10:02:49.424 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTag_COUNT     : ==>  Preparing: SELECT count(0) FROM t_tag
2021-02-02 10:02:49.424 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTag_COUNT     : ==> Parameters: 
2021-02-02 10:02:49.425 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTag_COUNT     : <==      Total: 1
2021-02-02 10:02:49.425 DEBUG 22956 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: SELECT id, name FROM t_tag order by id desc LIMIT ?
2021-02-02 10:02:49.425 DEBUG 22956 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 5(Integer)
2021-02-02 10:02:49.426 DEBUG 22956 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 10:02:51.950 DEBUG 22956 --- [http-nio-8080-exec-8] com.personblog.dao.TagMapper.deleteTag   : ==>  Preparing: delete from t_tag where id = ?
2021-02-02 10:02:51.951 DEBUG 22956 --- [http-nio-8080-exec-8] com.personblog.dao.TagMapper.deleteTag   : ==> Parameters: 10(Long)
2021-02-02 10:02:51.952 DEBUG 22956 --- [http-nio-8080-exec-8] com.personblog.dao.TagMapper.deleteTag   : <==    Updates: 1
2021-02-02 10:02:51.969 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTag_COUNT     : ==>  Preparing: SELECT count(0) FROM t_tag
2021-02-02 10:02:51.970 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTag_COUNT     : ==> Parameters: 
2021-02-02 10:02:51.970 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTag_COUNT     : <==      Total: 1
2021-02-02 10:02:51.970 DEBUG 22956 --- [http-nio-8080-exec-5] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: SELECT id, name FROM t_tag order by id desc LIMIT ?
2021-02-02 10:02:51.970 DEBUG 22956 --- [http-nio-8080-exec-5] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 5(Integer)
2021-02-02 10:02:51.971 DEBUG 22956 --- [http-nio-8080-exec-5] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 2
2021-02-02 10:02:58.571 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 10:02:58.571 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 9(Long)
2021-02-02 10:02:58.572 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 10:03:01.493  WARN 22956 --- [http-nio-8080-exec-4] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 10:03:01.495 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectTagByName        : ==>  Preparing: select id, name from t_tag where name = ?
2021-02-02 10:03:01.495 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectTagByName        : ==> Parameters: spring2(String)
2021-02-02 10:03:01.495 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectTagByName        : <==      Total: 0
2021-02-02 10:03:01.498 DEBUG 22956 --- [http-nio-8080-exec-4] com.personblog.dao.TagMapper.updateTag   : ==>  Preparing: update t_tag set name = ? where id = ?;
2021-02-02 10:03:01.498 DEBUG 22956 --- [http-nio-8080-exec-4] com.personblog.dao.TagMapper.updateTag   : ==> Parameters: spring2(String), 9(Long)
2021-02-02 10:03:01.499 DEBUG 22956 --- [http-nio-8080-exec-4] com.personblog.dao.TagMapper.updateTag   : <==    Updates: 1
2021-02-02 10:03:01.507 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectAllTag_COUNT     : ==>  Preparing: SELECT count(0) FROM t_tag
2021-02-02 10:03:01.507 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectAllTag_COUNT     : ==> Parameters: 
2021-02-02 10:03:01.508 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectAllTag_COUNT     : <==      Total: 1
2021-02-02 10:03:01.508 DEBUG 22956 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: SELECT id, name FROM t_tag order by id desc LIMIT ?
2021-02-02 10:03:01.508 DEBUG 22956 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 5(Integer)
2021-02-02 10:03:01.508 DEBUG 22956 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 2
2021-02-02 10:03:04.846 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 10:03:04.846 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 10:03:04.847 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 10:03:04.847 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 10:03:04.848 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 10:03:04.848 DEBUG 22956 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : <==      Total: 2
2021-02-02 10:03:31.969  INFO 22956 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 10:03:31.970 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 10:03:31.970 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 10:03:31.970 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 10:03:31.971 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 10:03:31.971 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 10:03:31.971 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 10:03:31.972 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 10:03:31.972 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 10:03:31.980 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 10:03:31.981 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 10:03:31.981 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 10:03:31.982 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 3
2021-02-02 10:03:31.983 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 10:03:31.983 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 10:03:31.983 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 10:03:31.984 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 10:03:31.984 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 10:03:31.984 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 10:03:31.984  INFO 22956 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 10:03:39.719  INFO 22956 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/21', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[21, {}]}
2021-02-02 10:03:39.720 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 10:03:39.721 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 21(Long)
2021-02-02 10:03:39.722 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 0
2021-02-02 10:03:39.726 ERROR 22956 --- [http-nio-8080-exec-8] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/blog/21, Exception : {}

com.personblog.exception.NotFoundException: 该博客不存在
	at com.personblog.service.impl.BlogServiceImpl.getDetailedBlog(BlogServiceImpl.java:127)
	at com.personblog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$edbaedc8.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:367)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.personblog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$61e2bf4a.getDetailedBlog(<generated>)
	at com.personblog.controller.IndexController.blog(IndexController.java:65)
	at com.personblog.controller.IndexController$$FastClassBySpringCGLIB$$7f9820c6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.personblog.controller.IndexController$$EnhancerBySpringCGLIB$$635eb5a7.blog(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-02-02 10:03:39.729  WARN 22956 --- [http-nio-8080-exec-8] .w.s.m.a.ResponseStatusExceptionResolver : Resolved [com.personblog.exception.NotFoundException: 该博客不存在]
2021-02-02 10:13:15.814 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 10:13:15.814 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 10:13:15.815 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 10:13:15.816 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 10:13:15.817 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 10:13:15.818 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 4
2021-02-02 10:13:15.820 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 10:13:15.821 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 10:13:15.821 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : <==      Total: 2
2021-02-02 10:13:45.341 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 10:13:45.341 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 10:13:45.341 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 10:13:45.342 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 10:13:45.342 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 10:13:45.342 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : <==      Total: 2
2021-02-02 10:14:06.910 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTag_COUNT     : ==>  Preparing: SELECT count(0) FROM t_tag
2021-02-02 10:14:06.911 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTag_COUNT     : ==> Parameters: 
2021-02-02 10:14:06.913 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTag_COUNT     : <==      Total: 1
2021-02-02 10:14:06.914 DEBUG 22956 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: SELECT id, name FROM t_tag order by id desc LIMIT ?
2021-02-02 10:14:06.914 DEBUG 22956 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 5(Integer)
2021-02-02 10:14:06.915 DEBUG 22956 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 2
2021-02-02 10:27:44.883 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTag_COUNT     : ==>  Preparing: SELECT count(0) FROM t_tag
2021-02-02 10:27:44.884 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTag_COUNT     : ==> Parameters: 
2021-02-02 10:27:44.885 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTag_COUNT     : <==      Total: 1
2021-02-02 10:27:44.886 DEBUG 22956 --- [http-nio-8080-exec-8] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: SELECT id, name FROM t_tag order by id desc LIMIT ?
2021-02-02 10:27:44.886 DEBUG 22956 --- [http-nio-8080-exec-8] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 5(Integer)
2021-02-02 10:27:44.886 DEBUG 22956 --- [http-nio-8080-exec-8] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 2
2021-02-02 10:29:23.437  INFO 22956 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/21', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[21, {}]}
2021-02-02 10:29:23.438 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 10:29:23.439 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 21(Long)
2021-02-02 10:29:23.441 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 0
2021-02-02 10:29:23.444 ERROR 22956 --- [http-nio-8080-exec-8] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/blog/21, Exception : {}

com.personblog.exception.NotFoundException: 该博客不存在
	at com.personblog.service.impl.BlogServiceImpl.getDetailedBlog(BlogServiceImpl.java:127)
	at com.personblog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$edbaedc8.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:367)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.personblog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$61e2bf4a.getDetailedBlog(<generated>)
	at com.personblog.controller.IndexController.blog(IndexController.java:65)
	at com.personblog.controller.IndexController$$FastClassBySpringCGLIB$$7f9820c6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.personblog.controller.IndexController$$EnhancerBySpringCGLIB$$635eb5a7.blog(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-02-02 10:29:23.444  WARN 22956 --- [http-nio-8080-exec-8] .w.s.m.a.ResponseStatusExceptionResolver : Resolved [com.personblog.exception.NotFoundException: 该博客不存在]
2021-02-02 10:29:28.790  INFO 22956 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 10:29:28.792 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 10:29:28.793 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 10:29:28.793 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 10:29:28.794 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 10:29:28.794 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 10:29:28.795 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 10:29:28.797 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 10:29:28.797 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 10:29:28.797 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 10:29:28.798 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 10:29:28.799 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 10:29:28.800 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 3
2021-02-02 10:29:28.800 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 10:29:28.801 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 10:29:28.802 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 10:29:28.804 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 10:29:28.804 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 10:29:28.805 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 10:29:28.805  INFO 22956 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 10:29:32.711  INFO 22956 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/21', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[21, {}]}
2021-02-02 10:29:32.712 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 10:29:32.713 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 21(Long)
2021-02-02 10:29:32.713 DEBUG 22956 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 0
2021-02-02 10:29:32.716 ERROR 22956 --- [http-nio-8080-exec-10] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/blog/21, Exception : {}

com.personblog.exception.NotFoundException: 该博客不存在
	at com.personblog.service.impl.BlogServiceImpl.getDetailedBlog(BlogServiceImpl.java:127)
	at com.personblog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$edbaedc8.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:367)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.personblog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$61e2bf4a.getDetailedBlog(<generated>)
	at com.personblog.controller.IndexController.blog(IndexController.java:65)
	at com.personblog.controller.IndexController$$FastClassBySpringCGLIB$$7f9820c6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.personblog.controller.IndexController$$EnhancerBySpringCGLIB$$635eb5a7.blog(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-02-02 10:29:32.717  WARN 22956 --- [http-nio-8080-exec-10] .w.s.m.a.ResponseStatusExceptionResolver : Resolved [com.personblog.exception.NotFoundException: 该博客不存在]
2021-02-02 10:29:41.908  INFO 22956 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/23', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[23, {}]}
2021-02-02 10:29:41.910 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 10:29:41.910 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 23(Long)
2021-02-02 10:29:41.913 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 10:29:41.932 DEBUG 22956 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 10:29:41.933 DEBUG 22956 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 23(Long)
2021-02-02 10:29:41.935 DEBUG 22956 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 10:29:41.935 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 10:29:41.935 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 23(Long), 23(Long), 23(Long)
2021-02-02 10:29:41.937 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 10:29:41.939 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 10:29:41.939 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 23(Long), -1(Long)
2021-02-02 10:29:41.940 DEBUG 22956 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 10:29:41.940  INFO 22956 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 10:29:42.613  INFO 22956 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/23', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[23, {}]}
2021-02-02 10:29:42.615 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 10:29:42.615 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 23(Long), -1(Long)
2021-02-02 10:29:42.615 DEBUG 22956 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 10:29:42.616  INFO 22956 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 10:30:21.247 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 10:30:21.247 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 10:30:21.247 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 10:30:21.248 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 10:30:21.248 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 10:30:21.248 DEBUG 22956 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : <==      Total: 2
2021-02-02 10:30:45.981  INFO 22956 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/23', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[23, {}]}
2021-02-02 10:30:45.983 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 10:30:45.983 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 23(Long)
2021-02-02 10:30:45.985 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 10:30:45.986 DEBUG 22956 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 10:30:45.987 DEBUG 22956 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 23(Long)
2021-02-02 10:30:45.988 DEBUG 22956 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 10:30:45.988 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 10:30:45.988 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 23(Long), 23(Long), 23(Long)
2021-02-02 10:30:45.990 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 10:30:45.994 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 10:30:45.994 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 23(Long), -1(Long)
2021-02-02 10:30:45.995 DEBUG 22956 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 10:30:45.995  INFO 22956 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 10:30:46.718  INFO 22956 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/23', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[23, {}]}
2021-02-02 10:30:46.719 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 10:30:46.719 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 23(Long), -1(Long)
2021-02-02 10:30:46.719 DEBUG 22956 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 10:30:46.720  INFO 22956 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 10:30:59.884  INFO 22956 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 10:30:59.888 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 10:30:59.888 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 10:30:59.889 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 10:30:59.889 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 10:30:59.889 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 10:30:59.891 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 10:30:59.892 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 10:30:59.892 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 10:30:59.892 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 10:30:59.893 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 10:30:59.893 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 10:30:59.893 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 3
2021-02-02 10:30:59.894 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 10:30:59.894 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 10:30:59.895 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 10:30:59.896 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 10:30:59.896 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 10:30:59.896 DEBUG 22956 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 10:30:59.896  INFO 22956 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 10:31:19.538  INFO 22956 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/21', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[21, {}]}
2021-02-02 10:31:19.538 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 10:31:19.539 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 21(Long)
2021-02-02 10:31:19.539 DEBUG 22956 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 0
2021-02-02 10:31:19.541 ERROR 22956 --- [http-nio-8080-exec-3] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/blog/21, Exception : {}

com.personblog.exception.NotFoundException: 该博客不存在
	at com.personblog.service.impl.BlogServiceImpl.getDetailedBlog(BlogServiceImpl.java:127)
	at com.personblog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$edbaedc8.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:367)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.personblog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$61e2bf4a.getDetailedBlog(<generated>)
	at com.personblog.controller.IndexController.blog(IndexController.java:65)
	at com.personblog.controller.IndexController$$FastClassBySpringCGLIB$$7f9820c6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.personblog.controller.IndexController$$EnhancerBySpringCGLIB$$635eb5a7.blog(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-02-02 10:31:19.542  WARN 22956 --- [http-nio-8080-exec-3] .w.s.m.a.ResponseStatusExceptionResolver : Resolved [com.personblog.exception.NotFoundException: 该博客不存在]
2021-02-02 10:34:05.220  INFO 23520 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 23520 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 10:34:05.224 DEBUG 23520 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 10:34:05.225  INFO 23520 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 10:34:05.293  INFO 23520 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 10:34:05.294  INFO 23520 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 10:34:06.733  INFO 23520 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 10:34:06.742  INFO 23520 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 10:34:06.743  INFO 23520 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 10:34:06.843  INFO 23520 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 10:34:06.843  INFO 23520 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1549 ms
2021-02-02 10:34:07.606  INFO 23520 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 10:34:07.692  INFO 23520 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 10:34:08.045  INFO 23520 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 10:34:08.084  INFO 23520 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 10:34:08.094  INFO 23520 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 3.627 seconds (JVM running for 5.392)
2021-02-02 10:34:10.917  INFO 23520 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 10:34:10.918  INFO 23520 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 10:34:10.932  INFO 23520 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 14 ms
2021-02-02 10:34:10.980  INFO 23520 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 10:34:10.993  INFO 23520 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 10:34:11.251  INFO 23520 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 10:34:11.367 DEBUG 23520 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 10:34:11.398 DEBUG 23520 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 10:34:11.418 DEBUG 23520 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 10:34:11.422 DEBUG 23520 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 10:34:11.423 DEBUG 23520 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 10:34:11.433 DEBUG 23520 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 10:34:11.437 DEBUG 23520 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 10:34:11.438 DEBUG 23520 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 10:34:11.439 DEBUG 23520 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 10:34:11.450 DEBUG 23520 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 10:34:11.450 DEBUG 23520 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 10:34:11.452 DEBUG 23520 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 3
2021-02-02 10:34:11.460 DEBUG 23520 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 10:34:11.462 DEBUG 23520 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 10:34:11.466 DEBUG 23520 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 10:34:11.470 DEBUG 23520 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 10:34:11.470 DEBUG 23520 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 10:34:11.474 DEBUG 23520 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 10:34:11.478  INFO 23520 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 10:34:45.517  INFO 23520 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/21', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[21, {}]}
2021-02-02 10:34:45.525 DEBUG 23520 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 10:34:45.525 DEBUG 23520 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 21(Long)
2021-02-02 10:34:45.527 DEBUG 23520 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 0
2021-02-02 10:34:45.533 ERROR 23520 --- [http-nio-8080-exec-6] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/blog/21, Exception : {}

com.personblog.exception.NotFoundException: 该博客不存在
	at com.personblog.service.impl.BlogServiceImpl.getDetailedBlog(BlogServiceImpl.java:127)
	at com.personblog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$edbaedc8.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:367)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.personblog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$6a98e817.getDetailedBlog(<generated>)
	at com.personblog.controller.IndexController.blog(IndexController.java:65)
	at com.personblog.controller.IndexController$$FastClassBySpringCGLIB$$7f9820c6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.personblog.controller.IndexController$$EnhancerBySpringCGLIB$$45f09648.blog(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-02-02 10:34:45.536  WARN 23520 --- [http-nio-8080-exec-6] .w.s.m.a.ResponseStatusExceptionResolver : Resolved [com.personblog.exception.NotFoundException: 该博客不存在]
2021-02-02 10:35:08.204 DEBUG 23520 --- [http-nio-8080-exec-9] com.personblog.dao.UserMapper.login      : ==>  Preparing: select username, password from t_user where username=? and password=?;
2021-02-02 10:35:08.205 DEBUG 23520 --- [http-nio-8080-exec-9] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 10:35:08.206 DEBUG 23520 --- [http-nio-8080-exec-9] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 10:35:09.759 DEBUG 23520 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 10:35:09.759 DEBUG 23520 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 10:35:09.760 DEBUG 23520 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 10:35:09.762 DEBUG 23520 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 10:35:09.762 DEBUG 23520 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 10:35:09.764 DEBUG 23520 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 4
2021-02-02 10:35:09.770 DEBUG 23520 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 10:35:09.770 DEBUG 23520 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 10:35:09.772 DEBUG 23520 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : <==      Total: 2
2021-02-02 10:35:38.841  INFO 892 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 892 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 10:35:38.844 DEBUG 892 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 10:35:38.845  INFO 892 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 10:35:38.903  INFO 892 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 10:35:38.903  INFO 892 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 10:35:40.107  INFO 892 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 10:35:40.115  INFO 892 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 10:35:40.115  INFO 892 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 10:35:40.195  INFO 892 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 10:35:40.195  INFO 892 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1292 ms
2021-02-02 10:35:40.851  INFO 892 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 10:35:40.947  INFO 892 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 10:35:41.252  INFO 892 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 10:35:41.285  INFO 892 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 10:35:41.296  INFO 892 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 3.111 seconds (JVM running for 4.382)
2021-02-02 10:35:44.755  INFO 892 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 10:35:44.755  INFO 892 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 10:35:44.772  INFO 892 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 16 ms
2021-02-02 10:35:44.825  INFO 892 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 10:35:44.851  INFO 892 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 10:35:45.177  INFO 892 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 10:35:45.311 DEBUG 892 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id
2021-02-02 10:35:45.351 DEBUG 892 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 10:35:45.369 DEBUG 892 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 10:35:45.371 DEBUG 892 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id order by b.update_time desc LIMIT ?
2021-02-02 10:35:45.372 DEBUG 892 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 10:35:45.376 DEBUG 892 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 10:35:45.385 DEBUG 892 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 10:35:45.385 DEBUG 892 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 10:35:45.386 DEBUG 892 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 10:35:45.392 DEBUG 892 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 10:35:45.393 DEBUG 892 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 10:35:45.399 DEBUG 892 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 3
2021-02-02 10:35:45.405 DEBUG 892 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 10:35:45.405 DEBUG 892 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 10:35:45.407 DEBUG 892 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 10:35:45.412 DEBUG 892 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 10:35:45.413 DEBUG 892 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 10:35:45.418 DEBUG 892 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 10:35:45.419  INFO 892 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 10:36:33.304 DEBUG 892 --- [http-nio-8080-exec-6] com.personblog.dao.UserMapper.login      : ==>  Preparing: select username, password from t_user where username=? and password=?;
2021-02-02 10:36:33.305 DEBUG 892 --- [http-nio-8080-exec-6] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 10:36:33.307 DEBUG 892 --- [http-nio-8080-exec-6] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 10:36:34.795 DEBUG 892 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id AND b.published = true
2021-02-02 10:36:34.795 DEBUG 892 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 10:36:34.796 DEBUG 892 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 10:36:34.798 DEBUG 892 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id AND b.published = true order by update_time desc LIMIT ?
2021-02-02 10:36:34.798 DEBUG 892 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 10:36:34.801 DEBUG 892 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 4
2021-02-02 10:36:34.802 DEBUG 892 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 10:36:34.802 DEBUG 892 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 10:36:34.803 DEBUG 892 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : <==      Total: 2
2021-02-02 10:36:46.374  INFO 892 --- [Thread-182] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-02-02 10:36:46.375  INFO 892 --- [Thread-182] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2021-02-02 10:36:46.381  INFO 892 --- [Thread-182] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2021-02-02 10:36:46.613  INFO 892 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 892 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 10:36:46.614 DEBUG 892 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 10:36:46.614  INFO 892 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 10:36:47.059  INFO 892 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 10:36:47.060  INFO 892 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 10:36:47.060  INFO 892 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 10:36:47.093  INFO 892 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 10:36:47.093  INFO 892 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 477 ms
2021-02-02 10:36:47.425  INFO 892 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 10:36:47.456  INFO 892 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 10:36:47.633  INFO 892 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 10:36:47.644  INFO 892 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 10:36:47.649  INFO 892 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 1.087 seconds (JVM running for 70.735)
2021-02-02 10:36:47.650  INFO 892 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2021-02-02 10:36:53.599  INFO 892 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 10:36:53.600  INFO 892 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 10:36:53.623  INFO 892 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 23 ms
2021-02-02 10:36:55.460  INFO 892 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Starting...
2021-02-02 10:36:55.473  INFO 892 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Start completed.
2021-02-02 10:36:55.473 DEBUG 892 --- [http-nio-8080-exec-1] com.personblog.dao.UserMapper.login      : ==>  Preparing: select username, password from t_user where username=? and password=?;
2021-02-02 10:36:55.474 DEBUG 892 --- [http-nio-8080-exec-1] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 10:36:55.475 DEBUG 892 --- [http-nio-8080-exec-1] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 10:36:56.766 DEBUG 892 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 10:36:56.766 DEBUG 892 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 10:36:56.767 DEBUG 892 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 10:36:56.774 DEBUG 892 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 10:36:56.775 DEBUG 892 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 10:36:56.777 DEBUG 892 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 4
2021-02-02 10:36:56.780 DEBUG 892 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 10:36:56.780 DEBUG 892 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 10:36:56.781 DEBUG 892 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : <==      Total: 2
2021-02-02 10:37:56.908  INFO 17100 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 17100 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 10:37:56.911 DEBUG 17100 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 10:37:56.911  INFO 17100 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 10:37:56.962  INFO 17100 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 10:37:56.962  INFO 17100 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 10:37:58.168  INFO 17100 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 10:37:58.175  INFO 17100 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 10:37:58.176  INFO 17100 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 10:37:58.262  INFO 17100 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 10:37:58.263  INFO 17100 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1301 ms
2021-02-02 10:37:58.864  INFO 17100 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 10:37:58.950  INFO 17100 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 10:37:59.312  INFO 17100 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 10:37:59.343  INFO 17100 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 10:37:59.352  INFO 17100 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 3.134 seconds (JVM running for 4.362)
2021-02-02 10:38:02.455  INFO 17100 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 10:38:02.455  INFO 17100 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 10:38:02.476  INFO 17100 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 21 ms
2021-02-02 10:38:02.542  INFO 17100 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 10:38:02.559  INFO 17100 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 10:38:02.873  INFO 17100 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 10:38:02.968 DEBUG 17100 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 10:38:02.997 DEBUG 17100 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 10:38:03.020 DEBUG 17100 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 10:38:03.024 DEBUG 17100 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 10:38:03.025 DEBUG 17100 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 10:38:03.032 DEBUG 17100 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 3
2021-02-02 10:38:03.035 DEBUG 17100 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 10:38:03.036 DEBUG 17100 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 10:38:03.036 DEBUG 17100 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 10:38:03.041 DEBUG 17100 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 10:38:03.041 DEBUG 17100 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 10:38:03.043 DEBUG 17100 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 3
2021-02-02 10:38:03.051 DEBUG 17100 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 10:38:03.051 DEBUG 17100 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 10:38:03.053 DEBUG 17100 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 10:38:03.055 DEBUG 17100 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 10:38:03.056 DEBUG 17100 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 10:38:03.057 DEBUG 17100 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 10:38:03.058  INFO 17100 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 10:38:06.223  INFO 17100 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/23', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[23, {}]}
2021-02-02 10:38:06.227 DEBUG 17100 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 10:38:06.227 DEBUG 17100 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 23(Long)
2021-02-02 10:38:06.231 DEBUG 17100 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 10:38:06.327 DEBUG 17100 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 10:38:06.328 DEBUG 17100 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 23(Long)
2021-02-02 10:38:06.330 DEBUG 17100 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 10:38:06.331 DEBUG 17100 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 10:38:06.331 DEBUG 17100 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 23(Long), 23(Long), 23(Long)
2021-02-02 10:38:06.333 DEBUG 17100 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 10:38:06.343 DEBUG 17100 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 10:38:06.344 DEBUG 17100 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 23(Long), -1(Long)
2021-02-02 10:38:06.345 DEBUG 17100 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 10:38:06.345  INFO 17100 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 10:38:07.014  INFO 17100 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/23', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[23, {}]}
2021-02-02 10:38:07.020 DEBUG 17100 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 10:38:07.020 DEBUG 17100 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 23(Long), -1(Long)
2021-02-02 10:38:07.021 DEBUG 17100 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 10:38:07.021  INFO 17100 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 10:40:22.870  INFO 17100 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 10:40:22.873 DEBUG 17100 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 10:40:22.873 DEBUG 17100 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 10:40:22.875 DEBUG 17100 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 10:40:22.879 DEBUG 17100 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 10:40:22.879 DEBUG 17100 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 10:40:22.885 DEBUG 17100 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 3
2021-02-02 10:40:22.887 DEBUG 17100 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 10:40:22.887 DEBUG 17100 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 10:40:22.888 DEBUG 17100 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 10:40:22.889 DEBUG 17100 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 10:40:22.889 DEBUG 17100 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 10:40:22.890 DEBUG 17100 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 3
2021-02-02 10:40:22.892 DEBUG 17100 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 10:40:22.893 DEBUG 17100 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 10:40:22.898 DEBUG 17100 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 10:40:22.900 DEBUG 17100 --- [http-nio-8080-exec-5] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 10:40:22.900 DEBUG 17100 --- [http-nio-8080-exec-5] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 10:40:22.901 DEBUG 17100 --- [http-nio-8080-exec-5] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 10:40:22.901  INFO 17100 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 10:40:32.910 DEBUG 17100 --- [http-nio-8080-exec-9] com.personblog.dao.UserMapper.login      : ==>  Preparing: select username, password from t_user where username=? and password=?;
2021-02-02 10:40:32.911 DEBUG 17100 --- [http-nio-8080-exec-9] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 10:40:32.913 DEBUG 17100 --- [http-nio-8080-exec-9] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 10:41:59.224  INFO 36588 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 36588 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 10:41:59.226 DEBUG 36588 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 10:41:59.227  INFO 36588 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 10:41:59.288  INFO 36588 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 10:41:59.288  INFO 36588 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 10:42:00.698  INFO 36588 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 10:42:00.706  INFO 36588 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 10:42:00.706  INFO 36588 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 10:42:00.793  INFO 36588 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 10:42:00.794  INFO 36588 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1505 ms
2021-02-02 10:42:01.406  INFO 36588 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 10:42:01.484  INFO 36588 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 10:42:01.780  INFO 36588 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 10:42:01.820  INFO 36588 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 10:42:01.829  INFO 36588 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 3.198 seconds (JVM running for 5.354)
2021-02-02 10:42:08.864  INFO 36588 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 10:42:08.867  INFO 36588 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 10:42:08.891  INFO 36588 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 23 ms
2021-02-02 10:42:08.989  INFO 36588 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 10:42:09.227  INFO 36588 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 10:42:09.239 DEBUG 36588 --- [http-nio-8080-exec-1] com.personblog.dao.UserMapper.login      : ==>  Preparing: select username, password from t_user where username=? and password=?;
2021-02-02 10:42:09.262 DEBUG 36588 --- [http-nio-8080-exec-1] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 10:42:09.282 DEBUG 36588 --- [http-nio-8080-exec-1] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 10:44:58.685  INFO 36588 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 10:44:58.747 DEBUG 36588 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 10:44:58.748 DEBUG 36588 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 10:44:58.750 DEBUG 36588 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 10:44:58.751 DEBUG 36588 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 10:44:58.753 DEBUG 36588 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 10:44:58.764 DEBUG 36588 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 3
2021-02-02 10:44:58.766 DEBUG 36588 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 10:44:58.767 DEBUG 36588 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 10:44:58.767 DEBUG 36588 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 10:44:58.771 DEBUG 36588 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 10:44:58.771 DEBUG 36588 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 10:44:58.773 DEBUG 36588 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 3
2021-02-02 10:44:58.781 DEBUG 36588 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 10:44:58.782 DEBUG 36588 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 10:44:58.784 DEBUG 36588 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 10:44:58.786 DEBUG 36588 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 10:44:58.786 DEBUG 36588 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 10:44:58.787 DEBUG 36588 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 10:44:58.788  INFO 36588 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 10:46:58.161 DEBUG 36588 --- [http-nio-8080-exec-4] com.personblog.dao.UserMapper.login      : ==>  Preparing: select username, password from t_user where username=? and password=?;
2021-02-02 10:46:58.163 DEBUG 36588 --- [http-nio-8080-exec-4] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 10:46:58.164 DEBUG 36588 --- [http-nio-8080-exec-4] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 10:48:35.890  INFO 36120 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 36120 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 10:48:35.894 DEBUG 36120 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 10:48:35.895  INFO 36120 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 10:48:35.961  INFO 36120 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 10:48:35.962  INFO 36120 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 10:48:37.392  INFO 36120 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 10:48:37.400  INFO 36120 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 10:48:37.401  INFO 36120 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 10:48:37.480  INFO 36120 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 10:48:37.480  INFO 36120 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1518 ms
2021-02-02 10:48:38.084  INFO 36120 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 10:48:38.171  INFO 36120 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 10:48:38.467  INFO 36120 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 10:48:38.497  INFO 36120 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 10:48:38.507  INFO 36120 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 3.269 seconds (JVM running for 4.506)
2021-02-02 10:48:43.253  INFO 36120 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 10:48:43.254  INFO 36120 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 10:48:43.261  INFO 36120 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 7 ms
2021-02-02 10:48:43.329  INFO 36120 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 10:48:43.550  INFO 36120 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 10:48:43.557 DEBUG 36120 --- [http-nio-8080-exec-1] com.personblog.dao.UserMapper.login      : ==>  Preparing: select username, password from t_user where username=? and password=?;
2021-02-02 10:48:43.582 DEBUG 36120 --- [http-nio-8080-exec-1] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 10:48:43.594 DEBUG 36120 --- [http-nio-8080-exec-1] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 10:49:33.065 DEBUG 36120 --- [http-nio-8080-exec-4] com.personblog.dao.UserMapper.login      : ==>  Preparing: select username, password from t_user where username=? and password=?;
2021-02-02 10:49:33.066 DEBUG 36120 --- [http-nio-8080-exec-4] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 10:49:33.067 DEBUG 36120 --- [http-nio-8080-exec-4] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 10:54:59.441  INFO 36120 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/types/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TypeShowController.typeShow', args=[{}, -1, 1]}
2021-02-02 10:54:59.460 DEBUG 36120 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 10:54:59.460 DEBUG 36120 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 10:54:59.462 DEBUG 36120 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 3
2021-02-02 10:54:59.474 DEBUG 36120 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.getByTypeId  : ==>  Preparing: select b.id,b.title,b.flag,b.first_picture,b.published,b.views,b.update_time,b.description, t.id tid,t.name, b.comment_count, b.type_id, u.nickname, u.avatar from t_blog b join t_user u on b.user_id=u.id join t_type t on t.id=b.type_id and b.type_id = ? order by b.update_time desc
2021-02-02 10:54:59.474 DEBUG 36120 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.getByTypeId  : ==> Parameters: 16(Long)
2021-02-02 10:54:59.478 DEBUG 36120 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.getByTypeId  : <==      Total: 4
2021-02-02 10:54:59.483  INFO 36120 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : types
2021-02-02 10:55:26.248  INFO 36120 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 10:55:26.287 DEBUG 36120 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 10:55:26.288 DEBUG 36120 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 10:55:26.289 DEBUG 36120 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 10:55:26.291 DEBUG 36120 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 10:55:26.291 DEBUG 36120 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 10:55:26.293 DEBUG 36120 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 3
2021-02-02 10:55:26.296 DEBUG 36120 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 10:55:26.296 DEBUG 36120 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 10:55:26.299 DEBUG 36120 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 10:55:26.301 DEBUG 36120 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 10:55:26.302 DEBUG 36120 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 10:55:26.303 DEBUG 36120 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 3
2021-02-02 10:55:26.307 DEBUG 36120 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 10:55:26.308 DEBUG 36120 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 10:55:26.309 DEBUG 36120 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 10:55:26.310 DEBUG 36120 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 10:55:26.311 DEBUG 36120 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 10:55:26.312 DEBUG 36120 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 10:55:26.313  INFO 36120 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 10:56:43.577  INFO 36120 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 10:56:43.582 DEBUG 36120 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 10:56:43.582 DEBUG 36120 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 10:56:43.584 DEBUG 36120 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 10:56:43.586 DEBUG 36120 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 10:56:43.587 DEBUG 36120 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 10:56:43.592 DEBUG 36120 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 3
2021-02-02 10:56:43.605 DEBUG 36120 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 10:56:43.606 DEBUG 36120 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 10:56:43.608 DEBUG 36120 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 10:56:43.611 DEBUG 36120 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 10:56:43.611 DEBUG 36120 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 10:56:43.614 DEBUG 36120 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 3
2021-02-02 10:56:43.616 DEBUG 36120 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 10:56:43.616 DEBUG 36120 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 10:56:43.621 DEBUG 36120 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 10:56:43.624 DEBUG 36120 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 10:56:43.625 DEBUG 36120 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 10:56:43.627 DEBUG 36120 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 10:56:43.630  INFO 36120 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 10:57:05.170  INFO 36120 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 10:57:05.175 DEBUG 36120 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 10:57:05.175 DEBUG 36120 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 10:57:05.176 DEBUG 36120 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 10:57:05.177 DEBUG 36120 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 10:57:05.177 DEBUG 36120 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 10:57:05.180 DEBUG 36120 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 3
2021-02-02 10:57:05.184 DEBUG 36120 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 10:57:05.185 DEBUG 36120 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 10:57:05.187 DEBUG 36120 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 10:57:05.189 DEBUG 36120 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 10:57:05.189 DEBUG 36120 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 10:57:05.191 DEBUG 36120 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 3
2021-02-02 10:57:05.192 DEBUG 36120 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 10:57:05.193 DEBUG 36120 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 10:57:05.194 DEBUG 36120 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 10:57:05.196 DEBUG 36120 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 10:57:05.196 DEBUG 36120 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 10:57:05.198 DEBUG 36120 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 10:57:05.201  INFO 36120 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 10:58:21.796  INFO 36120 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 10:58:21.802 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 10:58:21.803 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 10:58:21.804 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 10:58:21.806 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 10:58:21.808 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 10:58:21.815 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 3
2021-02-02 10:58:21.816 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 10:58:21.816 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 10:58:21.817 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 10:58:21.818 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 10:58:21.818 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 10:58:21.819 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 3
2021-02-02 10:58:21.821 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 10:58:21.822 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 10:58:21.826 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 10:58:21.829 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 10:58:21.829 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 10:58:21.830 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 10:58:21.830  INFO 36120 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 10:58:40.966  INFO 36120 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 10:58:40.968 DEBUG 36120 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 10:58:40.969 DEBUG 36120 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 10:58:40.972 DEBUG 36120 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 10:58:40.973 DEBUG 36120 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 10:58:40.975 DEBUG 36120 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 10:58:40.979 DEBUG 36120 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 3
2021-02-02 10:58:40.980 DEBUG 36120 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 10:58:40.981 DEBUG 36120 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 10:58:40.981 DEBUG 36120 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 10:58:40.983 DEBUG 36120 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 10:58:40.983 DEBUG 36120 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 10:58:40.984 DEBUG 36120 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 3
2021-02-02 10:58:40.987 DEBUG 36120 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 10:58:40.989 DEBUG 36120 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 10:58:40.991 DEBUG 36120 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 10:58:40.993 DEBUG 36120 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 10:58:40.993 DEBUG 36120 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 10:58:40.993 DEBUG 36120 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 10:58:40.993  INFO 36120 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 11:00:09.659  INFO 36120 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 11:00:09.665 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 11:00:09.665 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 11:00:09.666 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 11:00:09.667 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 11:00:09.667 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 11:00:09.669 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 3
2021-02-02 11:00:09.670 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 11:00:09.670 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 11:00:09.671 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 11:00:09.672 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 11:00:09.673 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 11:00:09.675 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 3
2021-02-02 11:00:09.679 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 11:00:09.680 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 11:00:09.682 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 11:00:09.684 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 11:00:09.684 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 11:00:09.685 DEBUG 36120 --- [http-nio-8080-exec-5] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 11:00:09.685  INFO 36120 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 11:00:22.023  INFO 632 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 632 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 11:00:22.026 DEBUG 632 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 11:00:22.027  INFO 632 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 11:00:22.079  INFO 632 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 11:00:22.079  INFO 632 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 11:00:23.310  INFO 632 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 11:00:23.317  INFO 632 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 11:00:23.317  INFO 632 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 11:00:23.400  INFO 632 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 11:00:23.400  INFO 632 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1321 ms
2021-02-02 11:00:24.011  INFO 632 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 11:00:24.092  INFO 632 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 11:00:24.385  INFO 632 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 11:00:24.417  INFO 632 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 11:00:24.427  INFO 632 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 3.088 seconds (JVM running for 5.248)
2021-02-02 11:00:27.053  INFO 632 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 11:00:27.053  INFO 632 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 11:00:27.067  INFO 632 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 13 ms
2021-02-02 11:00:27.112  INFO 632 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 11:00:27.126  INFO 632 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 11:00:27.399  INFO 632 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 11:00:27.485 DEBUG 632 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 11:00:27.512 DEBUG 632 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 11:00:27.531 DEBUG 632 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 11:00:27.534 DEBUG 632 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 11:00:27.535 DEBUG 632 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 11:00:27.540 DEBUG 632 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 3
2021-02-02 11:00:27.548 DEBUG 632 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 11:00:27.548 DEBUG 632 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 11:00:27.549 DEBUG 632 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 11:00:27.555 DEBUG 632 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 11:00:27.556 DEBUG 632 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 11:00:27.562 DEBUG 632 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 3
2021-02-02 11:00:27.566 DEBUG 632 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 11:00:27.566 DEBUG 632 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 11:00:27.568 DEBUG 632 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 11:00:27.571 DEBUG 632 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 11:00:27.571 DEBUG 632 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 11:00:27.577 DEBUG 632 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 11:00:27.578  INFO 632 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 11:00:47.365  INFO 632 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 11:00:47.370 DEBUG 632 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 11:00:47.371 DEBUG 632 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 11:00:47.373 DEBUG 632 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 11:00:47.373 DEBUG 632 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 11:00:47.374 DEBUG 632 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 11:00:47.380 DEBUG 632 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 3
2021-02-02 11:00:47.382 DEBUG 632 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 11:00:47.382 DEBUG 632 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 11:00:47.383 DEBUG 632 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 11:00:47.384 DEBUG 632 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 11:00:47.384 DEBUG 632 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 11:00:47.386 DEBUG 632 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 3
2021-02-02 11:00:47.390 DEBUG 632 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 11:00:47.391 DEBUG 632 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 11:00:47.393 DEBUG 632 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 11:00:47.401 DEBUG 632 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 11:00:47.401 DEBUG 632 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 11:00:47.402 DEBUG 632 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 11:00:47.403  INFO 632 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 11:01:08.457  INFO 632 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 11:01:08.460 DEBUG 632 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 11:01:08.461 DEBUG 632 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 11:01:08.462 DEBUG 632 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 11:01:08.463 DEBUG 632 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 11:01:08.464 DEBUG 632 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 11:01:08.471 DEBUG 632 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 3
2021-02-02 11:01:08.473 DEBUG 632 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 11:01:08.474 DEBUG 632 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 11:01:08.474 DEBUG 632 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 11:01:08.476 DEBUG 632 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 11:01:08.476 DEBUG 632 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 11:01:08.480 DEBUG 632 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 3
2021-02-02 11:01:08.482 DEBUG 632 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 11:01:08.484 DEBUG 632 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 11:01:08.491 DEBUG 632 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 11:01:08.493 DEBUG 632 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 11:01:08.493 DEBUG 632 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 11:01:08.495 DEBUG 632 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 11:01:08.495  INFO 632 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 11:06:58.150  INFO 35012 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 35012 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 11:06:58.153 DEBUG 35012 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 11:06:58.154  INFO 35012 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 11:06:58.234  INFO 35012 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 11:06:58.235  INFO 35012 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 11:06:59.491  INFO 35012 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 11:06:59.508  INFO 35012 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 11:06:59.508  INFO 35012 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 11:06:59.641  INFO 35012 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 11:06:59.642  INFO 35012 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1407 ms
2021-02-02 11:07:00.297  INFO 35012 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 11:07:00.383  INFO 35012 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 11:07:00.705  INFO 35012 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 11:07:00.737  INFO 35012 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 11:07:00.746  INFO 35012 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 3.314 seconds (JVM running for 4.452)
2021-02-02 11:07:04.365  INFO 35012 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 11:07:04.365  INFO 35012 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 11:07:04.381  INFO 35012 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 15 ms
2021-02-02 11:07:04.429  INFO 35012 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 11:07:04.450  INFO 35012 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 11:07:04.764  INFO 35012 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 11:07:04.865 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 11:07:04.891 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 11:07:04.915 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 11:07:04.918 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 11:07:04.919 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 11:07:04.927 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 3
2021-02-02 11:07:04.930 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 11:07:04.931 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 11:07:04.932 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 11:07:04.936 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 11:07:04.936 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 11:07:04.941 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 3
2021-02-02 11:07:04.947 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 11:07:04.947 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 11:07:04.949 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 11:07:04.951 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 11:07:04.951 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 11:07:04.953 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 11:07:04.954  INFO 35012 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 11:12:22.365  INFO 35012 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 11:12:22.372 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 11:12:22.373 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 11:12:22.374 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 11:12:22.374 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 11:12:22.375 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 11:12:22.377 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 3
2021-02-02 11:12:22.379 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 11:12:22.379 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 11:12:22.380 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 11:12:22.384 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 11:12:22.384 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 11:12:22.386 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 3
2021-02-02 11:12:22.388 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 11:12:22.389 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 11:12:22.390 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 11:12:22.401 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 11:12:22.402 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 11:12:22.403 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 11:12:22.403  INFO 35012 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 11:16:24.465  INFO 35012 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 11:16:24.473 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 11:16:24.474 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 11:16:24.475 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 11:16:24.476 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 11:16:24.477 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 11:16:24.480 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 3
2021-02-02 11:16:24.482 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 11:16:24.483 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 11:16:24.486 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 11:16:24.488 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 11:16:24.490 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 11:16:24.493 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 3
2021-02-02 11:16:24.496 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 11:16:24.496 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 11:16:24.498 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 11:16:24.500 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 11:16:24.501 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 11:16:24.505 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 11:16:24.506  INFO 35012 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 11:16:40.037 DEBUG 35012 --- [http-nio-8080-exec-1] com.personblog.dao.UserMapper.login      : ==>  Preparing: select username, password from t_user where username=? and password=?;
2021-02-02 11:16:40.037 DEBUG 35012 --- [http-nio-8080-exec-1] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 11:16:40.038 DEBUG 35012 --- [http-nio-8080-exec-1] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 11:16:41.869 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 11:16:41.869 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 11:16:41.870 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 11:16:41.873 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 11:16:41.873 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 11:16:41.876 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 4
2021-02-02 11:16:41.878 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 11:16:41.879 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 11:16:41.882 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : <==      Total: 2
2021-02-02 11:16:43.287 DEBUG 35012 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 11:16:43.288 DEBUG 35012 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 21(Long)
2021-02-02 11:16:43.290 DEBUG 35012 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 11:16:43.292 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 11:16:43.292 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 11:16:43.293 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : <==      Total: 2
2021-02-02 11:16:43.294 DEBUG 35012 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 11:16:43.294 DEBUG 35012 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 11:16:43.295 DEBUG 35012 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 2
2021-02-02 11:16:46.822 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 11:16:46.823 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 11:16:46.823 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 11:16:46.824 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 11:16:46.825 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 11:16:46.825 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : <==      Total: 2
2021-02-02 11:17:27.850 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 11:17:27.851 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 11:17:27.852 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 11:17:27.853 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 11:17:27.854 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 11:17:27.855 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : <==      Total: 2
2021-02-02 11:17:29.549 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 11:17:29.549 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 17(Long)
2021-02-02 11:17:29.550 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 11:17:33.860  WARN 35012 --- [http-nio-8080-exec-2] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 11:17:33.907 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectTypeByName      : ==>  Preparing: select id, name from t_type where name = ?
2021-02-02 11:17:33.907 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectTypeByName      : ==> Parameters: Java集合(String)
2021-02-02 11:17:33.910 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectTypeByName      : <==      Total: 1
2021-02-02 11:17:55.597 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeByName      : ==>  Preparing: select id, name from t_type where name = ?
2021-02-02 11:17:55.597 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeByName      : ==> Parameters: 张三(String)
2021-02-02 11:17:55.598 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeByName      : <==      Total: 0
2021-02-02 11:17:55.601 DEBUG 35012 --- [http-nio-8080-exec-5] c.personblog.dao.TypeMapper.insertType   : ==>  Preparing: insert into t_type(name) values (?);
2021-02-02 11:17:55.602 DEBUG 35012 --- [http-nio-8080-exec-5] c.personblog.dao.TypeMapper.insertType   : ==> Parameters: 张三(String)
2021-02-02 11:17:55.606 DEBUG 35012 --- [http-nio-8080-exec-5] c.personblog.dao.TypeMapper.insertType   : <==    Updates: 1
2021-02-02 11:17:55.618 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 11:17:55.618 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 11:17:55.619 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 11:17:55.620 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 11:17:55.620 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 11:17:55.622 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 11:18:00.126 DEBUG 35012 --- [http-nio-8080-exec-2] c.personblog.dao.TypeMapper.deleteType   : ==>  Preparing: delete from t_type where id = ?
2021-02-02 11:18:00.126 DEBUG 35012 --- [http-nio-8080-exec-2] c.personblog.dao.TypeMapper.deleteType   : ==> Parameters: 23(Long)
2021-02-02 11:18:00.127 DEBUG 35012 --- [http-nio-8080-exec-2] c.personblog.dao.TypeMapper.deleteType   : <==    Updates: 1
2021-02-02 11:18:00.141 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 11:18:00.141 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 11:18:00.142 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 11:18:00.142 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 11:18:00.142 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 11:18:00.143 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : <==      Total: 2
2021-02-02 11:18:05.457 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 11:18:05.458 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 17(Long)
2021-02-02 11:18:05.459 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 11:20:26.533 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 11:20:26.534 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 17(Long)
2021-02-02 11:20:26.536 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 11:20:28.588  WARN 35012 --- [http-nio-8080-exec-1] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 11:20:28.592 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeByName      : ==>  Preparing: select id, name from t_type where name = ?
2021-02-02 11:20:28.593 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeByName      : ==> Parameters: Java集合(String)
2021-02-02 11:20:28.594 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeByName      : <==      Total: 1
2021-02-02 11:22:12.121  WARN 35012 --- [http-nio-8080-exec-8] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 11:22:12.125 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectTypeByName      : ==>  Preparing: select id, name from t_type where name = ?
2021-02-02 11:22:12.125 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectTypeByName      : ==> Parameters: Java集合(String)
2021-02-02 11:22:12.127 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectTypeByName      : <==      Total: 1
2021-02-02 11:22:20.309 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTag_COUNT     : ==>  Preparing: SELECT count(0) FROM t_tag
2021-02-02 11:22:20.309 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTag_COUNT     : ==> Parameters: 
2021-02-02 11:22:20.310 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTag_COUNT     : <==      Total: 1
2021-02-02 11:22:20.311 DEBUG 35012 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: SELECT id, name FROM t_tag order by id desc LIMIT ?
2021-02-02 11:22:20.312 DEBUG 35012 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 5(Integer)
2021-02-02 11:22:20.312 DEBUG 35012 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 2
2021-02-02 11:22:22.119 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.N.selectAllNotice_COUNT            : ==>  Preparing: SELECT count(0) FROM t_notice
2021-02-02 11:22:22.119 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.N.selectAllNotice_COUNT            : ==> Parameters: 
2021-02-02 11:22:22.119 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.N.selectAllNotice_COUNT            : <==      Total: 1
2021-02-02 11:22:22.120 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: SELECT id, content FROM t_notice order by id desc LIMIT ?
2021-02-02 11:22:22.120 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 5(Integer)
2021-02-02 11:22:22.120 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 11:22:24.382 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectNoticeById    : ==>  Preparing: select id, content from t_notice where id = ?
2021-02-02 11:22:24.383 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectNoticeById    : ==> Parameters: 31(Long)
2021-02-02 11:22:24.383 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectNoticeById    : <==      Total: 1
2021-02-02 11:22:25.681  WARN 35012 --- [http-nio-8080-exec-9] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 11:22:25.691 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.d.N.selectNoticeByContent            : ==>  Preparing: select * from t_notice where content = ?
2021-02-02 11:22:25.692 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.d.N.selectNoticeByContent            : ==> Parameters: 音乐盒在左下角！！ 音乐盒在左下角！！ 音乐盒在左下角！！(String)
2021-02-02 11:22:25.694 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.d.N.selectNoticeByContent            : <==      Total: 1
2021-02-02 11:22:52.079 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectNoticeById    : ==>  Preparing: select id, content from t_notice where id = ?
2021-02-02 11:22:52.080 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectNoticeById    : ==> Parameters: 31(Long)
2021-02-02 11:22:52.081 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectNoticeById    : <==      Total: 1
2021-02-02 11:22:54.786  WARN 35012 --- [http-nio-8080-exec-1] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 11:22:54.788 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.d.N.selectNoticeByContent            : ==>  Preparing: select * from t_notice where content = ?
2021-02-02 11:22:54.789 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.d.N.selectNoticeByContent            : ==> Parameters: 音乐盒在左下角！！ 音乐盒在左下角！！ 音乐盒在左下角！！(String)
2021-02-02 11:22:54.790 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.d.N.selectNoticeByContent            : <==      Total: 1
2021-02-02 11:25:01.713 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectNoticeById    : ==>  Preparing: select id, content from t_notice where id = ?
2021-02-02 11:25:01.714 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectNoticeById    : ==> Parameters: 31(Long)
2021-02-02 11:25:01.715 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectNoticeById    : <==      Total: 1
2021-02-02 11:25:04.331 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 11:25:04.331 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 11:25:04.332 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 11:25:04.333 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 11:25:04.335 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 11:25:04.337 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : <==      Total: 2
2021-02-02 11:25:07.170 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 11:25:07.170 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 17(Long)
2021-02-02 11:25:07.172 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 11:25:08.688  WARN 35012 --- [http-nio-8080-exec-6] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 11:25:08.690 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeByName      : ==>  Preparing: select id, name from t_type where name = ?
2021-02-02 11:25:08.691 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeByName      : ==> Parameters: Java集合(String)
2021-02-02 11:25:08.691 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeByName      : <==      Total: 1
2021-02-02 11:25:14.728  WARN 35012 --- [http-nio-8080-exec-1] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 11:25:14.730 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeByName      : ==>  Preparing: select id, name from t_type where name = ?
2021-02-02 11:25:14.730 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeByName      : ==> Parameters: Java集合1(String)
2021-02-02 11:25:14.731 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeByName      : <==      Total: 0
2021-02-02 11:25:14.733 DEBUG 35012 --- [http-nio-8080-exec-1] c.personblog.dao.TypeMapper.updateType   : ==>  Preparing: update t_type set name = ? where id = ?
2021-02-02 11:25:14.734 DEBUG 35012 --- [http-nio-8080-exec-1] c.personblog.dao.TypeMapper.updateType   : ==> Parameters: Java集合1(String), 17(Long)
2021-02-02 11:25:14.736 DEBUG 35012 --- [http-nio-8080-exec-1] c.personblog.dao.TypeMapper.updateType   : <==    Updates: 1
2021-02-02 11:25:14.744 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 11:25:14.744 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 11:25:14.745 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 11:25:14.745 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 11:25:14.745 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 11:25:14.746 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : <==      Total: 2
2021-02-02 11:26:23.273 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 11:26:23.275 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 11:26:23.276 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 11:26:23.277 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 11:26:23.277 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 11:26:23.279 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : <==      Total: 2
2021-02-02 11:26:27.230 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 11:26:27.230 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 17(Long)
2021-02-02 11:26:27.231 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 11:26:29.521  WARN 35012 --- [http-nio-8080-exec-10] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 11:26:29.523 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectTypeByName      : ==>  Preparing: select id, name from t_type where name = ?
2021-02-02 11:26:29.524 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectTypeByName      : ==> Parameters: Java集合1(String)
2021-02-02 11:26:29.525 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectTypeByName      : <==      Total: 1
2021-02-02 11:26:57.379  WARN 35012 --- [http-nio-8080-exec-8] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 11:26:57.381 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectTypeByName      : ==>  Preparing: select id, name from t_type where name = ?
2021-02-02 11:26:57.381 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectTypeByName      : ==> Parameters: Java集合1(String)
2021-02-02 11:26:57.381 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectTypeByName      : <==      Total: 1
2021-02-02 11:28:42.935 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeByName      : ==>  Preparing: select id, name from t_type where name = ?
2021-02-02 11:28:42.936 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeByName      : ==> Parameters: 张三(String)
2021-02-02 11:28:42.936 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeByName      : <==      Total: 0
2021-02-02 11:28:42.938 DEBUG 35012 --- [http-nio-8080-exec-1] c.personblog.dao.TypeMapper.insertType   : ==>  Preparing: insert into t_type(name) values (?);
2021-02-02 11:28:42.939 DEBUG 35012 --- [http-nio-8080-exec-1] c.personblog.dao.TypeMapper.insertType   : ==> Parameters: 张三(String)
2021-02-02 11:28:42.942 DEBUG 35012 --- [http-nio-8080-exec-1] c.personblog.dao.TypeMapper.insertType   : <==    Updates: 1
2021-02-02 11:28:42.950 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 11:28:42.950 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 11:28:42.951 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 11:28:42.951 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 11:28:42.951 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 11:28:42.952 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 11:28:48.810 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectTypeByName      : ==>  Preparing: select id, name from t_type where name = ?
2021-02-02 11:28:48.811 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectTypeByName      : ==> Parameters: 张三(String)
2021-02-02 11:28:48.812 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectTypeByName      : <==      Total: 1
2021-02-02 11:30:10.398 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTag_COUNT     : ==>  Preparing: SELECT count(0) FROM t_tag
2021-02-02 11:30:10.399 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTag_COUNT     : ==> Parameters: 
2021-02-02 11:30:10.400 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTag_COUNT     : <==      Total: 1
2021-02-02 11:30:10.400 DEBUG 35012 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: SELECT id, name FROM t_tag order by id desc LIMIT ?
2021-02-02 11:30:10.400 DEBUG 35012 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 5(Integer)
2021-02-02 11:30:10.401 DEBUG 35012 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 2
2021-02-02 11:30:14.736 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.d.N.selectAllNotice_COUNT            : ==>  Preparing: SELECT count(0) FROM t_notice
2021-02-02 11:30:14.737 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.d.N.selectAllNotice_COUNT            : ==> Parameters: 
2021-02-02 11:30:14.737 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.d.N.selectAllNotice_COUNT            : <==      Total: 1
2021-02-02 11:30:14.739 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: SELECT id, content FROM t_notice order by id desc LIMIT ?
2021-02-02 11:30:14.740 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 5(Integer)
2021-02-02 11:30:14.741 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 11:30:20.345 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 11:30:20.346 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 11:30:20.347 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 11:30:20.349 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 11:30:20.350 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 11:30:20.354 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 4
2021-02-02 11:30:20.355 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 11:30:20.356 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 11:30:20.356 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 11:30:23.303 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 11:30:23.303 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 11:30:23.304 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 11:30:23.305 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 11:30:23.306 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 11:30:23.307 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 11:30:24.507 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTag_COUNT     : ==>  Preparing: SELECT count(0) FROM t_tag
2021-02-02 11:30:24.507 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTag_COUNT     : ==> Parameters: 
2021-02-02 11:30:24.508 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTag_COUNT     : <==      Total: 1
2021-02-02 11:30:24.508 DEBUG 35012 --- [http-nio-8080-exec-5] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: SELECT id, name FROM t_tag order by id desc LIMIT ?
2021-02-02 11:30:24.508 DEBUG 35012 --- [http-nio-8080-exec-5] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 5(Integer)
2021-02-02 11:30:24.509 DEBUG 35012 --- [http-nio-8080-exec-5] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 2
2021-02-02 11:30:25.477 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.d.N.selectAllNotice_COUNT            : ==>  Preparing: SELECT count(0) FROM t_notice
2021-02-02 11:30:25.478 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.d.N.selectAllNotice_COUNT            : ==> Parameters: 
2021-02-02 11:30:25.479 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.d.N.selectAllNotice_COUNT            : <==      Total: 1
2021-02-02 11:30:25.480 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: SELECT id, content FROM t_notice order by id desc LIMIT ?
2021-02-02 11:30:25.481 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 5(Integer)
2021-02-02 11:30:25.482 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 11:30:26.437 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 11:30:26.438 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 11:30:26.438 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 11:30:26.439 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 11:30:26.439 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 11:30:26.446 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 4
2021-02-02 11:30:26.448 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 11:30:26.448 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 11:30:26.449 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 11:30:41.178 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 11:30:41.179 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 21(Long)
2021-02-02 11:30:41.180 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 1
2021-02-02 11:30:41.181 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.CommentMapper.findIdsByBlogId    : ==>  Preparing: select id from t_comment where blog_id=?
2021-02-02 11:30:41.182 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.CommentMapper.findIdsByBlogId    : ==> Parameters: 21(Long)
2021-02-02 11:30:41.184 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.CommentMapper.findIdsByBlogId    : <==      Total: 4
2021-02-02 11:30:41.185 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.CommentMapper.deleteComment      : ==>  Preparing: delete from t_comment where id = ?
2021-02-02 11:30:41.185 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.CommentMapper.deleteComment      : ==> Parameters: 14(Long)
2021-02-02 11:30:41.187 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.CommentMapper.deleteComment      : <==    Updates: 1
2021-02-02 11:30:41.188 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.CommentMapper.deleteComment      : ==>  Preparing: delete from t_comment where id = ?
2021-02-02 11:30:41.188 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.CommentMapper.deleteComment      : ==> Parameters: 15(Long)
2021-02-02 11:30:41.189 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.CommentMapper.deleteComment      : <==    Updates: 1
2021-02-02 11:30:41.189 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.CommentMapper.deleteComment      : ==>  Preparing: delete from t_comment where id = ?
2021-02-02 11:30:41.191 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.CommentMapper.deleteComment      : ==> Parameters: 16(Long)
2021-02-02 11:30:41.194 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.CommentMapper.deleteComment      : <==    Updates: 1
2021-02-02 11:30:41.195 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.CommentMapper.deleteComment      : ==>  Preparing: delete from t_comment where id = ?
2021-02-02 11:30:41.195 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.CommentMapper.deleteComment      : ==> Parameters: 17(Long)
2021-02-02 11:30:41.196 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.CommentMapper.deleteComment      : <==    Updates: 1
2021-02-02 11:30:41.196 DEBUG 35012 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.deleteBlog   : ==>  Preparing: delete from t_blog where id = ?
2021-02-02 11:30:41.196 DEBUG 35012 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.deleteBlog   : ==> Parameters: 21(Long)
2021-02-02 11:30:41.198 DEBUG 35012 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.deleteBlog   : <==    Updates: 1
2021-02-02 11:30:41.209 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 11:30:41.210 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 11:30:41.211 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 11:30:41.212 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 11:30:41.212 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 11:30:41.214 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 3
2021-02-02 11:30:41.215 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 11:30:41.215 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 11:30:41.216 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 11:30:43.337 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 11:30:43.337 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 23(Long)
2021-02-02 11:30:43.339 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 1
2021-02-02 11:30:43.339 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.CommentMapper.findIdsByBlogId    : ==>  Preparing: select id from t_comment where blog_id=?
2021-02-02 11:30:43.339 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.CommentMapper.findIdsByBlogId    : ==> Parameters: 23(Long)
2021-02-02 11:30:43.340 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.CommentMapper.findIdsByBlogId    : <==      Total: 0
2021-02-02 11:30:43.341 DEBUG 35012 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.deleteBlog   : ==>  Preparing: delete from t_blog where id = ?
2021-02-02 11:30:43.342 DEBUG 35012 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.deleteBlog   : ==> Parameters: 23(Long)
2021-02-02 11:30:43.344 DEBUG 35012 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.deleteBlog   : <==    Updates: 1
2021-02-02 11:30:43.350 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 11:30:43.350 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 11:30:43.350 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 11:30:43.351 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 11:30:43.351 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 11:30:43.353 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 2
2021-02-02 11:30:43.354 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 11:30:43.354 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 11:30:43.355 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 11:30:45.017 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 11:30:45.018 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 22(Long)
2021-02-02 11:30:45.019 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 1
2021-02-02 11:30:45.019 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.CommentMapper.findIdsByBlogId    : ==>  Preparing: select id from t_comment where blog_id=?
2021-02-02 11:30:45.020 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.CommentMapper.findIdsByBlogId    : ==> Parameters: 22(Long)
2021-02-02 11:30:45.021 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.CommentMapper.findIdsByBlogId    : <==      Total: 0
2021-02-02 11:30:45.022 DEBUG 35012 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.deleteBlog   : ==>  Preparing: delete from t_blog where id = ?
2021-02-02 11:30:45.023 DEBUG 35012 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.deleteBlog   : ==> Parameters: 22(Long)
2021-02-02 11:30:45.025 DEBUG 35012 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.deleteBlog   : <==    Updates: 1
2021-02-02 11:30:45.039 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 11:30:45.039 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 11:30:45.042 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 11:30:45.046 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 11:30:45.046 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 11:30:45.048 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 11:30:45.049 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 11:30:45.050 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 11:30:45.050 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 11:30:46.856 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 11:30:46.857 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 20(Long)
2021-02-02 11:30:46.858 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 1
2021-02-02 11:30:46.859 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.CommentMapper.findIdsByBlogId    : ==>  Preparing: select id from t_comment where blog_id=?
2021-02-02 11:30:46.859 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.CommentMapper.findIdsByBlogId    : ==> Parameters: 20(Long)
2021-02-02 11:30:46.860 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.CommentMapper.findIdsByBlogId    : <==      Total: 7
2021-02-02 11:30:46.861 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.CommentMapper.deleteComment      : ==>  Preparing: delete from t_comment where id = ?
2021-02-02 11:30:46.861 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.CommentMapper.deleteComment      : ==> Parameters: 1(Long)
2021-02-02 11:30:46.862 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.CommentMapper.deleteComment      : <==    Updates: 1
2021-02-02 11:30:46.862 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.CommentMapper.deleteComment      : ==>  Preparing: delete from t_comment where id = ?
2021-02-02 11:30:46.862 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.CommentMapper.deleteComment      : ==> Parameters: 2(Long)
2021-02-02 11:30:46.863 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.CommentMapper.deleteComment      : <==    Updates: 1
2021-02-02 11:30:46.863 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.CommentMapper.deleteComment      : ==>  Preparing: delete from t_comment where id = ?
2021-02-02 11:30:46.863 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.CommentMapper.deleteComment      : ==> Parameters: 3(Long)
2021-02-02 11:30:46.866 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.CommentMapper.deleteComment      : <==    Updates: 1
2021-02-02 11:30:46.867 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.CommentMapper.deleteComment      : ==>  Preparing: delete from t_comment where id = ?
2021-02-02 11:30:46.867 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.CommentMapper.deleteComment      : ==> Parameters: 4(Long)
2021-02-02 11:30:46.868 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.CommentMapper.deleteComment      : <==    Updates: 1
2021-02-02 11:30:46.869 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.CommentMapper.deleteComment      : ==>  Preparing: delete from t_comment where id = ?
2021-02-02 11:30:46.869 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.CommentMapper.deleteComment      : ==> Parameters: 5(Long)
2021-02-02 11:30:46.870 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.CommentMapper.deleteComment      : <==    Updates: 1
2021-02-02 11:30:46.870 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.CommentMapper.deleteComment      : ==>  Preparing: delete from t_comment where id = ?
2021-02-02 11:30:46.870 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.CommentMapper.deleteComment      : ==> Parameters: 7(Long)
2021-02-02 11:30:46.871 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.CommentMapper.deleteComment      : <==    Updates: 1
2021-02-02 11:30:46.872 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.CommentMapper.deleteComment      : ==>  Preparing: delete from t_comment where id = ?
2021-02-02 11:30:46.872 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.CommentMapper.deleteComment      : ==> Parameters: 8(Long)
2021-02-02 11:30:46.873 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.CommentMapper.deleteComment      : <==    Updates: 1
2021-02-02 11:30:46.874 DEBUG 35012 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.deleteBlog   : ==>  Preparing: delete from t_blog where id = ?
2021-02-02 11:30:46.875 DEBUG 35012 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.deleteBlog   : ==> Parameters: 20(Long)
2021-02-02 11:30:46.877 DEBUG 35012 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.deleteBlog   : <==    Updates: 1
2021-02-02 11:30:46.885 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 11:30:46.885 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 11:30:46.885 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 11:30:46.886 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 11:30:46.887 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 11:30:46.887 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 11:30:49.386 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 11:30:49.386 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 11:30:49.387 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 11:30:49.387 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 11:30:49.388 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 11:30:49.388 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : <==      Total: 3
2021-02-02 11:30:51.745 DEBUG 35012 --- [http-nio-8080-exec-2] c.personblog.dao.TypeMapper.deleteType   : ==>  Preparing: delete from t_type where id = ?
2021-02-02 11:30:51.745 DEBUG 35012 --- [http-nio-8080-exec-2] c.personblog.dao.TypeMapper.deleteType   : ==> Parameters: 24(Long)
2021-02-02 11:30:51.746 DEBUG 35012 --- [http-nio-8080-exec-2] c.personblog.dao.TypeMapper.deleteType   : <==    Updates: 1
2021-02-02 11:30:51.754 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 11:30:51.754 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 11:30:51.755 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 11:30:51.757 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 11:30:51.757 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 11:30:51.758 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : <==      Total: 2
2021-02-02 11:30:53.508 DEBUG 35012 --- [http-nio-8080-exec-5] c.personblog.dao.TypeMapper.deleteType   : ==>  Preparing: delete from t_type where id = ?
2021-02-02 11:30:53.509 DEBUG 35012 --- [http-nio-8080-exec-5] c.personblog.dao.TypeMapper.deleteType   : ==> Parameters: 17(Long)
2021-02-02 11:30:53.510 DEBUG 35012 --- [http-nio-8080-exec-5] c.personblog.dao.TypeMapper.deleteType   : <==    Updates: 1
2021-02-02 11:30:53.519 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 11:30:53.519 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 11:30:53.520 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 11:30:53.520 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 11:30:53.521 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 11:30:53.522 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 11:30:55.142 DEBUG 35012 --- [http-nio-8080-exec-7] c.personblog.dao.TypeMapper.deleteType   : ==>  Preparing: delete from t_type where id = ?
2021-02-02 11:30:55.143 DEBUG 35012 --- [http-nio-8080-exec-7] c.personblog.dao.TypeMapper.deleteType   : ==> Parameters: 16(Long)
2021-02-02 11:30:55.144 DEBUG 35012 --- [http-nio-8080-exec-7] c.personblog.dao.TypeMapper.deleteType   : <==    Updates: 1
2021-02-02 11:30:55.154 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 11:30:55.154 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 11:30:55.155 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 11:30:57.391 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTag_COUNT     : ==>  Preparing: SELECT count(0) FROM t_tag
2021-02-02 11:30:57.391 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTag_COUNT     : ==> Parameters: 
2021-02-02 11:30:57.392 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTag_COUNT     : <==      Total: 1
2021-02-02 11:30:57.393 DEBUG 35012 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: SELECT id, name FROM t_tag order by id desc LIMIT ?
2021-02-02 11:30:57.393 DEBUG 35012 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 5(Integer)
2021-02-02 11:30:57.394 DEBUG 35012 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 2
2021-02-02 11:30:59.880 DEBUG 35012 --- [http-nio-8080-exec-5] com.personblog.dao.TagMapper.deleteTag   : ==>  Preparing: delete from t_tag where id = ?
2021-02-02 11:30:59.880 DEBUG 35012 --- [http-nio-8080-exec-5] com.personblog.dao.TagMapper.deleteTag   : ==> Parameters: 9(Long)
2021-02-02 11:30:59.881 DEBUG 35012 --- [http-nio-8080-exec-5] com.personblog.dao.TagMapper.deleteTag   : <==    Updates: 1
2021-02-02 11:30:59.888 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTag_COUNT     : ==>  Preparing: SELECT count(0) FROM t_tag
2021-02-02 11:30:59.889 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTag_COUNT     : ==> Parameters: 
2021-02-02 11:30:59.890 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTag_COUNT     : <==      Total: 1
2021-02-02 11:30:59.891 DEBUG 35012 --- [http-nio-8080-exec-8] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: SELECT id, name FROM t_tag order by id desc LIMIT ?
2021-02-02 11:30:59.892 DEBUG 35012 --- [http-nio-8080-exec-8] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 5(Integer)
2021-02-02 11:30:59.893 DEBUG 35012 --- [http-nio-8080-exec-8] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 1
2021-02-02 11:31:01.824 DEBUG 35012 --- [http-nio-8080-exec-2] com.personblog.dao.TagMapper.deleteTag   : ==>  Preparing: delete from t_tag where id = ?
2021-02-02 11:31:01.824 DEBUG 35012 --- [http-nio-8080-exec-2] com.personblog.dao.TagMapper.deleteTag   : ==> Parameters: 8(Long)
2021-02-02 11:31:01.826 DEBUG 35012 --- [http-nio-8080-exec-2] com.personblog.dao.TagMapper.deleteTag   : <==    Updates: 1
2021-02-02 11:31:01.833 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTag_COUNT     : ==>  Preparing: SELECT count(0) FROM t_tag
2021-02-02 11:31:01.834 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTag_COUNT     : ==> Parameters: 
2021-02-02 11:31:01.834 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTag_COUNT     : <==      Total: 1
2021-02-02 11:31:03.611 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.d.N.selectAllNotice_COUNT            : ==>  Preparing: SELECT count(0) FROM t_notice
2021-02-02 11:31:03.611 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.d.N.selectAllNotice_COUNT            : ==> Parameters: 
2021-02-02 11:31:03.612 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.d.N.selectAllNotice_COUNT            : <==      Total: 1
2021-02-02 11:31:03.613 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: SELECT id, content FROM t_notice order by id desc LIMIT ?
2021-02-02 11:31:03.613 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 5(Integer)
2021-02-02 11:31:03.614 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 11:31:06.299 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTag_COUNT     : ==>  Preparing: SELECT count(0) FROM t_tag
2021-02-02 11:31:06.299 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTag_COUNT     : ==> Parameters: 
2021-02-02 11:31:06.300 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTag_COUNT     : <==      Total: 1
2021-02-02 11:31:07.852 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 11:31:07.852 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 11:31:07.853 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 11:31:09.675 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 11:31:09.675 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 11:31:09.676 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 11:31:09.678 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 11:31:09.678 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 11:31:09.678 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : <==      Total: 0
2021-02-02 11:31:12.645 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 11:31:12.645 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 11:31:12.646 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 11:31:17.924 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTag_COUNT     : ==>  Preparing: SELECT count(0) FROM t_tag
2021-02-02 11:31:17.924 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTag_COUNT     : ==> Parameters: 
2021-02-02 11:31:17.925 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTag_COUNT     : <==      Total: 1
2021-02-02 11:31:19.320 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.d.N.selectAllNotice_COUNT            : ==>  Preparing: SELECT count(0) FROM t_notice
2021-02-02 11:31:19.321 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.d.N.selectAllNotice_COUNT            : ==> Parameters: 
2021-02-02 11:31:19.322 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.d.N.selectAllNotice_COUNT            : <==      Total: 1
2021-02-02 11:31:19.324 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: SELECT id, content FROM t_notice order by id desc LIMIT ?
2021-02-02 11:31:19.325 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 5(Integer)
2021-02-02 11:31:19.326 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 11:31:22.679 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTag_COUNT     : ==>  Preparing: SELECT count(0) FROM t_tag
2021-02-02 11:31:22.680 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTag_COUNT     : ==> Parameters: 
2021-02-02 11:31:22.681 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTag_COUNT     : <==      Total: 1
2021-02-02 11:31:23.814 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 11:31:23.815 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 11:31:23.815 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 11:31:25.014 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 11:31:25.014 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 11:31:25.015 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 11:31:25.016 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 11:31:25.017 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 11:31:25.017 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : <==      Total: 0
2021-02-02 11:31:46.094  INFO 35012 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 11:31:46.096 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 11:31:46.096 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 11:31:46.097 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 11:31:46.098 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 11:31:46.099 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 11:31:46.102 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 11:31:46.103 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 11:31:46.104 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 11:31:46.105 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 0
2021-02-02 11:31:46.106 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 11:31:46.107 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 11:31:46.107 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 0
2021-02-02 11:31:46.108 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 11:31:46.108 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 11:31:46.108 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 11:31:46.108  INFO 35012 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 11:31:54.628  INFO 35012 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/types/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TypeShowController.typeShow', args=[{}, -1, 1]}
2021-02-02 11:31:54.635 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 11:31:54.635 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 11:31:54.636 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 0
2021-02-02 11:31:54.642 ERROR 35012 --- [http-nio-8080-exec-8] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/types/-1, Exception : {}

java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657)
	at java.util.ArrayList.get(ArrayList.java:433)
	at com.personblog.controller.TypeShowController.typeShow(TypeShowController.java:32)
	at com.personblog.controller.TypeShowController$$FastClassBySpringCGLIB$$9fdf3e9b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.personblog.controller.TypeShowController$$EnhancerBySpringCGLIB$$a12dd09d.typeShow(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-02-02 11:31:54.643  WARN 35012 --- [http-nio-8080-exec-8] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.IndexOutOfBoundsException: Index: 0, Size: 0]
2021-02-02 11:31:59.542  INFO 35012 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/tags/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TagShowController.tag', args=[1, -1, {}]}
2021-02-02 11:31:59.545 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 11:31:59.545 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 11:31:59.545 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 0
2021-02-02 11:31:59.549 ERROR 35012 --- [http-nio-8080-exec-1] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/tags/-1, Exception : {}

java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657)
	at java.util.ArrayList.get(ArrayList.java:433)
	at com.personblog.controller.TagShowController.tag(TagShowController.java:33)
	at com.personblog.controller.TagShowController$$FastClassBySpringCGLIB$$c027c16b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.personblog.controller.TagShowController$$EnhancerBySpringCGLIB$$58c79b0d.tag(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-02-02 11:31:59.551  WARN 35012 --- [http-nio-8080-exec-1] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.IndexOutOfBoundsException: Index: 0, Size: 0]
2021-02-02 11:32:01.154  INFO 35012 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/message', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.message', args=[]}
2021-02-02 11:32:01.157  INFO 35012 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : message
2021-02-02 11:32:01.511  INFO 35012 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/messagecomment', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.messages', args=[{}]}
2021-02-02 11:32:01.512 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.MessageMapper.findByParentIdNull   : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 11:32:01.512 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.MessageMapper.findByParentIdNull   : ==> Parameters: -1(Long)
2021-02-02 11:32:01.516 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.MessageMapper.findByParentIdNull   : <==      Total: 6
2021-02-02 11:32:01.517 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 11:32:01.518 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 118(Long)
2021-02-02 11:32:01.519 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.M.findByParentIdNotNull            : <==      Total: 0
2021-02-02 11:32:01.519 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 11:32:01.519 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 117(Long)
2021-02-02 11:32:01.519 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.M.findByParentIdNotNull            : <==      Total: 0
2021-02-02 11:32:01.520 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 11:32:01.520 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 116(Long)
2021-02-02 11:32:01.520 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.M.findByParentIdNotNull            : <==      Total: 0
2021-02-02 11:32:01.520 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 11:32:01.521 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 115(Long)
2021-02-02 11:32:01.521 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.M.findByParentIdNotNull            : <==      Total: 0
2021-02-02 11:32:01.521 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 11:32:01.521 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 114(Long)
2021-02-02 11:32:01.522 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.M.findByParentIdNotNull            : <==      Total: 0
2021-02-02 11:32:01.522 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 11:32:01.522 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 112(Long)
2021-02-02 11:32:01.523 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.M.findByParentIdNotNull            : <==      Total: 1
2021-02-02 11:32:01.523 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.MessageMapper.findByReplayId     : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 11:32:01.523 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.MessageMapper.findByReplayId     : ==> Parameters: 113(Long)
2021-02-02 11:32:01.524 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.MessageMapper.findByReplayId     : <==      Total: 0
2021-02-02 11:32:01.524  INFO 35012 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : message::messageList
2021-02-02 11:32:04.471  INFO 35012 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/archives', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.ArchiveShowController.archive', args=[{count=Count(id=null, count=null, createTime=null), org.springframework.validation.BindingResult.count=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, Count(id=null, count=null, createTime=null)]}
2021-02-02 11:32:04.476 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.findGroupYear         : ==>  Preparing: select date_format(b.create_time,'%Y') year from t_blog b group by year order by year desc
2021-02-02 11:32:04.476 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.findGroupYear         : ==> Parameters: 
2021-02-02 11:32:04.481 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.findGroupYear         : <==      Total: 0
2021-02-02 11:32:04.484 DEBUG 35012 --- [http-nio-8080-exec-9] com.personblog.dao.BlogMapper.count      : ==>  Preparing: select count(*) from t_blog
2021-02-02 11:32:04.484 DEBUG 35012 --- [http-nio-8080-exec-9] com.personblog.dao.BlogMapper.count      : ==> Parameters: 
2021-02-02 11:32:04.485 DEBUG 35012 --- [http-nio-8080-exec-9] com.personblog.dao.BlogMapper.count      : <==      Total: 1
2021-02-02 11:32:04.487 DEBUG 35012 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.deleteCount  : ==>  Preparing: delete from t_count
2021-02-02 11:32:04.487 DEBUG 35012 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.deleteCount  : ==> Parameters: 
2021-02-02 11:32:04.489 DEBUG 35012 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.deleteCount  : <==    Updates: 3
2021-02-02 11:32:04.490 DEBUG 35012 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.insertCount  : ==>  Preparing: insert into t_count(count,create_time) (select count(*) count, create_time from t_blog GROUP BY year(create_time),month(create_time) order by create_time desc)
2021-02-02 11:32:04.490 DEBUG 35012 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.insertCount  : ==> Parameters: 
2021-02-02 11:32:04.492 DEBUG 35012 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.insertCount  : <==    Updates: 0
2021-02-02 11:32:04.492 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.findGroupYear2        : ==>  Preparing: select date_format(t_count.create_time,'%Y年%m月') year1 from t_count GROUP BY year1 order by year1 desc
2021-02-02 11:32:04.492 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.findGroupYear2        : ==> Parameters: 
2021-02-02 11:32:04.493 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.findGroupYear2        : <==      Total: 0
2021-02-02 11:32:04.493  INFO 35012 --- [http-nio-8080-exec-9] c.p.service.impl.BlogServiceImpl         : {}
2021-02-02 11:32:04.494  INFO 35012 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : archives
2021-02-02 11:32:06.847  INFO 35012 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/about', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.AboutShowController.about', args=[]}
2021-02-02 11:32:06.851  INFO 35012 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : about
2021-02-02 11:32:10.661  INFO 35012 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 11:32:10.665 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 11:32:10.665 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 11:32:10.669 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 11:32:10.670 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 11:32:10.670 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 11:32:10.671 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 11:32:10.671 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 11:32:10.672 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 11:32:10.673 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 0
2021-02-02 11:32:10.674 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 11:32:10.674 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 11:32:10.674 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 0
2021-02-02 11:32:10.675 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 11:32:10.675 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 11:32:10.676 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 11:32:10.676  INFO 35012 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 11:32:26.763 DEBUG 35012 --- [http-nio-8080-exec-7] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 11:32:26.763 DEBUG 35012 --- [http-nio-8080-exec-7] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 11:32:26.764 DEBUG 35012 --- [http-nio-8080-exec-7] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 0
2021-02-02 11:32:26.766 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 11:32:26.766 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 11:32:26.767 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : <==      Total: 0
2021-02-02 11:34:36.870 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 11:34:36.870 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 11:34:36.871 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 11:34:51.151 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectTypeByName      : ==>  Preparing: select id, name from t_type where name = ?
2021-02-02 11:34:51.152 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectTypeByName      : ==> Parameters: 项目部署(String)
2021-02-02 11:34:51.152 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectTypeByName      : <==      Total: 0
2021-02-02 11:34:51.153 DEBUG 35012 --- [http-nio-8080-exec-2] c.personblog.dao.TypeMapper.insertType   : ==>  Preparing: insert into t_type(name) values (?);
2021-02-02 11:34:51.154 DEBUG 35012 --- [http-nio-8080-exec-2] c.personblog.dao.TypeMapper.insertType   : ==> Parameters: 项目部署(String)
2021-02-02 11:34:51.155 DEBUG 35012 --- [http-nio-8080-exec-2] c.personblog.dao.TypeMapper.insertType   : <==    Updates: 1
2021-02-02 11:34:51.163 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 11:34:51.164 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 11:34:51.164 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 11:34:51.165 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 11:34:51.165 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 11:34:51.165 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 11:35:02.881 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTag_COUNT     : ==>  Preparing: SELECT count(0) FROM t_tag
2021-02-02 11:35:02.881 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTag_COUNT     : ==> Parameters: 
2021-02-02 11:35:02.883 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTag_COUNT     : <==      Total: 1
2021-02-02 11:35:12.710 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectTagByName        : ==>  Preparing: select id, name from t_tag where name = ?
2021-02-02 11:35:12.711 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectTagByName        : ==> Parameters: nginx(String)
2021-02-02 11:35:12.711 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectTagByName        : <==      Total: 0
2021-02-02 11:35:12.713 DEBUG 35012 --- [http-nio-8080-exec-6] com.personblog.dao.TagMapper.insertTag   : ==>  Preparing: insert into t_tag(name) values (?)
2021-02-02 11:35:12.713 DEBUG 35012 --- [http-nio-8080-exec-6] com.personblog.dao.TagMapper.insertTag   : ==> Parameters: nginx(String)
2021-02-02 11:35:12.714 DEBUG 35012 --- [http-nio-8080-exec-6] com.personblog.dao.TagMapper.insertTag   : <==    Updates: 1
2021-02-02 11:35:12.720 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectAllTag_COUNT     : ==>  Preparing: SELECT count(0) FROM t_tag
2021-02-02 11:35:12.720 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectAllTag_COUNT     : ==> Parameters: 
2021-02-02 11:35:12.721 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectAllTag_COUNT     : <==      Total: 1
2021-02-02 11:35:12.721 DEBUG 35012 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: SELECT id, name FROM t_tag order by id desc LIMIT ?
2021-02-02 11:35:12.721 DEBUG 35012 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 5(Integer)
2021-02-02 11:35:12.722 DEBUG 35012 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 1
2021-02-02 11:35:19.231 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectTagByName        : ==>  Preparing: select id, name from t_tag where name = ?
2021-02-02 11:35:19.231 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectTagByName        : ==> Parameters: linux(String)
2021-02-02 11:35:19.232 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectTagByName        : <==      Total: 0
2021-02-02 11:35:19.233 DEBUG 35012 --- [http-nio-8080-exec-4] com.personblog.dao.TagMapper.insertTag   : ==>  Preparing: insert into t_tag(name) values (?)
2021-02-02 11:35:19.233 DEBUG 35012 --- [http-nio-8080-exec-4] com.personblog.dao.TagMapper.insertTag   : ==> Parameters: linux(String)
2021-02-02 11:35:19.234 DEBUG 35012 --- [http-nio-8080-exec-4] com.personblog.dao.TagMapper.insertTag   : <==    Updates: 1
2021-02-02 11:35:19.244 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectAllTag_COUNT     : ==>  Preparing: SELECT count(0) FROM t_tag
2021-02-02 11:35:19.244 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectAllTag_COUNT     : ==> Parameters: 
2021-02-02 11:35:19.245 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectAllTag_COUNT     : <==      Total: 1
2021-02-02 11:35:19.245 DEBUG 35012 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: SELECT id, name FROM t_tag order by id desc LIMIT ?
2021-02-02 11:35:19.245 DEBUG 35012 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 5(Integer)
2021-02-02 11:35:19.246 DEBUG 35012 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 2
2021-02-02 11:35:37.965 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagByName        : ==>  Preparing: select id, name from t_tag where name = ?
2021-02-02 11:35:37.966 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagByName        : ==> Parameters: 服务器(String)
2021-02-02 11:35:37.967 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagByName        : <==      Total: 0
2021-02-02 11:35:37.968 DEBUG 35012 --- [http-nio-8080-exec-5] com.personblog.dao.TagMapper.insertTag   : ==>  Preparing: insert into t_tag(name) values (?)
2021-02-02 11:35:37.969 DEBUG 35012 --- [http-nio-8080-exec-5] com.personblog.dao.TagMapper.insertTag   : ==> Parameters: 服务器(String)
2021-02-02 11:35:37.973 DEBUG 35012 --- [http-nio-8080-exec-5] com.personblog.dao.TagMapper.insertTag   : <==    Updates: 1
2021-02-02 11:35:37.981 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTag_COUNT     : ==>  Preparing: SELECT count(0) FROM t_tag
2021-02-02 11:35:37.981 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTag_COUNT     : ==> Parameters: 
2021-02-02 11:35:37.981 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTag_COUNT     : <==      Total: 1
2021-02-02 11:35:37.982 DEBUG 35012 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: SELECT id, name FROM t_tag order by id desc LIMIT ?
2021-02-02 11:35:37.982 DEBUG 35012 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 5(Integer)
2021-02-02 11:35:37.982 DEBUG 35012 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 11:35:42.353 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 11:35:42.354 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 11:35:42.355 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 11:35:42.356 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 11:35:42.356 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 11:35:42.358 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 11:35:43.766 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 11:35:43.766 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 11:35:43.774 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 11:35:43.776 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 11:35:43.776 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 11:35:43.777 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 11:35:47.858 DEBUG 35012 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 11:35:47.858 DEBUG 35012 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 11:35:47.859 DEBUG 35012 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 11:35:47.861 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 11:35:47.861 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 11:35:47.862 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 11:37:42.726 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 11:37:42.727 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 11:37:42.730 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 11:37:42.732 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 11:37:42.732 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 11:37:42.733 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 11:37:42.734 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 11:37:42.734 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 17(Long)
2021-02-02 11:37:42.735 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 11:37:42.735 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 11:37:42.735 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 18(Long)
2021-02-02 11:37:42.736 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 11:37:42.739 DEBUG 35012 --- [http-nio-8080-exec-9] com.personblog.dao.BlogMapper.saveBlog   : ==>  Preparing: insert into t_blog (title, content, first_picture, flag, views, comment_count, appreciation, share_statement, commentabled, published, recommend, create_time, update_time, type_id, user_id, description, tag_ids) values (?,?,?,?,?,?,?, ?,?,?,?,?, ?,?,?,?,?)
2021-02-02 11:37:42.741 DEBUG 35012 --- [http-nio-8080-exec-9] com.personblog.dao.BlogMapper.saveBlog   : ==> Parameters: 记录一次线上部署个人项目的流程以及遇到的坑(String), # 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), (String), 0(Integer), 0(Integer), false(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-02-02 11:37:42.738(Timestamp), 2021-02-02 11:37:42.738(Timestamp), 25(Long), 0(Long), 主要记录了部署个人项目的流程和过程中遇到的坑(String), 16,17,18(String)
2021-02-02 11:37:42.748 DEBUG 35012 --- [http-nio-8080-exec-9] com.personblog.dao.BlogMapper.saveBlog   : <==    Updates: 1
2021-02-02 11:37:42.749 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlog!selectKey    : ==>  Preparing: SELECT LAST_INSERT_ID()
2021-02-02 11:37:42.749 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlog!selectKey    : ==> Parameters: 
2021-02-02 11:37:42.750 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlog!selectKey    : <==      Total: 1
2021-02-02 11:37:42.751 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 11:37:42.751 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 28(Long)
2021-02-02 11:37:42.752 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 11:37:42.752 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 11:37:42.752 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 17(Long), 28(Long)
2021-02-02 11:37:42.752 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 11:37:42.753 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 11:37:42.754 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 18(Long), 28(Long)
2021-02-02 11:37:42.755 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 11:37:42.763 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 11:37:42.763 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 11:37:42.763 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 11:37:42.764 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 11:37:42.764 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 11:37:42.764 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 11:37:42.765 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 11:37:42.765 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 11:37:42.766 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 11:37:51.278  INFO 35012 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 11:37:51.279 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 11:37:51.279 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 11:37:51.280 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 11:37:51.280 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 11:37:51.280 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 11:37:51.295 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 11:37:51.296 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 11:37:51.297 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 11:37:51.297 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 11:37:51.298 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 11:37:51.298 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 11:37:51.299 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 11:37:51.300 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 11:37:51.300 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 11:37:51.301 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 11:37:51.303 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 11:37:51.303 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 11:37:51.312 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 11:37:51.313  INFO 35012 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 11:38:28.760  INFO 35012 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[28, {}]}
2021-02-02 11:38:28.762 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 11:38:28.763 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 28(Long)
2021-02-02 11:38:28.767 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 11:38:28.842 DEBUG 35012 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 11:38:28.842 DEBUG 35012 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 28(Long)
2021-02-02 11:38:28.843 DEBUG 35012 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 11:38:28.843 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 11:38:28.844 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 28(Long), 28(Long), 28(Long)
2021-02-02 11:38:28.855 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 11:38:28.859 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:38:28.859 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 11:38:28.860 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 11:38:28.860  INFO 35012 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 11:38:29.685  INFO 35012 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[28, {}]}
2021-02-02 11:38:29.688 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:38:29.688 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 11:38:29.689 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 11:38:29.689  INFO 35012 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 11:38:40.933 DEBUG 35012 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 11:38:40.933 DEBUG 35012 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 28(Long)
2021-02-02 11:38:40.935 DEBUG 35012 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 11:38:40.936 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 11:38:40.936 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 11:38:40.937 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 11:38:40.938 DEBUG 35012 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 11:38:40.939 DEBUG 35012 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 11:38:40.939 DEBUG 35012 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 11:38:45.943  WARN 35012 --- [http-nio-8080-exec-5] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 11:38:45.946 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 11:38:45.947 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 11:38:45.948 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 11:38:45.949 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 11:38:45.950 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 11:38:45.950 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 11:38:45.951 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 11:38:45.951 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 17(Long)
2021-02-02 11:38:45.952 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 11:38:45.952 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 11:38:45.952 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 18(Long)
2021-02-02 11:38:45.953 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 11:38:45.954 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 11:38:45.954 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 28(Long)
2021-02-02 11:38:45.955 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 3
2021-02-02 11:38:45.956 DEBUG 35012 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateBlog   : ==>  Preparing: update t_blog set published = ?,flag = ? , title = ?, content = ?, type_id = ?, tag_ids = ?, first_picture = ? , description = ? , recommend = ? , share_statement = ?, appreciation = ?, commentabled = ? ,update_time = ? where id = ?
2021-02-02 11:38:45.958 DEBUG 35012 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateBlog   : ==> Parameters: true(Boolean), 原创(String), 记录一次线上部署个人项目的流程以及遇到的坑(String), # 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,(String), 25(Long), 16,17,18(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), 主要记录了部署个人项目的流程和过程中遇到的坑(String), true(Boolean), true(Boolean), false(Boolean), true(Boolean), 2021-02-02 11:38:45.954(Timestamp), 28(Long)
2021-02-02 11:38:45.967 DEBUG 35012 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateBlog   : <==    Updates: 1
2021-02-02 11:38:45.967 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 11:38:45.967 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 28(Long)
2021-02-02 11:38:45.968 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 11:38:45.968 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 11:38:45.968 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 17(Long), 28(Long)
2021-02-02 11:38:45.969 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 11:38:45.969 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 11:38:45.969 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 18(Long), 28(Long)
2021-02-02 11:38:45.970 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 11:38:45.986 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 11:38:45.986 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 11:38:45.987 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 11:38:45.987 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 11:38:45.987 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 11:38:45.988 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 11:38:45.989 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 11:38:45.989 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 11:38:45.989 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 11:38:50.123  INFO 35012 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[28, {}]}
2021-02-02 11:38:50.124 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 11:38:50.124 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 28(Long)
2021-02-02 11:38:50.129 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 11:38:50.140 DEBUG 35012 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 11:38:50.140 DEBUG 35012 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 28(Long)
2021-02-02 11:38:50.141 DEBUG 35012 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 11:38:50.141 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 11:38:50.142 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 28(Long), 28(Long), 28(Long)
2021-02-02 11:38:50.142 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 11:38:50.144 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:38:50.145 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 11:38:50.146 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 11:38:50.147  INFO 35012 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 11:38:50.775  INFO 35012 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[28, {}]}
2021-02-02 11:38:50.776 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:38:50.776 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 11:38:50.777 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 11:38:50.777  INFO 35012 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 11:39:37.177 DEBUG 35012 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 11:39:37.177 DEBUG 35012 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 28(Long)
2021-02-02 11:39:37.180 DEBUG 35012 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 11:39:37.181 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 11:39:37.181 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 11:39:37.182 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 11:39:37.183 DEBUG 35012 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 11:39:37.183 DEBUG 35012 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 11:39:37.184 DEBUG 35012 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 11:40:16.915  WARN 35012 --- [http-nio-8080-exec-2] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 11:40:16.916 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 11:40:16.917 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 11:40:16.919 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 11:40:16.920 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 11:40:16.920 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 11:40:16.921 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 11:40:16.922 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 11:40:16.922 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 17(Long)
2021-02-02 11:40:16.922 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 11:40:16.922 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 11:40:16.923 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 18(Long)
2021-02-02 11:40:16.923 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 11:40:16.924 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 11:40:16.924 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 28(Long)
2021-02-02 11:40:16.925 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 3
2021-02-02 11:40:16.926 DEBUG 35012 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.updateBlog   : ==>  Preparing: update t_blog set published = ?,flag = ? , title = ?, content = ?, type_id = ?, tag_ids = ?, first_picture = ? , description = ? , recommend = ? , share_statement = ?, appreciation = ?, commentabled = ? ,update_time = ? where id = ?
2021-02-02 11:40:16.928 DEBUG 35012 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.updateBlog   : ==> Parameters: true(Boolean), 原创(String), 记录一次线上部署个人项目的流程以及遇到的坑(String), # 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,(String), 25(Long), 16,17,18(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), 主要记录了部署个人项目的流程和过程中遇到的坑(String), true(Boolean), true(Boolean), false(Boolean), true(Boolean), 2021-02-02 11:40:16.924(Timestamp), 28(Long)
2021-02-02 11:40:16.944 DEBUG 35012 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.updateBlog   : <==    Updates: 1
2021-02-02 11:40:16.944 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 11:40:16.944 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 28(Long)
2021-02-02 11:40:16.945 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 11:40:16.945 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 11:40:16.945 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 17(Long), 28(Long)
2021-02-02 11:40:16.946 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 11:40:16.946 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 11:40:16.946 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 18(Long), 28(Long)
2021-02-02 11:40:16.946 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 11:40:16.958 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 11:40:16.958 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 11:40:16.959 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 11:40:16.959 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 11:40:16.959 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 11:40:16.960 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 11:40:16.961 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 11:40:16.961 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 11:40:16.961 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 11:40:27.130  INFO 35012 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[28, {}]}
2021-02-02 11:40:27.131 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 11:40:27.131 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 28(Long)
2021-02-02 11:40:27.135 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 11:40:27.143 DEBUG 35012 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 11:40:27.143 DEBUG 35012 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 28(Long)
2021-02-02 11:40:27.144 DEBUG 35012 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 11:40:27.144 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 11:40:27.144 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 28(Long), 28(Long), 28(Long)
2021-02-02 11:40:27.145 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 11:40:27.149 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:40:27.150 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 11:40:27.151 DEBUG 35012 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 11:40:27.151  INFO 35012 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 11:40:27.725  INFO 35012 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[28, {}]}
2021-02-02 11:40:27.726 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:40:27.726 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 11:40:27.727 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 11:40:27.728  INFO 35012 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 11:40:51.870  INFO 35012 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/about', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.AboutShowController.about', args=[]}
2021-02-02 11:40:51.870  INFO 35012 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : about
2021-02-02 11:46:18.416  INFO 35012 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[28, {}]}
2021-02-02 11:46:18.417 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 11:46:18.418 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 28(Long)
2021-02-02 11:46:18.420 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 11:46:18.430 DEBUG 35012 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 11:46:18.430 DEBUG 35012 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 28(Long)
2021-02-02 11:46:18.431 DEBUG 35012 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 11:46:18.431 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 11:46:18.431 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 28(Long), 28(Long), 28(Long)
2021-02-02 11:46:18.432 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 11:46:18.449 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:46:18.449 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 11:46:18.450 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 11:46:18.450  INFO 35012 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 11:46:19.258  INFO 35012 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[28, {}]}
2021-02-02 11:46:19.258 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:46:19.259 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 11:46:19.260 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 11:46:19.260  INFO 35012 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 11:47:29.217  INFO 35012 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.post', args=[Comment{id=null, nickname='tml', email='2329173619@qq.com', content='测试', avatar='null', createTime=null, blogId=28, parentCommentId=null, parentNickname='null', replyComments=[], parentComment=Comment{id=-1, nickname='null', email='null', content='null', avatar='null', createTime=null, blogId=null, parentCommentId=null, parentNickname='null', replyComments=[], parentComment=null, adminComment=false}, adminComment=false}, org.apache.catalina.session.StandardSessionFacade@24e1f2bd, {comment=Comment{id=null, nickname='tml', email='2329173619@qq.com', content='测试', avatar='null', createTime=null, blogId=28, parentCommentId=null, parentNickname='null', replyComments=[], parentComment=Comment{id=-1, nickname='null', email='null', content='null', avatar='null', createTime=null, blogId=null, parentCommentId=null, parentNickname='null', replyComments=[], parentComment=null, adminComment=false}, adminComment=false}, org.springframework.validation.BindingResult.comment=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2021-02-02 11:47:29.219 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.CommentMapper.saveComment        : ==>  Preparing: insert into t_comment (nickname,email,content,avatar,create_time,blog_id,parent_comment_id,admin_comment) values (?,?,?,?,?,?,?,?);
2021-02-02 11:47:29.219 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.CommentMapper.saveComment        : ==> Parameters: tml(String), 2329173619@qq.com(String), 测试(String), /images/huge.jpg(String), 2021-02-02 11:47:29.218(Timestamp), 28(Long), -1(Long), true(Boolean)
2021-02-02 11:47:29.222 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.CommentMapper.saveComment        : <==    Updates: 1
2021-02-02 11:47:29.222 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.d.C.saveComment!selectKey            : ==>  Preparing: SELECT LAST_INSERT_ID()
2021-02-02 11:47:29.222 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.d.C.saveComment!selectKey            : ==> Parameters: 
2021-02-02 11:47:29.222 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.d.C.saveComment!selectKey            : <==      Total: 1
2021-02-02 11:47:29.222 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 11:47:29.222 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 28(Long), 28(Long), 28(Long)
2021-02-02 11:47:29.223 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 11:47:29.225 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:47:29.225 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 11:47:29.226 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 1
2021-02-02 11:47:29.226 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:47:29.226 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 18(Long)
2021-02-02 11:47:29.227 DEBUG 35012 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 0
2021-02-02 11:47:29.227  INFO 35012 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 11:47:44.299  INFO 35012 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.post', args=[Comment{id=null, nickname='tml', email='2329173619@qq.com', content='测试2', avatar='null', createTime=null, blogId=28, parentCommentId=null, parentNickname='null', replyComments=[], parentComment=Comment{id=18, nickname='null', email='null', content='null', avatar='null', createTime=null, blogId=null, parentCommentId=null, parentNickname='null', replyComments=[], parentComment=null, adminComment=false}, adminComment=false}, org.apache.catalina.session.StandardSessionFacade@24e1f2bd, {comment=Comment{id=null, nickname='tml', email='2329173619@qq.com', content='测试2', avatar='null', createTime=null, blogId=28, parentCommentId=null, parentNickname='null', replyComments=[], parentComment=Comment{id=18, nickname='null', email='null', content='null', avatar='null', createTime=null, blogId=null, parentCommentId=null, parentNickname='null', replyComments=[], parentComment=null, adminComment=false}, adminComment=false}, org.springframework.validation.BindingResult.comment=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2021-02-02 11:47:44.300 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.CommentMapper.saveComment        : ==>  Preparing: insert into t_comment (nickname,email,content,avatar,create_time,blog_id,parent_comment_id,admin_comment) values (?,?,?,?,?,?,?,?);
2021-02-02 11:47:44.301 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.CommentMapper.saveComment        : ==> Parameters: tml(String), 2329173619@qq.com(String), 测试2(String), /images/huge.jpg(String), 2021-02-02 11:47:44.3(Timestamp), 28(Long), 18(Long), true(Boolean)
2021-02-02 11:47:44.304 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.CommentMapper.saveComment        : <==    Updates: 1
2021-02-02 11:47:44.305 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.C.saveComment!selectKey            : ==>  Preparing: SELECT LAST_INSERT_ID()
2021-02-02 11:47:44.305 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.C.saveComment!selectKey            : ==> Parameters: 
2021-02-02 11:47:44.305 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.C.saveComment!selectKey            : <==      Total: 1
2021-02-02 11:47:44.305 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 11:47:44.305 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 28(Long), 28(Long), 28(Long)
2021-02-02 11:47:44.308 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 11:47:44.311 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:47:44.311 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 11:47:44.313 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 1
2021-02-02 11:47:44.313 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:47:44.313 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 18(Long)
2021-02-02 11:47:44.315 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 11:47:44.316 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:47:44.316 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 19(Long)
2021-02-02 11:47:44.317 DEBUG 35012 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 11:47:44.317  INFO 35012 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 11:48:05.571  INFO 35012 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[28, {}]}
2021-02-02 11:48:05.572 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 11:48:05.572 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 28(Long)
2021-02-02 11:48:05.574 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 11:48:05.582 DEBUG 35012 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 11:48:05.582 DEBUG 35012 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 28(Long)
2021-02-02 11:48:05.583 DEBUG 35012 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 11:48:05.583 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 11:48:05.583 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 28(Long), 28(Long), 28(Long)
2021-02-02 11:48:05.584 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 11:48:05.586 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:48:05.586 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 11:48:05.586 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 1
2021-02-02 11:48:05.587 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:48:05.587 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 18(Long)
2021-02-02 11:48:05.587 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 11:48:05.588 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:48:05.588 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 19(Long)
2021-02-02 11:48:05.588 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 11:48:05.588  INFO 35012 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 11:48:06.168  INFO 35012 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[28, {}]}
2021-02-02 11:48:06.169 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:48:06.169 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 11:48:06.170 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 1
2021-02-02 11:48:06.170 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:48:06.171 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 18(Long)
2021-02-02 11:48:06.173 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 11:48:06.173 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:48:06.174 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 19(Long)
2021-02-02 11:48:06.174 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 11:48:06.175  INFO 35012 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 11:48:17.221  INFO 35012 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 11:48:17.224 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 11:48:17.224 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 11:48:17.225 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 11:48:17.225 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 11:48:17.225 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 11:48:17.228 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 11:48:17.230 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 11:48:17.230 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 11:48:17.230 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 11:48:17.231 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 11:48:17.231 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 11:48:17.233 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 11:48:17.234 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 11:48:17.234 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 11:48:17.234 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 11:48:17.235 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 11:48:17.235 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 11:48:17.236 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 11:48:17.236  INFO 35012 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 11:48:19.880  INFO 35012 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[28, {}]}
2021-02-02 11:48:19.881 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 11:48:19.882 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 28(Long)
2021-02-02 11:48:19.883 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 11:48:19.887 DEBUG 35012 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 11:48:19.888 DEBUG 35012 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 28(Long)
2021-02-02 11:48:19.890 DEBUG 35012 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 11:48:19.890 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 11:48:19.891 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 28(Long), 28(Long), 28(Long)
2021-02-02 11:48:19.893 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 11:48:19.903 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:48:19.903 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 11:48:19.905 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 1
2021-02-02 11:48:19.907 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:48:19.908 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 18(Long)
2021-02-02 11:48:19.911 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 11:48:19.911 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:48:19.911 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 19(Long)
2021-02-02 11:48:19.912 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 11:48:19.913  INFO 35012 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 11:48:20.653  INFO 35012 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[28, {}]}
2021-02-02 11:48:20.653 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:48:20.654 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 11:48:20.655 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 1
2021-02-02 11:48:20.656 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:48:20.657 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 18(Long)
2021-02-02 11:48:20.658 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 11:48:20.661 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:48:20.662 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 19(Long)
2021-02-02 11:48:20.664 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 11:48:20.665  INFO 35012 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 11:48:48.079  INFO 35012 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.post', args=[Comment{id=null, nickname='路人甲', email='2329173619@qq.com', content='测试3', avatar='null', createTime=null, blogId=28, parentCommentId=null, parentNickname='null', replyComments=[], parentComment=Comment{id=-1, nickname='null', email='null', content='null', avatar='null', createTime=null, blogId=null, parentCommentId=null, parentNickname='null', replyComments=[], parentComment=null, adminComment=false}, adminComment=false}, org.apache.catalina.session.StandardSessionFacade@339e123f, {comment=Comment{id=null, nickname='路人甲', email='2329173619@qq.com', content='测试3', avatar='null', createTime=null, blogId=28, parentCommentId=null, parentNickname='null', replyComments=[], parentComment=Comment{id=-1, nickname='null', email='null', content='null', avatar='null', createTime=null, blogId=null, parentCommentId=null, parentNickname='null', replyComments=[], parentComment=null, adminComment=false}, adminComment=false}, org.springframework.validation.BindingResult.comment=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2021-02-02 11:48:48.080 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.CommentMapper.saveComment        : ==>  Preparing: insert into t_comment (nickname,email,content,avatar,create_time,blog_id,parent_comment_id,admin_comment) values (?,?,?,?,?,?,?,?);
2021-02-02 11:48:48.081 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.CommentMapper.saveComment        : ==> Parameters: 路人甲(String), 2329173619@qq.com(String), 测试3(String), /images/default.jpg(String), 2021-02-02 11:48:48.08(Timestamp), 28(Long), -1(Long), false(Boolean)
2021-02-02 11:48:48.090 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.CommentMapper.saveComment        : <==    Updates: 1
2021-02-02 11:48:48.091 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.d.C.saveComment!selectKey            : ==>  Preparing: SELECT LAST_INSERT_ID()
2021-02-02 11:48:48.091 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.d.C.saveComment!selectKey            : ==> Parameters: 
2021-02-02 11:48:48.092 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.d.C.saveComment!selectKey            : <==      Total: 1
2021-02-02 11:48:48.092 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 11:48:48.092 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 28(Long), 28(Long), 28(Long)
2021-02-02 11:48:48.093 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 11:48:48.095 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:48:48.095 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 11:48:48.096 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 2
2021-02-02 11:48:48.096 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:48:48.096 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 20(Long)
2021-02-02 11:48:48.097 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 0
2021-02-02 11:48:48.097 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:48:48.097 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 18(Long)
2021-02-02 11:48:48.098 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 11:48:48.098 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:48:48.098 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 19(Long)
2021-02-02 11:48:48.098 DEBUG 35012 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 11:48:48.099  INFO 35012 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 11:48:53.102  INFO 35012 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[28, {}]}
2021-02-02 11:48:53.104 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 11:48:53.105 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 28(Long)
2021-02-02 11:48:53.107 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 11:48:53.114 DEBUG 35012 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 11:48:53.114 DEBUG 35012 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 28(Long)
2021-02-02 11:48:53.115 DEBUG 35012 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 11:48:53.115 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 11:48:53.116 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 28(Long), 28(Long), 28(Long)
2021-02-02 11:48:53.117 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 11:48:53.126 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:48:53.127 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 11:48:53.129 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 2
2021-02-02 11:48:53.129 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:48:53.129 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 20(Long)
2021-02-02 11:48:53.130 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 0
2021-02-02 11:48:53.130 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:48:53.130 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 18(Long)
2021-02-02 11:48:53.131 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 11:48:53.131 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:48:53.131 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 19(Long)
2021-02-02 11:48:53.132 DEBUG 35012 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 11:48:53.132  INFO 35012 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 11:48:53.726  INFO 35012 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[28, {}]}
2021-02-02 11:48:53.727 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:48:53.727 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 11:48:53.728 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 2
2021-02-02 11:48:53.729 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:48:53.729 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 20(Long)
2021-02-02 11:48:53.729 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 0
2021-02-02 11:48:53.730 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:48:53.730 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 18(Long)
2021-02-02 11:48:53.731 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 11:48:53.732 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:48:53.732 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 19(Long)
2021-02-02 11:48:53.733 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 11:48:53.733  INFO 35012 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 11:49:10.940  INFO 35012 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.post', args=[Comment{id=null, nickname='tml', email='2329173619@qq.com', content='3333', avatar='null', createTime=null, blogId=28, parentCommentId=null, parentNickname='null', replyComments=[], parentComment=Comment{id=20, nickname='null', email='null', content='null', avatar='null', createTime=null, blogId=null, parentCommentId=null, parentNickname='null', replyComments=[], parentComment=null, adminComment=false}, adminComment=false}, org.apache.catalina.session.StandardSessionFacade@24e1f2bd, {comment=Comment{id=null, nickname='tml', email='2329173619@qq.com', content='3333', avatar='null', createTime=null, blogId=28, parentCommentId=null, parentNickname='null', replyComments=[], parentComment=Comment{id=20, nickname='null', email='null', content='null', avatar='null', createTime=null, blogId=null, parentCommentId=null, parentNickname='null', replyComments=[], parentComment=null, adminComment=false}, adminComment=false}, org.springframework.validation.BindingResult.comment=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2021-02-02 11:49:10.941 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.CommentMapper.saveComment        : ==>  Preparing: insert into t_comment (nickname,email,content,avatar,create_time,blog_id,parent_comment_id,admin_comment) values (?,?,?,?,?,?,?,?);
2021-02-02 11:49:10.941 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.CommentMapper.saveComment        : ==> Parameters: tml(String), 2329173619@qq.com(String), 3333(String), /images/huge.jpg(String), 2021-02-02 11:49:10.941(Timestamp), 28(Long), 20(Long), true(Boolean)
2021-02-02 11:49:10.944 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.CommentMapper.saveComment        : <==    Updates: 1
2021-02-02 11:49:10.944 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.saveComment!selectKey            : ==>  Preparing: SELECT LAST_INSERT_ID()
2021-02-02 11:49:10.944 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.saveComment!selectKey            : ==> Parameters: 
2021-02-02 11:49:10.945 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.saveComment!selectKey            : <==      Total: 1
2021-02-02 11:49:10.945 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 11:49:10.945 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 28(Long), 28(Long), 28(Long)
2021-02-02 11:49:10.947 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 11:49:10.949 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:49:10.950 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 11:49:10.951 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 2
2021-02-02 11:49:10.952 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:49:10.952 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 20(Long)
2021-02-02 11:49:10.953 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 11:49:10.954 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:49:10.954 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 21(Long)
2021-02-02 11:49:10.954 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 11:49:10.955 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:49:10.955 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 18(Long)
2021-02-02 11:49:10.956 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 11:49:10.956 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:49:10.956 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 19(Long)
2021-02-02 11:49:10.956 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 11:49:10.957  INFO 35012 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 11:49:43.008  INFO 35012 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/message', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.message', args=[]}
2021-02-02 11:49:43.008  INFO 35012 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Result : message
2021-02-02 11:49:43.458  INFO 35012 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/messagecomment', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.messages', args=[{}]}
2021-02-02 11:49:43.459 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.MessageMapper.findByParentIdNull   : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 11:49:43.459 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.MessageMapper.findByParentIdNull   : ==> Parameters: -1(Long)
2021-02-02 11:49:43.462 DEBUG 35012 --- [http-nio-8080-exec-6] c.p.d.MessageMapper.findByParentIdNull   : <==      Total: 0
2021-02-02 11:49:43.462  INFO 35012 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : message::messageList
2021-02-02 11:50:03.735  INFO 35012 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/message', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.post', args=[Message{id=null, nickname='路人甲', email='2329173619@qq.com', content='路人甲', avatar='null', createTime=null, parentMessageId=null, adminMessage=false, replyMessages=[], parentMessage=Message{id=-1, nickname='null', email='null', content='null', avatar='null', createTime=null, parentMessageId=null, adminMessage=false, replyMessages=[], parentMessage=null, parentNickname='null'}, parentNickname='null'}, org.apache.catalina.session.StandardSessionFacade@24e1f2bd, {message=Message{id=null, nickname='路人甲', email='2329173619@qq.com', content='路人甲', avatar='null', createTime=null, parentMessageId=null, adminMessage=false, replyMessages=[], parentMessage=Message{id=-1, nickname='null', email='null', content='null', avatar='null', createTime=null, parentMessageId=null, adminMessage=false, replyMessages=[], parentMessage=null, parentNickname='null'}, parentNickname='null'}, org.springframework.validation.BindingResult.message=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2021-02-02 11:50:03.735 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.dao.MessageMapper.saveMessage        : ==>  Preparing: insert into t_message (nickname,email,content,avatar,create_time,parent_message_id,admin_message) values (?,?,?,?,?,?,?);
2021-02-02 11:50:03.736 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.dao.MessageMapper.saveMessage        : ==> Parameters: 路人甲(String), 2329173619@qq.com(String), 路人甲(String), /images/huge.jpg(String), 2021-02-02 11:50:03.735(Timestamp), -1(Long), true(Boolean)
2021-02-02 11:50:03.747 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.dao.MessageMapper.saveMessage        : <==    Updates: 1
2021-02-02 11:50:03.747 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.d.MessageMapper.findByParentIdNull   : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 11:50:03.747 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.d.MessageMapper.findByParentIdNull   : ==> Parameters: -1(Long)
2021-02-02 11:50:03.748 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.d.MessageMapper.findByParentIdNull   : <==      Total: 1
2021-02-02 11:50:03.748 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 11:50:03.748 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 119(Long)
2021-02-02 11:50:03.748 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.d.M.findByParentIdNotNull            : <==      Total: 0
2021-02-02 11:50:03.748  INFO 35012 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : message::messageList
2021-02-02 11:50:10.583  INFO 35012 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/message', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.message', args=[]}
2021-02-02 11:50:10.583  INFO 35012 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : message
2021-02-02 11:50:11.043  INFO 35012 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/messagecomment', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.messages', args=[{}]}
2021-02-02 11:50:11.043 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.MessageMapper.findByParentIdNull   : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 11:50:11.043 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.MessageMapper.findByParentIdNull   : ==> Parameters: -1(Long)
2021-02-02 11:50:11.047 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.MessageMapper.findByParentIdNull   : <==      Total: 1
2021-02-02 11:50:11.047 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 11:50:11.047 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 119(Long)
2021-02-02 11:50:11.048 DEBUG 35012 --- [http-nio-8080-exec-7] c.p.d.M.findByParentIdNotNull            : <==      Total: 0
2021-02-02 11:50:11.048  INFO 35012 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : message::messageList
2021-02-02 11:50:34.832  INFO 35012 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/message', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.post', args=[Message{id=null, nickname='路人乙', email='2329173619@qq.com', content='路人乙', avatar='null', createTime=null, parentMessageId=null, adminMessage=false, replyMessages=[], parentMessage=Message{id=119, nickname='null', email='null', content='null', avatar='null', createTime=null, parentMessageId=null, adminMessage=false, replyMessages=[], parentMessage=null, parentNickname='null'}, parentNickname='null'}, org.apache.catalina.session.StandardSessionFacade@339e123f, {message=Message{id=null, nickname='路人乙', email='2329173619@qq.com', content='路人乙', avatar='null', createTime=null, parentMessageId=null, adminMessage=false, replyMessages=[], parentMessage=Message{id=119, nickname='null', email='null', content='null', avatar='null', createTime=null, parentMessageId=null, adminMessage=false, replyMessages=[], parentMessage=null, parentNickname='null'}, parentNickname='null'}, org.springframework.validation.BindingResult.message=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2021-02-02 11:50:34.832 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.MessageMapper.saveMessage        : ==>  Preparing: insert into t_message (nickname,email,content,avatar,create_time,parent_message_id,admin_message) values (?,?,?,?,?,?,?);
2021-02-02 11:50:34.833 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.MessageMapper.saveMessage        : ==> Parameters: 路人乙(String), 2329173619@qq.com(String), 路人乙(String), /images/default.jpg(String), 2021-02-02 11:50:34.832(Timestamp), 119(Long), false(Boolean)
2021-02-02 11:50:34.845 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.MessageMapper.saveMessage        : <==    Updates: 1
2021-02-02 11:50:34.845 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.d.MessageMapper.findByParentIdNull   : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 11:50:34.846 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.d.MessageMapper.findByParentIdNull   : ==> Parameters: -1(Long)
2021-02-02 11:50:34.847 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.d.MessageMapper.findByParentIdNull   : <==      Total: 1
2021-02-02 11:50:34.847 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 11:50:34.847 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 119(Long)
2021-02-02 11:50:34.847 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.d.M.findByParentIdNotNull            : <==      Total: 1
2021-02-02 11:50:34.848 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.MessageMapper.findByReplayId     : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 11:50:34.848 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.MessageMapper.findByReplayId     : ==> Parameters: 120(Long)
2021-02-02 11:50:34.848 DEBUG 35012 --- [http-nio-8080-exec-2] c.p.dao.MessageMapper.findByReplayId     : <==      Total: 0
2021-02-02 11:50:34.848  INFO 35012 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Result : message::messageList
2021-02-02 11:51:26.538  INFO 35012 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[28, {}]}
2021-02-02 11:51:26.539 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 11:51:26.540 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 28(Long)
2021-02-02 11:51:26.543 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 11:51:26.554 DEBUG 35012 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 11:51:26.554 DEBUG 35012 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 28(Long)
2021-02-02 11:51:26.555 DEBUG 35012 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 11:51:26.555 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 11:51:26.556 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 28(Long), 28(Long), 28(Long)
2021-02-02 11:51:26.557 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 11:51:26.561 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:51:26.561 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 11:51:26.563 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 2
2021-02-02 11:51:26.563 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:51:26.563 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 20(Long)
2021-02-02 11:51:26.565 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 11:51:26.565 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:51:26.565 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 21(Long)
2021-02-02 11:51:26.566 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 11:51:26.567 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:51:26.568 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 18(Long)
2021-02-02 11:51:26.569 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 11:51:26.570 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:51:26.570 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 19(Long)
2021-02-02 11:51:26.571 DEBUG 35012 --- [http-nio-8080-exec-10] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 11:51:26.571  INFO 35012 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 11:51:28.625  INFO 35012 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[28, {}]}
2021-02-02 11:51:28.625 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:51:28.626 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 11:51:28.627 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 2
2021-02-02 11:51:28.627 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:51:28.628 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 20(Long)
2021-02-02 11:51:28.629 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 11:51:28.630 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:51:28.631 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 21(Long)
2021-02-02 11:51:28.632 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 11:51:28.633 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:51:28.633 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 18(Long)
2021-02-02 11:51:28.634 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 11:51:28.635 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:51:28.635 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 19(Long)
2021-02-02 11:51:28.635 DEBUG 35012 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 11:51:28.635  INFO 35012 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 11:52:52.303  INFO 21428 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 21428 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 11:52:52.307 DEBUG 21428 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 11:52:52.308  INFO 21428 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 11:52:52.371  INFO 21428 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 11:52:52.372  INFO 21428 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 11:52:53.766  INFO 21428 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 11:52:53.775  INFO 21428 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 11:52:53.775  INFO 21428 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 11:52:53.846  INFO 21428 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 11:52:53.847  INFO 21428 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1475 ms
2021-02-02 11:52:54.488  INFO 21428 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 11:52:54.566  INFO 21428 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 11:52:54.868  INFO 21428 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 11:52:54.902  INFO 21428 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 11:52:54.914  INFO 21428 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 3.232 seconds (JVM running for 6.018)
2021-02-02 11:52:58.246  INFO 21428 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 11:52:58.246  INFO 21428 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 11:52:58.272  INFO 21428 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 24 ms
2021-02-02 11:52:58.360  INFO 21428 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[28, {}]}
2021-02-02 11:52:58.399  INFO 21428 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 11:52:58.814  INFO 21428 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 11:52:58.864 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 11:52:58.888 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 28(Long)
2021-02-02 11:52:58.914 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 11:52:59.031 DEBUG 21428 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 11:52:59.031 DEBUG 21428 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 28(Long)
2021-02-02 11:52:59.033 DEBUG 21428 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 11:52:59.034 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 11:52:59.035 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 28(Long), 28(Long), 28(Long)
2021-02-02 11:52:59.039 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 11:52:59.049 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:52:59.050 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 11:52:59.054 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 2
2021-02-02 11:52:59.057 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:52:59.058 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 20(Long)
2021-02-02 11:52:59.060 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 11:52:59.061 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:52:59.061 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 21(Long)
2021-02-02 11:52:59.062 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 11:52:59.062 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:52:59.063 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 18(Long)
2021-02-02 11:52:59.064 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 11:52:59.065 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:52:59.065 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 19(Long)
2021-02-02 11:52:59.066 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 11:52:59.066  INFO 21428 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 11:53:00.796  INFO 21428 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[28, {}]}
2021-02-02 11:53:00.804 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:53:00.805 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 11:53:00.808 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 2
2021-02-02 11:53:00.809 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:53:00.809 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 20(Long)
2021-02-02 11:53:00.813 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 11:53:00.814 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:53:00.815 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 21(Long)
2021-02-02 11:53:00.815 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 11:53:00.816 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:53:00.817 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 18(Long)
2021-02-02 11:53:00.818 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 11:53:00.820 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 11:53:00.820 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 19(Long)
2021-02-02 11:53:00.821 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 11:53:00.822  INFO 21428 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 11:53:18.639  INFO 21428 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/message', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.message', args=[]}
2021-02-02 11:53:18.643  INFO 21428 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : message
2021-02-02 11:53:19.121  INFO 21428 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/messagecomment', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.messages', args=[{}]}
2021-02-02 11:53:19.123 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.MessageMapper.findByParentIdNull   : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 11:53:19.124 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.MessageMapper.findByParentIdNull   : ==> Parameters: -1(Long)
2021-02-02 11:53:19.127 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.MessageMapper.findByParentIdNull   : <==      Total: 1
2021-02-02 11:53:19.129 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 11:53:19.129 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 119(Long)
2021-02-02 11:53:19.130 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.M.findByParentIdNotNull            : <==      Total: 1
2021-02-02 11:53:19.131 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.MessageMapper.findByReplayId     : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 11:53:19.134 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.MessageMapper.findByReplayId     : ==> Parameters: 120(Long)
2021-02-02 11:53:19.138 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.MessageMapper.findByReplayId     : <==      Total: 0
2021-02-02 11:53:19.140  INFO 21428 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : message::messageList
2021-02-02 11:53:25.757  INFO 21428 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 11:53:25.794 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 11:53:25.794 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 11:53:25.795 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 11:53:25.797 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 11:53:25.797 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 11:53:25.800 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 11:53:25.805 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 11:53:25.805 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 11:53:25.806 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 11:53:25.810 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 11:53:25.810 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 11:53:25.821 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 11:53:25.824 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 11:53:25.824 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 11:53:25.826 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 11:53:25.828 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 11:53:25.828 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 11:53:25.829 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 11:53:25.829  INFO 21428 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 11:53:39.687  INFO 21428 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/archives', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.ArchiveShowController.archive', args=[{count=Count(id=null, count=null, createTime=null), org.springframework.validation.BindingResult.count=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, Count(id=null, count=null, createTime=null)]}
2021-02-02 11:53:39.691 DEBUG 21428 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.findGroupYear         : ==>  Preparing: select date_format(b.create_time,'%Y') year from t_blog b group by year order by year desc
2021-02-02 11:53:39.691 DEBUG 21428 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.findGroupYear         : ==> Parameters: 
2021-02-02 11:53:39.702 DEBUG 21428 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.findGroupYear         : <==      Total: 1
2021-02-02 11:53:39.703 DEBUG 21428 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.findByYear   : ==>  Preparing: select b.id bid, b.title, b.create_time, b.flag,t.name from t_blog b, t_type t where date_format(b.create_time,'%Y')=? and b.type_id=t.id order by b.create_time desc
2021-02-02 11:53:39.704 DEBUG 21428 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.findByYear   : ==> Parameters: 2021(String)
2021-02-02 11:53:39.705 DEBUG 21428 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.findByYear   : <==      Total: 1
2021-02-02 11:53:39.707 DEBUG 21428 --- [http-nio-8080-exec-5] com.personblog.dao.BlogMapper.count      : ==>  Preparing: select count(*) from t_blog
2021-02-02 11:53:39.707 DEBUG 21428 --- [http-nio-8080-exec-5] com.personblog.dao.BlogMapper.count      : ==> Parameters: 
2021-02-02 11:53:39.708 DEBUG 21428 --- [http-nio-8080-exec-5] com.personblog.dao.BlogMapper.count      : <==      Total: 1
2021-02-02 11:53:39.709 DEBUG 21428 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.deleteCount  : ==>  Preparing: delete from t_count
2021-02-02 11:53:39.710 DEBUG 21428 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.deleteCount  : ==> Parameters: 
2021-02-02 11:53:39.711 DEBUG 21428 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.deleteCount  : <==    Updates: 0
2021-02-02 11:53:39.712 DEBUG 21428 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.insertCount  : ==>  Preparing: insert into t_count(count,create_time) (select count(*) count, create_time from t_blog GROUP BY year(create_time),month(create_time) order by create_time desc)
2021-02-02 11:53:39.712 DEBUG 21428 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.insertCount  : ==> Parameters: 
2021-02-02 11:53:39.715 DEBUG 21428 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.insertCount  : <==    Updates: 1
2021-02-02 11:53:39.717 DEBUG 21428 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.findGroupYear2        : ==>  Preparing: select date_format(t_count.create_time,'%Y年%m月') year1 from t_count GROUP BY year1 order by year1 desc
2021-02-02 11:53:39.718 DEBUG 21428 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.findGroupYear2        : ==> Parameters: 
2021-02-02 11:53:39.721 DEBUG 21428 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.findGroupYear2        : <==      Total: 1
2021-02-02 11:53:39.722 DEBUG 21428 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.findByYear2  : ==>  Preparing: select c.id,c.count,c.create_time from t_count c where date_format(c.create_time,'%Y年%m月')=? order by c.create_time desc
2021-02-02 11:53:39.722 DEBUG 21428 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.findByYear2  : ==> Parameters: 2021年02月(String)
2021-02-02 11:53:39.723 DEBUG 21428 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.findByYear2  : <==      Total: 1
2021-02-02 11:53:39.724  INFO 21428 --- [http-nio-8080-exec-5] c.p.service.impl.BlogServiceImpl         : {2021年02月=[Count(id=118, count=1, createTime=Tue Feb 02 11:37:43 CST 2021)]}
2021-02-02 11:53:39.726  INFO 21428 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : archives
2021-02-02 11:53:48.187  INFO 21428 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 11:53:48.190 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 11:53:48.191 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 11:53:48.192 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 11:53:48.192 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 11:53:48.193 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 11:53:48.194 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 11:53:48.196 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 11:53:48.197 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 11:53:48.198 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 11:53:48.201 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 11:53:48.202 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 11:53:48.203 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 11:53:48.204 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 11:53:48.204 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 11:53:48.205 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 11:53:48.206 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 11:53:48.206 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 11:53:48.207 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 11:53:48.207  INFO 21428 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 11:54:00.695  INFO 21428 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/types/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TypeShowController.typeShow', args=[{}, -1, 1]}
2021-02-02 11:54:00.700 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 11:54:00.700 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 11:54:00.702 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 11:54:00.705 DEBUG 21428 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.getByTypeId  : ==>  Preparing: select b.id,b.title,b.flag,b.first_picture,b.published,b.views,b.update_time,b.description, t.id tid,t.name, b.comment_count, b.type_id, u.nickname, u.avatar from t_blog b join t_user u on b.user_id=u.id join t_type t on t.id=b.type_id and b.type_id = ? order by b.update_time desc
2021-02-02 11:54:00.705 DEBUG 21428 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.getByTypeId  : ==> Parameters: 25(Long)
2021-02-02 11:54:00.707 DEBUG 21428 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.getByTypeId  : <==      Total: 1
2021-02-02 11:54:00.708  INFO 21428 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : types
2021-02-02 11:59:44.309  INFO 21428 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/types/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TypeShowController.typeShow', args=[{}, -1, 1]}
2021-02-02 11:59:44.311 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 11:59:44.311 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 11:59:44.313 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 11:59:44.314 DEBUG 21428 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.getByTypeId  : ==>  Preparing: select b.id,b.title,b.flag,b.first_picture,b.published,b.views,b.update_time,b.description, t.id tid,t.name, b.comment_count, b.type_id, u.nickname, u.avatar from t_blog b join t_user u on b.user_id=u.id join t_type t on t.id=b.type_id and b.type_id = ? order by b.update_time desc
2021-02-02 11:59:44.315 DEBUG 21428 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.getByTypeId  : ==> Parameters: 25(Long)
2021-02-02 11:59:44.316 DEBUG 21428 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.getByTypeId  : <==      Total: 1
2021-02-02 11:59:44.318  INFO 21428 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Result : types
2021-02-02 11:59:47.326  INFO 21428 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/tags/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TagShowController.tag', args=[1, -1, {}]}
2021-02-02 11:59:47.330 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 11:59:47.330 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 11:59:47.332 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 11:59:47.335 DEBUG 21428 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getByTagId   : ==>  Preparing: select b.id,b.title,b.first_picture,b.flag,b.views,b.update_time,b.description, t.id,t.name, u.nickname, u.avatar, b.comment_count from t_blog b, t_type t,t_blog_tag tb ,t_user u,t_tag tt where b.type_id = t.id and u.id = b.user_id and tb.blog_id = b.id and tb.tag_id = tt.id and tb.tag_id = ? order by b.update_time desc
2021-02-02 11:59:47.337 DEBUG 21428 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getByTagId   : ==> Parameters: 18(Long)
2021-02-02 11:59:47.348 DEBUG 21428 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getByTagId   : <==      Total: 1
2021-02-02 11:59:47.349  INFO 21428 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : tags
2021-02-02 11:59:50.242  INFO 21428 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/tags/16', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TagShowController.tag', args=[1, 16, {}]}
2021-02-02 11:59:50.243 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 11:59:50.244 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 11:59:50.248 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 11:59:50.250 DEBUG 21428 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getByTagId   : ==>  Preparing: select b.id,b.title,b.first_picture,b.flag,b.views,b.update_time,b.description, t.id,t.name, u.nickname, u.avatar, b.comment_count from t_blog b, t_type t,t_blog_tag tb ,t_user u,t_tag tt where b.type_id = t.id and u.id = b.user_id and tb.blog_id = b.id and tb.tag_id = tt.id and tb.tag_id = ? order by b.update_time desc
2021-02-02 11:59:50.250 DEBUG 21428 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getByTagId   : ==> Parameters: 16(Long)
2021-02-02 11:59:50.252 DEBUG 21428 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getByTagId   : <==      Total: 1
2021-02-02 11:59:50.253  INFO 21428 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Result : tags
2021-02-02 11:59:51.558  INFO 21428 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/tags/17', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TagShowController.tag', args=[1, 17, {}]}
2021-02-02 11:59:51.559 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 11:59:51.560 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 11:59:51.561 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 11:59:51.562 DEBUG 21428 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.getByTagId   : ==>  Preparing: select b.id,b.title,b.first_picture,b.flag,b.views,b.update_time,b.description, t.id,t.name, u.nickname, u.avatar, b.comment_count from t_blog b, t_type t,t_blog_tag tb ,t_user u,t_tag tt where b.type_id = t.id and u.id = b.user_id and tb.blog_id = b.id and tb.tag_id = tt.id and tb.tag_id = ? order by b.update_time desc
2021-02-02 11:59:51.563 DEBUG 21428 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.getByTagId   : ==> Parameters: 17(Long)
2021-02-02 11:59:51.564 DEBUG 21428 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.getByTagId   : <==      Total: 1
2021-02-02 11:59:51.565  INFO 21428 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : tags
2021-02-02 11:59:53.479  INFO 21428 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/message', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.message', args=[]}
2021-02-02 11:59:53.479  INFO 21428 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : message
2021-02-02 11:59:53.887  INFO 21428 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/messagecomment', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.messages', args=[{}]}
2021-02-02 11:59:53.888 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.d.MessageMapper.findByParentIdNull   : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 11:59:53.888 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.d.MessageMapper.findByParentIdNull   : ==> Parameters: -1(Long)
2021-02-02 11:59:53.890 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.d.MessageMapper.findByParentIdNull   : <==      Total: 1
2021-02-02 11:59:53.890 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 11:59:53.890 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 119(Long)
2021-02-02 11:59:53.891 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.d.M.findByParentIdNotNull            : <==      Total: 1
2021-02-02 11:59:53.892 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.MessageMapper.findByReplayId     : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 11:59:53.892 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.MessageMapper.findByReplayId     : ==> Parameters: 120(Long)
2021-02-02 11:59:53.892 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.MessageMapper.findByReplayId     : <==      Total: 0
2021-02-02 11:59:53.893  INFO 21428 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : message::messageList
2021-02-02 12:00:09.996  INFO 21428 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/tags/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TagShowController.tag', args=[1, -1, {}]}
2021-02-02 12:00:09.998 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 12:00:09.999 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 12:00:10.002 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 12:00:10.004 DEBUG 21428 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.getByTagId   : ==>  Preparing: select b.id,b.title,b.first_picture,b.flag,b.views,b.update_time,b.description, t.id,t.name, u.nickname, u.avatar, b.comment_count from t_blog b, t_type t,t_blog_tag tb ,t_user u,t_tag tt where b.type_id = t.id and u.id = b.user_id and tb.blog_id = b.id and tb.tag_id = tt.id and tb.tag_id = ? order by b.update_time desc
2021-02-02 12:00:10.004 DEBUG 21428 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.getByTagId   : ==> Parameters: 18(Long)
2021-02-02 12:00:10.006 DEBUG 21428 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.getByTagId   : <==      Total: 1
2021-02-02 12:00:10.007  INFO 21428 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Result : tags
2021-02-02 12:00:12.637  INFO 21428 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/types/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TypeShowController.typeShow', args=[{}, -1, 1]}
2021-02-02 12:00:12.638 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 12:00:12.638 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 12:00:12.639 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 12:00:12.641 DEBUG 21428 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.getByTypeId  : ==>  Preparing: select b.id,b.title,b.flag,b.first_picture,b.published,b.views,b.update_time,b.description, t.id tid,t.name, b.comment_count, b.type_id, u.nickname, u.avatar from t_blog b join t_user u on b.user_id=u.id join t_type t on t.id=b.type_id and b.type_id = ? order by b.update_time desc
2021-02-02 12:00:12.641 DEBUG 21428 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.getByTypeId  : ==> Parameters: 25(Long)
2021-02-02 12:00:12.644 DEBUG 21428 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.getByTypeId  : <==      Total: 1
2021-02-02 12:00:12.645  INFO 21428 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : types
2021-02-02 12:00:14.599  INFO 21428 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/message', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.message', args=[]}
2021-02-02 12:00:14.600  INFO 21428 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : message
2021-02-02 12:00:15.043  INFO 21428 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/messagecomment', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.messages', args=[{}]}
2021-02-02 12:00:15.044 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.d.MessageMapper.findByParentIdNull   : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 12:00:15.044 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.d.MessageMapper.findByParentIdNull   : ==> Parameters: -1(Long)
2021-02-02 12:00:15.045 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.d.MessageMapper.findByParentIdNull   : <==      Total: 1
2021-02-02 12:00:15.046 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 12:00:15.047 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 119(Long)
2021-02-02 12:00:15.050 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.d.M.findByParentIdNotNull            : <==      Total: 1
2021-02-02 12:00:15.051 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.dao.MessageMapper.findByReplayId     : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 12:00:15.051 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.dao.MessageMapper.findByReplayId     : ==> Parameters: 120(Long)
2021-02-02 12:00:15.051 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.dao.MessageMapper.findByReplayId     : <==      Total: 0
2021-02-02 12:00:15.052  INFO 21428 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Result : message::messageList
2021-02-02 12:01:05.149  INFO 21428 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/message', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.message', args=[]}
2021-02-02 12:01:05.149  INFO 21428 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : message
2021-02-02 12:01:05.927  INFO 21428 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/messagecomment', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.messages', args=[{}]}
2021-02-02 12:01:05.928 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.MessageMapper.findByParentIdNull   : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 12:01:05.929 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.MessageMapper.findByParentIdNull   : ==> Parameters: -1(Long)
2021-02-02 12:01:05.931 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.MessageMapper.findByParentIdNull   : <==      Total: 1
2021-02-02 12:01:05.933 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 12:01:05.933 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 119(Long)
2021-02-02 12:01:05.935 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.M.findByParentIdNotNull            : <==      Total: 1
2021-02-02 12:01:05.939 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.MessageMapper.findByReplayId     : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 12:01:05.939 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.MessageMapper.findByReplayId     : ==> Parameters: 120(Long)
2021-02-02 12:01:05.941 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.MessageMapper.findByReplayId     : <==      Total: 0
2021-02-02 12:01:05.942  INFO 21428 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : message::messageList
2021-02-02 12:01:16.362  INFO 21428 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/tags/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TagShowController.tag', args=[1, -1, {}]}
2021-02-02 12:01:16.363 DEBUG 21428 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 12:01:16.364 DEBUG 21428 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 12:01:16.366 DEBUG 21428 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 12:01:16.368 DEBUG 21428 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.getByTagId   : ==>  Preparing: select b.id,b.title,b.first_picture,b.flag,b.views,b.update_time,b.description, t.id,t.name, u.nickname, u.avatar, b.comment_count from t_blog b, t_type t,t_blog_tag tb ,t_user u,t_tag tt where b.type_id = t.id and u.id = b.user_id and tb.blog_id = b.id and tb.tag_id = tt.id and tb.tag_id = ? order by b.update_time desc
2021-02-02 12:01:16.369 DEBUG 21428 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.getByTagId   : ==> Parameters: 18(Long)
2021-02-02 12:01:16.370 DEBUG 21428 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.getByTagId   : <==      Total: 1
2021-02-02 12:01:16.372  INFO 21428 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : tags
2021-02-02 12:01:17.630  INFO 21428 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/message', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.message', args=[]}
2021-02-02 12:01:17.630  INFO 21428 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : message
2021-02-02 12:01:18.038  INFO 21428 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/messagecomment', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.messages', args=[{}]}
2021-02-02 12:01:18.039 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.d.MessageMapper.findByParentIdNull   : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 12:01:18.040 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.d.MessageMapper.findByParentIdNull   : ==> Parameters: -1(Long)
2021-02-02 12:01:18.041 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.d.MessageMapper.findByParentIdNull   : <==      Total: 1
2021-02-02 12:01:18.042 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 12:01:18.042 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 119(Long)
2021-02-02 12:01:18.043 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.d.M.findByParentIdNotNull            : <==      Total: 1
2021-02-02 12:01:18.044 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.dao.MessageMapper.findByReplayId     : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 12:01:18.045 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.dao.MessageMapper.findByReplayId     : ==> Parameters: 120(Long)
2021-02-02 12:01:18.047 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.dao.MessageMapper.findByReplayId     : <==      Total: 0
2021-02-02 12:01:18.047  INFO 21428 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Result : message::messageList
2021-02-02 12:01:19.108  INFO 21428 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/archives', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.ArchiveShowController.archive', args=[{count=Count(id=null, count=null, createTime=null), org.springframework.validation.BindingResult.count=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, Count(id=null, count=null, createTime=null)]}
2021-02-02 12:01:19.109 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.findGroupYear         : ==>  Preparing: select date_format(b.create_time,'%Y') year from t_blog b group by year order by year desc
2021-02-02 12:01:19.110 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.findGroupYear         : ==> Parameters: 
2021-02-02 12:01:19.113 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.findGroupYear         : <==      Total: 1
2021-02-02 12:01:19.114 DEBUG 21428 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.findByYear   : ==>  Preparing: select b.id bid, b.title, b.create_time, b.flag,t.name from t_blog b, t_type t where date_format(b.create_time,'%Y')=? and b.type_id=t.id order by b.create_time desc
2021-02-02 12:01:19.115 DEBUG 21428 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.findByYear   : ==> Parameters: 2021(String)
2021-02-02 12:01:19.116 DEBUG 21428 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.findByYear   : <==      Total: 1
2021-02-02 12:01:19.117 DEBUG 21428 --- [http-nio-8080-exec-7] com.personblog.dao.BlogMapper.count      : ==>  Preparing: select count(*) from t_blog
2021-02-02 12:01:19.117 DEBUG 21428 --- [http-nio-8080-exec-7] com.personblog.dao.BlogMapper.count      : ==> Parameters: 
2021-02-02 12:01:19.117 DEBUG 21428 --- [http-nio-8080-exec-7] com.personblog.dao.BlogMapper.count      : <==      Total: 1
2021-02-02 12:01:19.118 DEBUG 21428 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.deleteCount  : ==>  Preparing: delete from t_count
2021-02-02 12:01:19.119 DEBUG 21428 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.deleteCount  : ==> Parameters: 
2021-02-02 12:01:19.120 DEBUG 21428 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.deleteCount  : <==    Updates: 1
2021-02-02 12:01:19.120 DEBUG 21428 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.insertCount  : ==>  Preparing: insert into t_count(count,create_time) (select count(*) count, create_time from t_blog GROUP BY year(create_time),month(create_time) order by create_time desc)
2021-02-02 12:01:19.121 DEBUG 21428 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.insertCount  : ==> Parameters: 
2021-02-02 12:01:19.123 DEBUG 21428 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.insertCount  : <==    Updates: 1
2021-02-02 12:01:19.123 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.findGroupYear2        : ==>  Preparing: select date_format(t_count.create_time,'%Y年%m月') year1 from t_count GROUP BY year1 order by year1 desc
2021-02-02 12:01:19.124 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.findGroupYear2        : ==> Parameters: 
2021-02-02 12:01:19.125 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.findGroupYear2        : <==      Total: 1
2021-02-02 12:01:19.126 DEBUG 21428 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.findByYear2  : ==>  Preparing: select c.id,c.count,c.create_time from t_count c where date_format(c.create_time,'%Y年%m月')=? order by c.create_time desc
2021-02-02 12:01:19.126 DEBUG 21428 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.findByYear2  : ==> Parameters: 2021年02月(String)
2021-02-02 12:01:19.128 DEBUG 21428 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.findByYear2  : <==      Total: 1
2021-02-02 12:01:19.128  INFO 21428 --- [http-nio-8080-exec-7] c.p.service.impl.BlogServiceImpl         : {2021年02月=[Count(id=119, count=1, createTime=Tue Feb 02 11:37:43 CST 2021)]}
2021-02-02 12:01:19.130  INFO 21428 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : archives
2021-02-02 12:01:24.273  INFO 21428 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/about', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.AboutShowController.about', args=[]}
2021-02-02 12:01:24.278  INFO 21428 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Result : about
2021-02-02 12:01:30.056  INFO 21428 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/archives', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.ArchiveShowController.archive', args=[{count=Count(id=null, count=null, createTime=null), org.springframework.validation.BindingResult.count=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, Count(id=null, count=null, createTime=null)]}
2021-02-02 12:01:30.058 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.findGroupYear         : ==>  Preparing: select date_format(b.create_time,'%Y') year from t_blog b group by year order by year desc
2021-02-02 12:01:30.059 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.findGroupYear         : ==> Parameters: 
2021-02-02 12:01:30.060 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.findGroupYear         : <==      Total: 1
2021-02-02 12:01:30.061 DEBUG 21428 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.findByYear   : ==>  Preparing: select b.id bid, b.title, b.create_time, b.flag,t.name from t_blog b, t_type t where date_format(b.create_time,'%Y')=? and b.type_id=t.id order by b.create_time desc
2021-02-02 12:01:30.061 DEBUG 21428 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.findByYear   : ==> Parameters: 2021(String)
2021-02-02 12:01:30.063 DEBUG 21428 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.findByYear   : <==      Total: 1
2021-02-02 12:01:30.065 DEBUG 21428 --- [http-nio-8080-exec-3] com.personblog.dao.BlogMapper.count      : ==>  Preparing: select count(*) from t_blog
2021-02-02 12:01:30.065 DEBUG 21428 --- [http-nio-8080-exec-3] com.personblog.dao.BlogMapper.count      : ==> Parameters: 
2021-02-02 12:01:30.065 DEBUG 21428 --- [http-nio-8080-exec-3] com.personblog.dao.BlogMapper.count      : <==      Total: 1
2021-02-02 12:01:30.067 DEBUG 21428 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.deleteCount  : ==>  Preparing: delete from t_count
2021-02-02 12:01:30.067 DEBUG 21428 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.deleteCount  : ==> Parameters: 
2021-02-02 12:01:30.068 DEBUG 21428 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.deleteCount  : <==    Updates: 1
2021-02-02 12:01:30.069 DEBUG 21428 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.insertCount  : ==>  Preparing: insert into t_count(count,create_time) (select count(*) count, create_time from t_blog GROUP BY year(create_time),month(create_time) order by create_time desc)
2021-02-02 12:01:30.069 DEBUG 21428 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.insertCount  : ==> Parameters: 
2021-02-02 12:01:30.070 DEBUG 21428 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.insertCount  : <==    Updates: 1
2021-02-02 12:01:30.071 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.findGroupYear2        : ==>  Preparing: select date_format(t_count.create_time,'%Y年%m月') year1 from t_count GROUP BY year1 order by year1 desc
2021-02-02 12:01:30.072 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.findGroupYear2        : ==> Parameters: 
2021-02-02 12:01:30.074 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.findGroupYear2        : <==      Total: 1
2021-02-02 12:01:30.074 DEBUG 21428 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.findByYear2  : ==>  Preparing: select c.id,c.count,c.create_time from t_count c where date_format(c.create_time,'%Y年%m月')=? order by c.create_time desc
2021-02-02 12:01:30.074 DEBUG 21428 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.findByYear2  : ==> Parameters: 2021年02月(String)
2021-02-02 12:01:30.075 DEBUG 21428 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.findByYear2  : <==      Total: 1
2021-02-02 12:01:30.076  INFO 21428 --- [http-nio-8080-exec-3] c.p.service.impl.BlogServiceImpl         : {2021年02月=[Count(id=120, count=1, createTime=Tue Feb 02 11:37:43 CST 2021)]}
2021-02-02 12:01:30.078  INFO 21428 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : archives
2021-02-02 12:01:33.543  INFO 21428 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/message', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.message', args=[]}
2021-02-02 12:01:33.543  INFO 21428 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : message
2021-02-02 12:01:34.022  INFO 21428 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/messagecomment', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.messages', args=[{}]}
2021-02-02 12:01:34.023 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.d.MessageMapper.findByParentIdNull   : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 12:01:34.023 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.d.MessageMapper.findByParentIdNull   : ==> Parameters: -1(Long)
2021-02-02 12:01:34.025 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.d.MessageMapper.findByParentIdNull   : <==      Total: 1
2021-02-02 12:01:34.025 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 12:01:34.026 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 119(Long)
2021-02-02 12:01:34.026 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.d.M.findByParentIdNotNull            : <==      Total: 1
2021-02-02 12:01:34.027 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.MessageMapper.findByReplayId     : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 12:01:34.027 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.MessageMapper.findByReplayId     : ==> Parameters: 120(Long)
2021-02-02 12:01:34.028 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.MessageMapper.findByReplayId     : <==      Total: 0
2021-02-02 12:01:34.028  INFO 21428 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : message::messageList
2021-02-02 12:01:36.196  INFO 21428 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/tags/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TagShowController.tag', args=[1, -1, {}]}
2021-02-02 12:01:36.198 DEBUG 21428 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 12:01:36.198 DEBUG 21428 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 12:01:36.201 DEBUG 21428 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 12:01:36.204 DEBUG 21428 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.getByTagId   : ==>  Preparing: select b.id,b.title,b.first_picture,b.flag,b.views,b.update_time,b.description, t.id,t.name, u.nickname, u.avatar, b.comment_count from t_blog b, t_type t,t_blog_tag tb ,t_user u,t_tag tt where b.type_id = t.id and u.id = b.user_id and tb.blog_id = b.id and tb.tag_id = tt.id and tb.tag_id = ? order by b.update_time desc
2021-02-02 12:01:36.205 DEBUG 21428 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.getByTagId   : ==> Parameters: 18(Long)
2021-02-02 12:01:36.208 DEBUG 21428 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.getByTagId   : <==      Total: 1
2021-02-02 12:01:36.210  INFO 21428 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : tags
2021-02-02 12:01:38.142  INFO 21428 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/types/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TypeShowController.typeShow', args=[{}, -1, 1]}
2021-02-02 12:01:38.144 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 12:01:38.144 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 12:01:38.145 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 12:01:38.146 DEBUG 21428 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.getByTypeId  : ==>  Preparing: select b.id,b.title,b.flag,b.first_picture,b.published,b.views,b.update_time,b.description, t.id tid,t.name, b.comment_count, b.type_id, u.nickname, u.avatar from t_blog b join t_user u on b.user_id=u.id join t_type t on t.id=b.type_id and b.type_id = ? order by b.update_time desc
2021-02-02 12:01:38.147 DEBUG 21428 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.getByTypeId  : ==> Parameters: 25(Long)
2021-02-02 12:01:38.148 DEBUG 21428 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.getByTypeId  : <==      Total: 1
2021-02-02 12:01:38.149  INFO 21428 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : types
2021-02-02 12:01:46.673  INFO 21428 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/search', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.search', args=[{}, 1, 项目]}
2021-02-02 12:01:46.697 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getSearchBlog_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true AND (b.title LIKE ? OR b.content LIKE ?)
2021-02-02 12:01:46.698 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getSearchBlog_COUNT   : ==> Parameters: %项目%(String), %项目%(String)
2021-02-02 12:01:46.699 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getSearchBlog_COUNT   : <==      Total: 1
2021-02-02 12:01:46.699 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getSearchBlog         : ==>  Preparing: select b.id,b.title,b.first_picture, b.views,b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t, t_user u where b.type_id = t.id and u.id = b.user_id and b.published = true and (b.title like ? or b.content like ?) order by b.update_time desc LIMIT ?
2021-02-02 12:01:46.699 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getSearchBlog         : ==> Parameters: %项目%(String), %项目%(String), 4(Integer)
2021-02-02 12:01:46.700 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getSearchBlog         : <==      Total: 1
2021-02-02 12:01:46.701  INFO 21428 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : search
2021-02-02 12:01:56.638  INFO 21428 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 12:01:56.646 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 12:01:56.646 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 12:01:56.647 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 12:01:56.647 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 12:01:56.647 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 12:01:56.648 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 12:01:56.649 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 12:01:56.650 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 12:01:56.652 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 12:01:56.655 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 12:01:56.655 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 12:01:56.656 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 12:01:56.658 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 12:01:56.659 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 12:01:56.660 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 12:01:56.661 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 12:01:56.661 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 12:01:56.661 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 12:01:56.661  INFO 21428 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 12:05:26.637  INFO 21428 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/message', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.message', args=[]}
2021-02-02 12:05:26.638  INFO 21428 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : message
2021-02-02 12:05:27.211  INFO 21428 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/messagecomment', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.messages', args=[{}]}
2021-02-02 12:05:27.213 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.d.MessageMapper.findByParentIdNull   : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 12:05:27.214 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.d.MessageMapper.findByParentIdNull   : ==> Parameters: -1(Long)
2021-02-02 12:05:27.216 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.d.MessageMapper.findByParentIdNull   : <==      Total: 1
2021-02-02 12:05:27.217 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 12:05:27.217 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 119(Long)
2021-02-02 12:05:27.219 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.d.M.findByParentIdNotNull            : <==      Total: 1
2021-02-02 12:05:27.219 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.MessageMapper.findByReplayId     : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 12:05:27.220 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.MessageMapper.findByReplayId     : ==> Parameters: 120(Long)
2021-02-02 12:05:27.221 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.MessageMapper.findByReplayId     : <==      Total: 0
2021-02-02 12:05:27.221  INFO 21428 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : message::messageList
2021-02-02 12:36:08.861  INFO 21428 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/message', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.message', args=[]}
2021-02-02 12:36:08.861  INFO 21428 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : message
2021-02-02 12:36:09.623  INFO 21428 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/messagecomment', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.messages', args=[{}]}
2021-02-02 12:36:09.626 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.d.MessageMapper.findByParentIdNull   : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 12:36:09.627 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.d.MessageMapper.findByParentIdNull   : ==> Parameters: -1(Long)
2021-02-02 12:36:09.628 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.d.MessageMapper.findByParentIdNull   : <==      Total: 1
2021-02-02 12:36:09.629 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 12:36:09.629 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 119(Long)
2021-02-02 12:36:09.634 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.d.M.findByParentIdNotNull            : <==      Total: 1
2021-02-02 12:36:09.634 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.MessageMapper.findByReplayId     : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 12:36:09.634 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.MessageMapper.findByReplayId     : ==> Parameters: 120(Long)
2021-02-02 12:36:09.635 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.MessageMapper.findByReplayId     : <==      Total: 0
2021-02-02 12:36:09.636  INFO 21428 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Result : message::messageList
2021-02-02 12:36:12.165  INFO 21428 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 12:36:12.167 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 12:36:12.167 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 12:36:12.168 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 12:36:12.168 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 12:36:12.168 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 12:36:12.170 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 12:36:12.173 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 12:36:12.174 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 12:36:12.177 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 12:36:12.178 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 12:36:12.179 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 12:36:12.181 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 12:36:12.182 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 12:36:12.182 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 12:36:12.183 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 12:36:12.184 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 12:36:12.184 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 12:36:12.185 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 12:36:12.185  INFO 21428 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 12:47:51.271  INFO 21428 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/archives', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.ArchiveShowController.archive', args=[{count=Count(id=null, count=null, createTime=null), org.springframework.validation.BindingResult.count=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, Count(id=null, count=null, createTime=null)]}
2021-02-02 12:47:51.274 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.findGroupYear         : ==>  Preparing: select date_format(b.create_time,'%Y') year from t_blog b group by year order by year desc
2021-02-02 12:47:51.275 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.findGroupYear         : ==> Parameters: 
2021-02-02 12:47:51.276 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.findGroupYear         : <==      Total: 1
2021-02-02 12:47:51.277 DEBUG 21428 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.findByYear   : ==>  Preparing: select b.id bid, b.title, b.create_time, b.flag,t.name from t_blog b, t_type t where date_format(b.create_time,'%Y')=? and b.type_id=t.id order by b.create_time desc
2021-02-02 12:47:51.277 DEBUG 21428 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.findByYear   : ==> Parameters: 2021(String)
2021-02-02 12:47:51.279 DEBUG 21428 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.findByYear   : <==      Total: 1
2021-02-02 12:47:51.281 DEBUG 21428 --- [http-nio-8080-exec-8] com.personblog.dao.BlogMapper.count      : ==>  Preparing: select count(*) from t_blog
2021-02-02 12:47:51.282 DEBUG 21428 --- [http-nio-8080-exec-8] com.personblog.dao.BlogMapper.count      : ==> Parameters: 
2021-02-02 12:47:51.284 DEBUG 21428 --- [http-nio-8080-exec-8] com.personblog.dao.BlogMapper.count      : <==      Total: 1
2021-02-02 12:47:51.288 DEBUG 21428 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.deleteCount  : ==>  Preparing: delete from t_count
2021-02-02 12:47:51.289 DEBUG 21428 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.deleteCount  : ==> Parameters: 
2021-02-02 12:47:51.291 DEBUG 21428 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.deleteCount  : <==    Updates: 1
2021-02-02 12:47:51.291 DEBUG 21428 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.insertCount  : ==>  Preparing: insert into t_count(count,create_time) (select count(*) count, create_time from t_blog GROUP BY year(create_time),month(create_time) order by create_time desc)
2021-02-02 12:47:51.292 DEBUG 21428 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.insertCount  : ==> Parameters: 
2021-02-02 12:47:51.297 DEBUG 21428 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.insertCount  : <==    Updates: 1
2021-02-02 12:47:51.298 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.findGroupYear2        : ==>  Preparing: select date_format(t_count.create_time,'%Y年%m月') year1 from t_count GROUP BY year1 order by year1 desc
2021-02-02 12:47:51.299 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.findGroupYear2        : ==> Parameters: 
2021-02-02 12:47:51.301 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.findGroupYear2        : <==      Total: 1
2021-02-02 12:47:51.302 DEBUG 21428 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.findByYear2  : ==>  Preparing: select c.id,c.count,c.create_time from t_count c where date_format(c.create_time,'%Y年%m月')=? order by c.create_time desc
2021-02-02 12:47:51.303 DEBUG 21428 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.findByYear2  : ==> Parameters: 2021年02月(String)
2021-02-02 12:47:51.304 DEBUG 21428 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.findByYear2  : <==      Total: 1
2021-02-02 12:47:51.305  INFO 21428 --- [http-nio-8080-exec-8] c.p.service.impl.BlogServiceImpl         : {2021年02月=[Count(id=121, count=1, createTime=Tue Feb 02 11:37:43 CST 2021)]}
2021-02-02 12:47:51.307  INFO 21428 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : archives
2021-02-02 12:50:44.357  INFO 21428 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/archives', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.ArchiveShowController.archive', args=[{count=Count(id=null, count=null, createTime=null), org.springframework.validation.BindingResult.count=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, Count(id=null, count=null, createTime=null)]}
2021-02-02 12:50:44.358 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.findGroupYear         : ==>  Preparing: select date_format(b.create_time,'%Y') year from t_blog b group by year order by year desc
2021-02-02 12:50:44.359 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.findGroupYear         : ==> Parameters: 
2021-02-02 12:50:44.360 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.findGroupYear         : <==      Total: 1
2021-02-02 12:50:44.362 DEBUG 21428 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.findByYear   : ==>  Preparing: select b.id bid, b.title, b.create_time, b.flag,t.name from t_blog b, t_type t where date_format(b.create_time,'%Y')=? and b.type_id=t.id order by b.create_time desc
2021-02-02 12:50:44.363 DEBUG 21428 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.findByYear   : ==> Parameters: 2021(String)
2021-02-02 12:50:44.367 DEBUG 21428 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.findByYear   : <==      Total: 1
2021-02-02 12:50:44.368 DEBUG 21428 --- [http-nio-8080-exec-6] com.personblog.dao.BlogMapper.count      : ==>  Preparing: select count(*) from t_blog
2021-02-02 12:50:44.368 DEBUG 21428 --- [http-nio-8080-exec-6] com.personblog.dao.BlogMapper.count      : ==> Parameters: 
2021-02-02 12:50:44.369 DEBUG 21428 --- [http-nio-8080-exec-6] com.personblog.dao.BlogMapper.count      : <==      Total: 1
2021-02-02 12:50:44.371 DEBUG 21428 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.deleteCount  : ==>  Preparing: delete from t_count
2021-02-02 12:50:44.371 DEBUG 21428 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.deleteCount  : ==> Parameters: 
2021-02-02 12:50:44.371 DEBUG 21428 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.deleteCount  : <==    Updates: 1
2021-02-02 12:50:44.371 DEBUG 21428 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.insertCount  : ==>  Preparing: insert into t_count(count,create_time) (select count(*) count, create_time from t_blog GROUP BY year(create_time),month(create_time) order by create_time desc)
2021-02-02 12:50:44.371 DEBUG 21428 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.insertCount  : ==> Parameters: 
2021-02-02 12:50:44.376 DEBUG 21428 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.insertCount  : <==    Updates: 1
2021-02-02 12:50:44.378 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.findGroupYear2        : ==>  Preparing: select date_format(t_count.create_time,'%Y年%m月') year1 from t_count GROUP BY year1 order by year1 desc
2021-02-02 12:50:44.379 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.findGroupYear2        : ==> Parameters: 
2021-02-02 12:50:44.381 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.findGroupYear2        : <==      Total: 1
2021-02-02 12:50:44.382 DEBUG 21428 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.findByYear2  : ==>  Preparing: select c.id,c.count,c.create_time from t_count c where date_format(c.create_time,'%Y年%m月')=? order by c.create_time desc
2021-02-02 12:50:44.383 DEBUG 21428 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.findByYear2  : ==> Parameters: 2021年02月(String)
2021-02-02 12:50:44.384 DEBUG 21428 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.findByYear2  : <==      Total: 1
2021-02-02 12:50:44.385  INFO 21428 --- [http-nio-8080-exec-6] c.p.service.impl.BlogServiceImpl         : {2021年02月=[Count(id=122, count=1, createTime=Tue Feb 02 11:37:43 CST 2021)]}
2021-02-02 12:50:44.387  INFO 21428 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : archives
2021-02-02 12:50:46.605  INFO 21428 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 12:50:46.611 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 12:50:46.612 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 12:50:46.613 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 12:50:46.615 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 12:50:46.616 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 12:50:46.633 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 12:50:46.634 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 12:50:46.635 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 12:50:46.635 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 12:50:46.636 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 12:50:46.636 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 12:50:46.637 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 12:50:46.638 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 12:50:46.638 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 12:50:46.639 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 12:50:46.640 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 12:50:46.640 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 12:50:46.641 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 12:50:46.642  INFO 21428 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 12:51:40.215 DEBUG 21428 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : ==>  Preparing: select username, password from t_user where username=? and password=?;
2021-02-02 12:51:40.216 DEBUG 21428 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 12:51:40.217 DEBUG 21428 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 12:57:13.514  INFO 21428 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 12:57:13.521 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 12:57:13.522 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 12:57:13.524 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 12:57:13.524 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 12:57:13.524 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 12:57:13.526 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 12:57:13.530 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 12:57:13.531 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 12:57:13.533 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 12:57:13.535 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 12:57:13.535 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 12:57:13.536 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 12:57:13.537 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 12:57:13.538 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 12:57:13.539 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 12:57:13.540 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 12:57:13.541 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 12:57:13.542 DEBUG 21428 --- [http-nio-8080-exec-2] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 12:57:13.543  INFO 21428 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 12:58:14.752  INFO 21428 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 12:58:14.760 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 12:58:14.760 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 12:58:14.762 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 12:58:14.762 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 12:58:14.762 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 12:58:14.764 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 12:58:14.766 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 12:58:14.766 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 12:58:14.767 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 12:58:14.769 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 12:58:14.770 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 12:58:14.773 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 12:58:14.777 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 12:58:14.777 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 12:58:14.780 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 12:58:14.781 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 12:58:14.781 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 12:58:14.782 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 12:58:14.782  INFO 21428 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 13:00:06.436  INFO 21428 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 13:00:06.441 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 13:00:06.442 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 13:00:06.444 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 13:00:06.444 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 13:00:06.444 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 13:00:06.446 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 13:00:06.447 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 13:00:06.448 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 13:00:06.448 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 13:00:06.449 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 13:00:06.450 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 13:00:06.450 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 13:00:06.451 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 13:00:06.451 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 13:00:06.452 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 13:00:06.453 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 13:00:06.453 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 13:00:06.458 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 13:00:06.458  INFO 21428 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 13:00:44.127  INFO 21428 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 13:00:44.129 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 13:00:44.129 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 13:00:44.130 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 13:00:44.130 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 13:00:44.130 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 13:00:44.131 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 13:00:44.132 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 13:00:44.133 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 13:00:44.135 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 13:00:44.138 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 13:00:44.138 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 13:00:44.139 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 13:00:44.140 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 13:00:44.141 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 13:00:44.142 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 13:00:44.143 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 13:00:44.143 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 13:00:44.144 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 13:00:44.144  INFO 21428 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 13:01:11.049  INFO 21428 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 13:01:11.054 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 13:01:11.054 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 13:01:11.055 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 13:01:11.055 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 13:01:11.056 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 13:01:11.057 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 13:01:11.058 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 13:01:11.059 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 13:01:11.059 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 13:01:11.060 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 13:01:11.060 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 13:01:11.061 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 13:01:11.064 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 13:01:11.064 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 13:01:11.067 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 13:01:11.068 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 13:01:11.069 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 13:01:11.069 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 13:01:11.069  INFO 21428 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 13:02:42.290  INFO 21428 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 13:02:42.293 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 13:02:42.293 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 13:02:42.294 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 13:02:42.295 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 13:02:42.295 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 13:02:42.296 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 13:02:42.298 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 13:02:42.298 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 13:02:42.299 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 13:02:42.300 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 13:02:42.300 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 13:02:42.302 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 13:02:42.304 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 13:02:42.305 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 13:02:42.306 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 13:02:42.308 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 13:02:42.308 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 13:02:42.309 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 13:02:42.309  INFO 21428 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 13:03:38.160  INFO 21428 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 13:03:38.167 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 13:03:38.167 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 13:03:38.168 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 13:03:38.169 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 13:03:38.169 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 13:03:38.170 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 13:03:38.172 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 13:03:38.172 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 13:03:38.172 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 13:03:38.174 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 13:03:38.174 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 13:03:38.175 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 13:03:38.176 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 13:03:38.177 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 13:03:38.179 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 13:03:38.182 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 13:03:38.183 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 13:03:38.184 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 13:03:38.184  INFO 21428 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 13:04:19.588  INFO 21428 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 13:04:19.594 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 13:04:19.594 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 13:04:19.595 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 13:04:19.595 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 13:04:19.596 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 13:04:19.597 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 13:04:19.598 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 13:04:19.598 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 13:04:19.599 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 13:04:19.600 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 13:04:19.600 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 13:04:19.601 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 13:04:19.602 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 13:04:19.602 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 13:04:19.603 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 13:04:19.605 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 13:04:19.606 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 13:04:19.609 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 13:04:19.610  INFO 21428 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 13:04:42.800  INFO 21428 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 13:04:42.807 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 13:04:42.808 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 13:04:42.809 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 13:04:42.810 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 13:04:42.810 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 13:04:42.812 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 13:04:42.813 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 13:04:42.814 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 13:04:42.815 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 13:04:42.816 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 13:04:42.816 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 13:04:42.817 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 13:04:42.818 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 13:04:42.818 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 13:04:42.822 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 13:04:42.825 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 13:04:42.825 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 13:04:42.826 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 13:04:42.826  INFO 21428 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 13:05:27.998  INFO 21428 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/types/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TypeShowController.typeShow', args=[{}, -1, 1]}
2021-02-02 13:05:28.000 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 13:05:28.001 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 13:05:28.002 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 13:05:28.004 DEBUG 21428 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getByTypeId  : ==>  Preparing: select b.id,b.title,b.flag,b.first_picture,b.published,b.views,b.update_time,b.description, t.id tid,t.name, b.comment_count, b.type_id, u.nickname, u.avatar from t_blog b join t_user u on b.user_id=u.id join t_type t on t.id=b.type_id and b.type_id = ? order by b.update_time desc
2021-02-02 13:05:28.004 DEBUG 21428 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getByTypeId  : ==> Parameters: 25(Long)
2021-02-02 13:05:28.016 DEBUG 21428 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getByTypeId  : <==      Total: 1
2021-02-02 13:05:28.017  INFO 21428 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : types
2021-02-02 13:05:32.010  INFO 21428 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 13:05:32.013 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 13:05:32.013 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 13:05:32.015 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 13:05:32.016 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 13:05:32.017 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 13:05:32.018 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 13:05:32.020 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 13:05:32.020 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 13:05:32.021 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 13:05:32.022 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 13:05:32.023 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 13:05:32.023 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 13:05:32.024 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 13:05:32.024 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 13:05:32.025 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 13:05:32.025 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 13:05:32.025 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 13:05:32.026 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 13:05:32.026  INFO 21428 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 13:05:49.136  INFO 21428 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 13:05:49.138 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 13:05:49.138 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 13:05:49.139 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 13:05:49.139 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 13:05:49.139 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 13:05:49.140 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 13:05:49.141 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 13:05:49.141 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 13:05:49.143 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 13:05:49.148 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 13:05:49.149 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 13:05:49.150 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 13:05:49.152 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 13:05:49.152 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 13:05:49.153 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 13:05:49.154 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 13:05:49.155 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 13:05:49.155 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 13:05:49.155  INFO 21428 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 13:06:05.074  INFO 21428 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 13:06:05.084 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 13:06:05.085 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 13:06:05.086 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 13:06:05.087 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 13:06:05.087 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 13:06:05.089 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 13:06:05.090 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 13:06:05.090 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 13:06:05.092 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 13:06:05.095 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 13:06:05.095 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 13:06:05.097 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 13:06:05.098 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 13:06:05.098 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 13:06:05.099 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 13:06:05.099 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 13:06:05.099 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 13:06:05.100 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 13:06:05.100  INFO 21428 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 13:06:25.287  INFO 21428 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 13:06:25.289 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 13:06:25.291 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 13:06:25.295 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 13:06:25.296 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 13:06:25.296 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 13:06:25.298 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 13:06:25.299 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 13:06:25.300 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 13:06:25.301 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 13:06:25.302 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 13:06:25.302 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 13:06:25.303 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 13:06:25.305 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 13:06:25.305 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 13:06:25.308 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 13:06:25.312 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 13:06:25.312 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 13:06:25.313 DEBUG 21428 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 13:06:25.313  INFO 21428 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 13:06:40.300  INFO 21428 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 13:06:40.303 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 13:06:40.303 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 13:06:40.304 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 13:06:40.306 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 13:06:40.306 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 13:06:40.309 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 13:06:40.311 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 13:06:40.311 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 13:06:40.312 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 13:06:40.314 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 13:06:40.314 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 13:06:40.315 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 13:06:40.318 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 13:06:40.318 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 13:06:40.319 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 13:06:40.320 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 13:06:40.321 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 13:06:40.324 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 13:06:40.325  INFO 21428 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 13:07:00.800  INFO 21428 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 13:07:00.804 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 13:07:00.804 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 13:07:00.806 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 13:07:00.807 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 13:07:00.808 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 13:07:00.810 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 13:07:00.811 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 13:07:00.812 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 13:07:00.812 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 13:07:00.813 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 13:07:00.814 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 13:07:00.815 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 13:07:00.816 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 13:07:00.816 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 13:07:00.817 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 13:07:00.817 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 13:07:00.817 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 13:07:00.818 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 13:07:00.819  INFO 21428 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 13:09:15.109  INFO 21428 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 13:09:15.112 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 13:09:15.112 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 13:09:15.113 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 13:09:15.114 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 13:09:15.114 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 13:09:15.115 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 13:09:15.116 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 13:09:15.116 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 13:09:15.117 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 13:09:15.121 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 13:09:15.121 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 13:09:15.124 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 13:09:15.125 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 13:09:15.125 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 13:09:15.126 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 13:09:15.127 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 13:09:15.127 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 13:09:15.127 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 13:09:15.127  INFO 21428 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 13:10:48.061  INFO 21428 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 13:10:48.064 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 13:10:48.064 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 13:10:48.065 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 13:10:48.065 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 13:10:48.065 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 13:10:48.068 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 13:10:48.069 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 13:10:48.070 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 13:10:48.071 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 13:10:48.076 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 13:10:48.077 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 13:10:48.078 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 13:10:48.080 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 13:10:48.080 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 13:10:48.081 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 13:10:48.082 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 13:10:48.082 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 13:10:48.083 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 13:10:48.083  INFO 21428 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 13:12:12.542  INFO 21428 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 13:12:12.544 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 13:12:12.544 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 13:12:12.549 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 13:12:12.550 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 13:12:12.551 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 13:12:12.552 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 13:12:12.553 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 13:12:12.553 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 13:12:12.553 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 13:12:12.554 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 13:12:12.554 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 13:12:12.555 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 13:12:12.556 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 13:12:12.556 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 13:12:12.557 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 13:12:12.558 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 13:12:12.558 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 13:12:12.559 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 13:12:12.559  INFO 21428 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 13:12:18.117  INFO 21428 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[28, {}]}
2021-02-02 13:12:18.118 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 13:12:18.119 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 28(Long)
2021-02-02 13:12:18.122 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 13:12:18.140 DEBUG 21428 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 13:12:18.140 DEBUG 21428 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 28(Long)
2021-02-02 13:12:18.144 DEBUG 21428 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 13:12:18.144 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 13:12:18.144 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 28(Long), 28(Long), 28(Long)
2021-02-02 13:12:18.146 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 13:12:18.148 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 13:12:18.148 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 13:12:18.150 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 2
2021-02-02 13:12:18.150 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 13:12:18.150 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 20(Long)
2021-02-02 13:12:18.151 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 13:12:18.151 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 13:12:18.151 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 21(Long)
2021-02-02 13:12:18.152 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 13:12:18.152 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 13:12:18.153 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 18(Long)
2021-02-02 13:12:18.153 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 13:12:18.154 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 13:12:18.154 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 19(Long)
2021-02-02 13:12:18.154 DEBUG 21428 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 13:12:18.154  INFO 21428 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 13:12:19.102  INFO 21428 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[28, {}]}
2021-02-02 13:12:19.103 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 13:12:19.103 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 13:12:19.104 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 2
2021-02-02 13:12:19.104 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 13:12:19.105 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 20(Long)
2021-02-02 13:12:19.106 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 13:12:19.106 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 13:12:19.107 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 21(Long)
2021-02-02 13:12:19.107 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 13:12:19.108 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 13:12:19.108 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 18(Long)
2021-02-02 13:12:19.113 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 13:12:19.114 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 13:12:19.114 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 19(Long)
2021-02-02 13:12:19.115 DEBUG 21428 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 13:12:19.115  INFO 21428 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 13:12:21.921  INFO 21428 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/types/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TypeShowController.typeShow', args=[{}, -1, 1]}
2021-02-02 13:12:21.922 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 13:12:21.922 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 13:12:21.923 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 13:12:21.924 DEBUG 21428 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.getByTypeId  : ==>  Preparing: select b.id,b.title,b.flag,b.first_picture,b.published,b.views,b.update_time,b.description, t.id tid,t.name, b.comment_count, b.type_id, u.nickname, u.avatar from t_blog b join t_user u on b.user_id=u.id join t_type t on t.id=b.type_id and b.type_id = ? order by b.update_time desc
2021-02-02 13:12:21.924 DEBUG 21428 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.getByTypeId  : ==> Parameters: 25(Long)
2021-02-02 13:12:21.925 DEBUG 21428 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.getByTypeId  : <==      Total: 1
2021-02-02 13:12:21.925  INFO 21428 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : types
2021-02-02 13:12:25.881  INFO 21428 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/tags/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TagShowController.tag', args=[1, -1, {}]}
2021-02-02 13:12:25.882 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 13:12:25.882 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 13:12:25.884 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 13:12:25.885 DEBUG 21428 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getByTagId   : ==>  Preparing: select b.id,b.title,b.first_picture,b.flag,b.views,b.update_time,b.description, t.id,t.name, u.nickname, u.avatar, b.comment_count from t_blog b, t_type t,t_blog_tag tb ,t_user u,t_tag tt where b.type_id = t.id and u.id = b.user_id and tb.blog_id = b.id and tb.tag_id = tt.id and tb.tag_id = ? order by b.update_time desc
2021-02-02 13:12:25.886 DEBUG 21428 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getByTagId   : ==> Parameters: 18(Long)
2021-02-02 13:12:25.887 DEBUG 21428 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getByTagId   : <==      Total: 1
2021-02-02 13:12:25.888  INFO 21428 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : tags
2021-02-02 13:12:27.386  INFO 21428 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 13:12:27.388 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 13:12:27.389 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 13:12:27.389 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 13:12:27.390 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 13:12:27.390 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 13:12:27.391 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 13:12:27.393 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 13:12:27.394 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 13:12:27.395 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 13:12:27.397 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 13:12:27.397 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 13:12:27.398 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 13:12:27.400 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 13:12:27.400 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 13:12:27.401 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 13:12:27.401 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 13:12:27.401 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 13:12:27.402 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 13:12:27.402  INFO 21428 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 13:14:36.090  INFO 21428 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 13:14:36.092 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 13:14:36.092 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 13:14:36.094 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 13:14:36.095 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 13:14:36.096 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 13:14:36.098 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 13:14:36.099 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 13:14:36.099 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 13:14:36.100 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 13:14:36.101 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 13:14:36.101 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 13:14:36.102 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 13:14:36.103 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 13:14:36.103 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 13:14:36.104 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 13:14:36.104 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 13:14:36.105 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 13:14:36.105 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 13:14:36.105  INFO 21428 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 13:16:13.434 DEBUG 21428 --- [http-nio-8080-exec-9] com.personblog.dao.UserMapper.login      : ==>  Preparing: select username, password from t_user where username=? and password=?;
2021-02-02 13:16:13.435 DEBUG 21428 --- [http-nio-8080-exec-9] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 13:16:13.437 DEBUG 21428 --- [http-nio-8080-exec-9] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 13:16:37.735 DEBUG 21428 --- [http-nio-8080-exec-5] com.personblog.dao.UserMapper.login      : ==>  Preparing: select username, password from t_user where username=? and password=?;
2021-02-02 13:16:37.736 DEBUG 21428 --- [http-nio-8080-exec-5] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 13:16:37.736 DEBUG 21428 --- [http-nio-8080-exec-5] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 13:20:07.605 DEBUG 21428 --- [http-nio-8080-exec-1] com.personblog.dao.UserMapper.login      : ==>  Preparing: select username, password from t_user where username=? and password=?;
2021-02-02 13:20:07.606 DEBUG 21428 --- [http-nio-8080-exec-1] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 13:20:07.607 DEBUG 21428 --- [http-nio-8080-exec-1] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 13:20:12.174 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 13:20:12.175 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 13:20:12.176 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 13:20:12.177 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 13:20:12.178 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 13:20:12.179 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 13:20:12.180 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 13:20:12.180 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 13:20:12.181 DEBUG 21428 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 13:20:15.553 DEBUG 21428 --- [http-nio-8080-exec-10] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 13:20:15.553 DEBUG 21428 --- [http-nio-8080-exec-10] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 13:20:15.554 DEBUG 21428 --- [http-nio-8080-exec-10] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 13:20:15.555 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 13:20:15.555 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 13:20:15.556 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 13:38:17.158 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 13:38:17.158 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 13:38:17.159 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 13:38:17.160 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 13:38:17.160 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 13:38:17.161 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 13:38:17.162 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 13:38:17.163 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 13:38:17.163 DEBUG 21428 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 13:38:18.101 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 13:38:18.102 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 13:38:18.102 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 13:38:18.102 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 13:38:18.102 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 13:38:18.103 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 13:38:44.189 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 13:38:44.189 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 13:38:44.189 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 13:38:44.190 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 13:38:44.190 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 13:38:44.193 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 13:38:44.195 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 13:38:44.196 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 13:38:44.196 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 15:31:01.397  INFO 21428 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[28, {}]}
2021-02-02 15:31:01.406 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 15:31:01.408 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 28(Long)
2021-02-02 15:31:01.437 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 15:31:01.453 DEBUG 21428 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 15:31:01.453 DEBUG 21428 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 28(Long)
2021-02-02 15:31:01.459 DEBUG 21428 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 15:31:01.462 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 15:31:01.462 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 28(Long), 28(Long), 28(Long)
2021-02-02 15:31:01.467 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 15:31:01.471 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 15:31:01.471 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 15:31:01.476 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 2
2021-02-02 15:31:01.476 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 15:31:01.476 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 20(Long)
2021-02-02 15:31:01.477 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 15:31:01.478 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 15:31:01.478 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 21(Long)
2021-02-02 15:31:01.479 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 15:31:01.480 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 15:31:01.480 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 18(Long)
2021-02-02 15:31:01.484 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 15:31:01.484 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 15:31:01.484 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 19(Long)
2021-02-02 15:31:01.485 DEBUG 21428 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 15:31:01.485  INFO 21428 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 15:31:02.422  INFO 21428 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[28, {}]}
2021-02-02 15:31:02.422 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 15:31:02.423 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 15:31:02.424 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 2
2021-02-02 15:31:02.424 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 15:31:02.424 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 20(Long)
2021-02-02 15:31:02.425 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 15:31:02.426 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 15:31:02.426 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 21(Long)
2021-02-02 15:31:02.426 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 15:31:02.427 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 15:31:02.427 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 18(Long)
2021-02-02 15:31:02.428 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 15:31:02.428 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 15:31:02.428 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 19(Long)
2021-02-02 15:31:02.429 DEBUG 21428 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 15:31:02.429  INFO 21428 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 15:31:06.070  INFO 21428 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/29', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[29, {}]}
2021-02-02 15:31:06.071 DEBUG 21428 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 15:31:06.071 DEBUG 21428 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 29(Long)
2021-02-02 15:31:06.072 DEBUG 21428 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 0
2021-02-02 15:31:06.125 ERROR 21428 --- [http-nio-8080-exec-9] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/blog/29, Exception : {}

com.personblog.exception.NotFoundException: 该博客不存在
	at com.personblog.service.impl.BlogServiceImpl.getDetailedBlog(BlogServiceImpl.java:127)
	at com.personblog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$edbaedc8.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:367)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.personblog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$8db66f04.getDetailedBlog(<generated>)
	at com.personblog.controller.IndexController.blog(IndexController.java:65)
	at com.personblog.controller.IndexController$$FastClassBySpringCGLIB$$7f9820c6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.personblog.controller.IndexController$$EnhancerBySpringCGLIB$$2673ec2e.blog(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-02-02 15:31:06.142  WARN 21428 --- [http-nio-8080-exec-9] .w.s.m.a.ResponseStatusExceptionResolver : Resolved [com.personblog.exception.NotFoundException: 该博客不存在]
2021-02-02 15:32:28.881  INFO 27900 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 27900 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 15:32:28.884 DEBUG 27900 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 15:32:28.884  INFO 27900 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 15:32:28.960  INFO 27900 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 15:32:28.960  INFO 27900 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 15:32:30.362  INFO 27900 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 15:32:30.370  INFO 27900 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 15:32:30.371  INFO 27900 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 15:32:30.458  INFO 27900 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 15:32:30.459  INFO 27900 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1499 ms
2021-02-02 15:32:31.080  INFO 27900 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 15:32:31.164  INFO 27900 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 15:32:31.466  INFO 27900 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 15:32:31.512  INFO 27900 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 15:32:31.522  INFO 27900 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 3.509 seconds (JVM running for 4.798)
2021-02-02 15:32:37.611  INFO 27900 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 15:32:37.612  INFO 27900 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 15:32:37.626  INFO 27900 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 14 ms
2021-02-02 15:32:37.662  INFO 27900 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/about', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.AboutShowController.about', args=[]}
2021-02-02 15:32:37.680 ERROR 27900 --- [http-nio-8080-exec-1] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/about, Exception : {}

java.lang.ArithmeticException: / by zero
	at com.personblog.controller.AboutShowController.about(AboutShowController.java:12)
	at com.personblog.controller.AboutShowController$$FastClassBySpringCGLIB$$5898721e.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.personblog.controller.AboutShowController$$EnhancerBySpringCGLIB$$afc4266e.about(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-02-02 15:32:37.683  WARN 27900 --- [http-nio-8080-exec-1] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.ArithmeticException: / by zero]
2021-02-02 15:39:32.392  INFO 15476 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 15476 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 15:39:32.395 DEBUG 15476 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 15:39:32.395  INFO 15476 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 15:39:32.454  INFO 15476 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 15:39:32.454  INFO 15476 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 15:39:33.707  INFO 15476 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 15:39:33.715  INFO 15476 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 15:39:33.715  INFO 15476 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 15:39:33.806  INFO 15476 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 15:39:33.807  INFO 15476 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1353 ms
2021-02-02 15:39:34.425  INFO 15476 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 15:39:34.514  INFO 15476 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 15:39:34.811  INFO 15476 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 15:39:34.843  INFO 15476 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 15:39:34.853  INFO 15476 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 3.14 seconds (JVM running for 4.422)
2021-02-02 15:39:41.094  INFO 15476 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 15:39:41.095  INFO 15476 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 15:39:41.103  INFO 15476 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 8 ms
2021-02-02 15:39:41.129  INFO 15476 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 15:39:41.138  INFO 15476 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 15:39:41.299  INFO 15476 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 15:39:41.367 DEBUG 15476 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 15:39:41.384 DEBUG 15476 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 15:39:41.395 DEBUG 15476 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 15:39:41.397 DEBUG 15476 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 15:39:41.398 DEBUG 15476 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 15:39:41.400 DEBUG 15476 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 15:39:41.404 DEBUG 15476 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 15:39:41.404 DEBUG 15476 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 15:39:41.405 DEBUG 15476 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 15:39:41.410 DEBUG 15476 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 15:39:41.410 DEBUG 15476 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 15:39:41.413 DEBUG 15476 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 15:39:41.419 DEBUG 15476 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 15:39:41.420 DEBUG 15476 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 15:39:41.424 DEBUG 15476 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 15:39:41.427 DEBUG 15476 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 15:39:41.427 DEBUG 15476 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 15:39:41.431 DEBUG 15476 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 15:39:41.432  INFO 15476 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 15:39:54.690 DEBUG 15476 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : ==>  Preparing: select username, password from t_user where username=? and password=?;
2021-02-02 15:39:54.690 DEBUG 15476 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 15:39:54.692 DEBUG 15476 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 15:39:56.305 ERROR 15476 --- [http-nio-8080-exec-4] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/admin/blogs, Exception : {}

java.lang.ArithmeticException: / by zero
	at com.personblog.service.impl.BlogServiceImpl.getAllBlog(BlogServiceImpl.java:33)
	at com.personblog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$edbaedc8.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:367)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.personblog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$3a73d74b.getAllBlog(<generated>)
	at com.personblog.controller.admin.BlogController.list(BlogController.java:45)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-02-02 15:39:56.306  WARN 15476 --- [http-nio-8080-exec-4] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.ArithmeticException: / by zero]
2021-02-02 15:40:35.489  INFO 15476 --- [Thread-181] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-02-02 15:40:35.490  INFO 15476 --- [Thread-181] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2021-02-02 15:40:35.495  INFO 15476 --- [Thread-181] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2021-02-02 15:40:35.804  INFO 15476 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 15476 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 15:40:35.805 DEBUG 15476 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 15:40:35.805  INFO 15476 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 15:40:36.334  INFO 15476 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 15:40:36.335  INFO 15476 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 15:40:36.335  INFO 15476 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 15:40:36.374  INFO 15476 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 15:40:36.375  INFO 15476 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 557 ms
2021-02-02 15:40:36.744  INFO 15476 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 15:40:36.790  INFO 15476 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 15:40:37.098  INFO 15476 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 15:40:37.111  INFO 15476 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 15:40:37.116  INFO 15476 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 1.413 seconds (JVM running for 66.685)
2021-02-02 15:40:37.117  INFO 15476 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2021-02-02 15:40:37.133  INFO 15476 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 15:40:37.134  INFO 15476 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 15:40:37.153  INFO 15476 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 18 ms
2021-02-02 15:40:37.156  INFO 15476 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/about', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.AboutShowController.about', args=[]}
2021-02-02 15:40:37.162  INFO 15476 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : about
2021-02-02 15:40:37.204 ERROR 15476 --- [http-nio-8080-exec-1] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8080-exec-1] Exception processing template "about": An error happened during template parsing (template: "class path resource [templates/about.html]")

org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/about.html]")
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:241)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.attoparser.ParseException: Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers (template: "about" - line 3, col 7)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:393)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 48 common frames omitted
Caused by: org.thymeleaf.exceptions.TemplateInputException: Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers (template: "about" - line 3, col 7)
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseStandalone(TemplateManager.java:250)
	at org.thymeleaf.standard.expression.FragmentExpression.resolveExecutedFragmentExpression(FragmentExpression.java:588)
	at org.thymeleaf.standard.processor.AbstractStandardFragmentInsertionTagProcessor.computeFragment(AbstractStandardFragmentInsertionTagProcessor.java:379)
	at org.thymeleaf.standard.processor.AbstractStandardFragmentInsertionTagProcessor.doProcess(AbstractStandardFragmentInsertionTagProcessor.java:110)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124)
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	... 50 common frames omitted

2021-02-02 15:40:37.210 ERROR 15476 --- [http-nio-8080-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/about.html]")] with root cause

org.thymeleaf.exceptions.TemplateInputException: Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers (template: "about" - line 3, col 7)
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseStandalone(TemplateManager.java:250)
	at org.thymeleaf.standard.expression.FragmentExpression.resolveExecutedFragmentExpression(FragmentExpression.java:588)
	at org.thymeleaf.standard.processor.AbstractStandardFragmentInsertionTagProcessor.computeFragment(AbstractStandardFragmentInsertionTagProcessor.java:379)
	at org.thymeleaf.standard.processor.AbstractStandardFragmentInsertionTagProcessor.doProcess(AbstractStandardFragmentInsertionTagProcessor.java:110)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124)
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-02-02 15:40:49.730  INFO 27548 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 27548 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 15:40:49.733 DEBUG 27548 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 15:40:49.734  INFO 27548 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 15:40:49.790  INFO 27548 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 15:40:49.790  INFO 27548 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 15:40:51.029  INFO 27548 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 15:40:51.037  INFO 27548 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 15:40:51.038  INFO 27548 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 15:40:51.120  INFO 27548 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 15:40:51.120  INFO 27548 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1330 ms
2021-02-02 15:40:51.729  INFO 27548 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 15:40:51.808  INFO 27548 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 15:40:52.094  INFO 27548 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 15:40:52.126  INFO 27548 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 15:40:52.136  INFO 27548 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 3.072 seconds (JVM running for 4.287)
2021-02-02 15:41:48.387  INFO 20204 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 20204 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 15:41:48.391 DEBUG 20204 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 15:41:48.391  INFO 20204 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 15:41:48.534  INFO 20204 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 15:41:48.535  INFO 20204 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 15:41:49.802  INFO 20204 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 15:41:49.809  INFO 20204 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 15:41:49.809  INFO 20204 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 15:41:49.877  INFO 20204 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 15:41:49.877  INFO 20204 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1342 ms
2021-02-02 15:41:50.165  WARN 20204 --- [restartedMain] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'archiveShowController': Unsatisfied dependency expressed through field 'blogService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'blogServiceImpl': Unsatisfied dependency expressed through field 'blogMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'blogMapper' defined in file [E:\PersonBlog\target\classes\com\personblog\dao\BlogMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [E:\PersonBlog\target\classes\mapper\BlogMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [E:\PersonBlog\target\classes\mapper\BlogMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.blog.vo.FirstPageBlog'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.blog.vo.FirstPageBlog
2021-02-02 15:41:50.167  INFO 20204 --- [restartedMain] o.apache.catalina.core.StandardService   : Stopping service [Tomcat]
2021-02-02 15:41:50.177  INFO 20204 --- [restartedMain] ConditionEvaluationReportLoggingListener : 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2021-02-02 15:41:50.189 ERROR 20204 --- [restartedMain] o.s.boot.SpringApplication               : Application run failed

org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'archiveShowController': Unsatisfied dependency expressed through field 'blogService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'blogServiceImpl': Unsatisfied dependency expressed through field 'blogMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'blogMapper' defined in file [E:\PersonBlog\target\classes\com\personblog\dao\BlogMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [E:\PersonBlog\target\classes\mapper\BlogMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [E:\PersonBlog\target\classes\mapper\BlogMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.blog.vo.FirstPageBlog'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.blog.vo.FirstPageBlog
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:130)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1422)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:893)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:143)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.personblog.PersonBlogApplication.main(PersonBlogApplication.java:12)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'blogServiceImpl': Unsatisfied dependency expressed through field 'blogMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'blogMapper' defined in file [E:\PersonBlog\target\classes\com\personblog\dao\BlogMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [E:\PersonBlog\target\classes\mapper\BlogMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [E:\PersonBlog\target\classes\mapper\BlogMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.blog.vo.FirstPageBlog'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.blog.vo.FirstPageBlog
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:130)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1422)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1304)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1224)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 25 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'blogMapper' defined in file [E:\PersonBlog\target\classes\com\personblog\dao\BlogMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [E:\PersonBlog\target\classes\mapper\BlogMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [E:\PersonBlog\target\classes\mapper\BlogMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.blog.vo.FirstPageBlog'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.blog.vo.FirstPageBlog
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1526)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1406)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1304)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1224)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 38 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [E:\PersonBlog\target\classes\mapper\BlogMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [E:\PersonBlog\target\classes\mapper\BlogMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.blog.vo.FirstPageBlog'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.blog.vo.FirstPageBlog
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:635)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1304)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1224)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1511)
	... 49 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [E:\PersonBlog\target\classes\mapper\BlogMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [E:\PersonBlog\target\classes\mapper\BlogMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.blog.vo.FirstPageBlog'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.blog.vo.FirstPageBlog
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 62 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [E:\PersonBlog\target\classes\mapper\BlogMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [E:\PersonBlog\target\classes\mapper\BlogMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.blog.vo.FirstPageBlog'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.blog.vo.FirstPageBlog
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:612)
	at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:490)
	at org.mybatis.spring.SqlSessionFactoryBean.getObject(SqlSessionFactoryBean.java:632)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.sqlSessionFactory(MybatisAutoConfiguration.java:180)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$3361b4b.CGLIB$sqlSessionFactory$1(<generated>)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$3361b4b$$FastClassBySpringCGLIB$$b0d3f3a7.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$3361b4b.sqlSessionFactory(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 63 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [E:\PersonBlog\target\classes\mapper\BlogMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.blog.vo.FirstPageBlog'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.blog.vo.FirstPageBlog
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:123)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:95)
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:610)
	... 76 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.blog.vo.FirstPageBlog'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.blog.vo.FirstPageBlog
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:118)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.resultMapElement(XMLMapperBuilder.java:263)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.resultMapElement(XMLMapperBuilder.java:254)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.resultMapElements(XMLMapperBuilder.java:246)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:119)
	... 78 common frames omitted
Caused by: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.blog.vo.FirstPageBlog'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.blog.vo.FirstPageBlog
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:120)
	at org.apache.ibatis.builder.BaseBuilder.resolveAlias(BaseBuilder.java:149)
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:116)
	... 82 common frames omitted
Caused by: java.lang.ClassNotFoundException: Cannot find class: com.blog.vo.FirstPageBlog
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:200)
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:89)
	at org.apache.ibatis.io.Resources.classForName(Resources.java:261)
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:116)
	... 84 common frames omitted

2021-02-02 15:42:56.526  INFO 20308 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 20308 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 15:42:56.530 DEBUG 20308 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 15:42:56.530  INFO 20308 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 15:42:56.577  INFO 20308 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 15:42:56.578  INFO 20308 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 15:42:57.869  INFO 20308 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 15:42:57.877  INFO 20308 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 15:42:57.877  INFO 20308 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 15:42:57.954  INFO 20308 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 15:42:57.955  INFO 20308 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1377 ms
2021-02-02 15:42:58.613  INFO 20308 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 15:42:58.696  INFO 20308 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 15:42:58.998  INFO 20308 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 15:42:59.037  INFO 20308 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 15:42:59.047  INFO 20308 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 3.124 seconds (JVM running for 4.39)
2021-02-02 15:43:01.170  INFO 20308 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 15:43:01.171  INFO 20308 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 15:43:01.184  INFO 20308 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 12 ms
2021-02-02 15:43:01.222  INFO 20308 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 15:43:01.236  INFO 20308 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 15:43:01.415  INFO 20308 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 15:43:01.493 DEBUG 20308 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 15:43:01.516 DEBUG 20308 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 15:43:01.533 DEBUG 20308 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 15:43:01.536 DEBUG 20308 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 15:43:01.537 DEBUG 20308 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 15:43:01.540 DEBUG 20308 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 15:43:01.544 DEBUG 20308 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 15:43:01.544 DEBUG 20308 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 15:43:01.545 DEBUG 20308 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 15:43:01.552 DEBUG 20308 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 15:43:01.552 DEBUG 20308 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 15:43:01.554 DEBUG 20308 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 15:43:01.559 DEBUG 20308 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 15:43:01.560 DEBUG 20308 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 15:43:01.563 DEBUG 20308 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 15:43:01.567 DEBUG 20308 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 15:43:01.567 DEBUG 20308 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 15:43:01.570 DEBUG 20308 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 15:43:01.571  INFO 20308 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 15:44:07.878  INFO 16552 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 16552 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 15:44:07.882 DEBUG 16552 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 15:44:07.882  INFO 16552 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 15:44:07.983  INFO 16552 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 15:44:07.983  INFO 16552 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 15:44:09.204  INFO 16552 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 15:44:09.214  INFO 16552 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 15:44:09.214  INFO 16552 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 15:44:09.305  INFO 16552 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 15:44:09.305  INFO 16552 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1322 ms
2021-02-02 15:44:09.963  INFO 16552 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 15:44:10.041  INFO 16552 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 15:44:10.355  INFO 16552 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 15:44:10.388  INFO 16552 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 15:44:10.398  INFO 16552 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 3.321 seconds (JVM running for 4.414)
2021-02-02 15:44:14.306  INFO 16552 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 15:44:14.307  INFO 16552 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 15:44:14.319  INFO 16552 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 12 ms
2021-02-02 15:44:14.368  INFO 16552 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 15:44:14.380  INFO 16552 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 15:44:14.688  INFO 16552 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 15:44:14.814 DEBUG 16552 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 15:44:14.866 DEBUG 16552 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 15:44:14.903 DEBUG 16552 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 15:44:14.909 DEBUG 16552 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 15:44:14.910 DEBUG 16552 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 15:44:14.916 DEBUG 16552 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 15:44:14.921 DEBUG 16552 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 15:44:14.922 DEBUG 16552 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 15:44:14.924 DEBUG 16552 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 15:44:14.937 DEBUG 16552 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 15:44:14.938 DEBUG 16552 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 15:44:14.957 ERROR 16552 --- [http-nio-8080-exec-1] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/, Exception : {}

org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: Error instantiating class com.personblog.entity.Blog with invalid types () or values (). Cause: java.lang.reflect.InvocationTargetException
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440)
	at com.sun.proxy.$Proxy75.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:152)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85)
	at com.sun.proxy.$Proxy81.selectAllTypeAndBlog(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy82.selectAllTypeAndBlog(Unknown Source)
	at com.personblog.service.impl.TypeServiceImpl.selectAllTypeAndBlog(TypeServiceImpl.java:51)
	at com.personblog.service.impl.TypeServiceImpl$$FastClassBySpringCGLIB$$968b5f30.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:367)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.personblog.service.impl.TypeServiceImpl$$EnhancerBySpringCGLIB$$57f8626d.selectAllTypeAndBlog(<generated>)
	at com.personblog.controller.IndexController.index(IndexController.java:46)
	at com.personblog.controller.IndexController$$FastClassBySpringCGLIB$$7f9820c6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.personblog.controller.IndexController$$EnhancerBySpringCGLIB$$10bc2de0.index(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.ibatis.reflection.ReflectionException: Error instantiating class com.personblog.entity.Blog with invalid types () or values (). Cause: java.lang.reflect.InvocationTargetException
	at org.apache.ibatis.reflection.factory.DefaultObjectFactory.instantiateClass(DefaultObjectFactory.java:88)
	at org.apache.ibatis.reflection.factory.DefaultObjectFactory.create(DefaultObjectFactory.java:53)
	at org.apache.ibatis.reflection.factory.DefaultObjectFactory.create(DefaultObjectFactory.java:45)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.createResultObject(DefaultResultSetHandler.java:655)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.createResultObject(DefaultResultSetHandler.java:630)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.getRowValue(DefaultResultSetHandler.java:425)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.applyNestedResultMappings(DefaultResultSetHandler.java:952)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.getRowValue(DefaultResultSetHandler.java:434)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValuesForNestedResultMap(DefaultResultSetHandler.java:909)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValues(DefaultResultSetHandler.java:326)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSet(DefaultResultSetHandler.java:301)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSets(DefaultResultSetHandler.java:194)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:325)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:108)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)
	at com.sun.proxy.$Proxy108.query(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	... 97 common frames omitted
Caused by: java.lang.reflect.InvocationTargetException: null
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at org.apache.ibatis.reflection.factory.DefaultObjectFactory.instantiateClass(DefaultObjectFactory.java:62)
	... 124 common frames omitted
Caused by: java.lang.ArithmeticException: / by zero
	at com.personblog.entity.Blog.<init>(Blog.java:13)
	... 129 common frames omitted

2021-02-02 15:44:14.961  WARN 16552 --- [http-nio-8080-exec-1] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: Error instantiating class com.personblog.entity.Blog with invalid types () or values (). Cause: java.lang.reflect.InvocationTargetException]
2021-02-02 15:44:41.556  INFO 23684 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 23684 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 15:44:41.559 DEBUG 23684 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 15:44:41.560  INFO 23684 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 15:44:41.709  INFO 23684 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 15:44:41.709  INFO 23684 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 15:44:43.065  INFO 23684 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 15:44:43.073  INFO 23684 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 15:44:43.073  INFO 23684 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 15:44:43.144  INFO 23684 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 15:44:43.144  INFO 23684 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1435 ms
2021-02-02 15:44:43.810  INFO 23684 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 15:44:43.886  INFO 23684 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 15:44:44.177  INFO 23684 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 15:44:44.212  INFO 23684 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 15:44:44.222  INFO 23684 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 3.421 seconds (JVM running for 4.582)
2021-02-02 15:47:14.279  INFO 23684 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 15:47:14.279  INFO 23684 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 15:47:14.287  INFO 23684 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 7 ms
2021-02-02 15:47:14.323  INFO 23684 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 15:47:14.340  INFO 23684 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 15:47:14.602  INFO 23684 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 15:47:14.702 DEBUG 23684 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 15:47:14.728 DEBUG 23684 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 15:47:14.747 DEBUG 23684 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 15:47:14.750 DEBUG 23684 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 15:47:14.751 DEBUG 23684 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 15:47:14.753 DEBUG 23684 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 15:47:14.758 DEBUG 23684 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 15:47:14.759 DEBUG 23684 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 15:47:14.760 DEBUG 23684 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 15:47:14.764 DEBUG 23684 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 15:47:14.764 DEBUG 23684 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 15:47:14.766 DEBUG 23684 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 15:47:14.770 DEBUG 23684 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 15:47:14.770 DEBUG 23684 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 15:47:14.774 DEBUG 23684 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 15:47:14.777 DEBUG 23684 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 15:47:14.777 DEBUG 23684 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 15:47:14.779 DEBUG 23684 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 15:47:14.780  INFO 23684 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 15:52:20.466  INFO 23684 --- [Thread-181] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-02-02 15:52:20.467  INFO 23684 --- [Thread-181] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2021-02-02 15:52:20.475  INFO 23684 --- [Thread-181] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2021-02-02 15:52:20.706  INFO 23684 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 23684 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 15:52:20.707 DEBUG 23684 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 15:52:20.708  INFO 23684 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 15:52:21.291  INFO 23684 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 15:52:21.292  INFO 23684 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 15:52:21.292  INFO 23684 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 15:52:21.330  INFO 23684 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 15:52:21.330  INFO 23684 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 615 ms
2021-02-02 15:52:21.690  INFO 23684 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 15:52:21.743  INFO 23684 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 15:52:21.999  INFO 23684 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 15:52:22.015  INFO 23684 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 15:52:22.019  INFO 23684 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 1.368 seconds (JVM running for 462.379)
2021-02-02 15:52:22.021  INFO 23684 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2021-02-02 15:58:11.313  INFO 23684 --- [Thread-189] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-02-02 15:58:11.559  INFO 23684 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 23684 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 15:58:11.560 DEBUG 23684 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 15:58:11.560  INFO 23684 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 15:58:12.030  INFO 23684 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 15:58:12.031  INFO 23684 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 15:58:12.031  INFO 23684 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 15:58:12.052  INFO 23684 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 15:58:12.052  INFO 23684 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 487 ms
2021-02-02 15:58:12.333  INFO 23684 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 15:58:12.364  INFO 23684 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 15:58:12.569  INFO 23684 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 15:58:12.581  INFO 23684 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 15:58:12.585  INFO 23684 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 1.071 seconds (JVM running for 812.945)
2021-02-02 15:58:12.586  INFO 23684 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2021-02-02 16:16:22.107  INFO 23684 --- [Thread-364] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-02-02 16:16:22.321  INFO 23684 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 23684 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 16:16:22.321 DEBUG 23684 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 16:16:22.321  INFO 23684 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 16:16:22.683  INFO 23684 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 16:16:22.684  INFO 23684 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 16:16:22.684  INFO 23684 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 16:16:22.701  INFO 23684 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 16:16:22.701  INFO 23684 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 377 ms
2021-02-02 16:16:22.942  INFO 23684 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 16:16:22.973  INFO 23684 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 16:16:23.177  INFO 23684 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 16:16:23.187  INFO 23684 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 16:16:23.191  INFO 23684 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 0.898 seconds (JVM running for 1903.55)
2021-02-02 16:16:23.192  INFO 23684 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2021-02-02 17:07:30.660  INFO 23684 --- [Thread-539] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-02-02 17:07:31.082  INFO 23684 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 23684 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 17:07:31.082 DEBUG 23684 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 17:07:31.082  INFO 23684 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 17:07:31.971  INFO 23684 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 17:07:31.972  INFO 23684 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 17:07:31.972  INFO 23684 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 17:07:32.000  INFO 23684 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 17:07:32.000  INFO 23684 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 915 ms
2021-02-02 17:07:32.349  INFO 23684 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 17:07:32.392  INFO 23684 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 17:07:32.604  INFO 23684 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 17:07:32.617  INFO 23684 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 17:07:32.622  INFO 23684 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 1.581 seconds (JVM running for 4972.981)
2021-02-02 17:07:32.623  INFO 23684 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2021-02-02 18:09:11.704  INFO 23684 --- [Thread-714] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-02-02 18:09:12.072  INFO 23684 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 23684 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 18:09:12.072 DEBUG 23684 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 18:09:12.072  INFO 23684 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 18:09:12.474  INFO 23684 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 18:09:12.474  INFO 23684 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 18:09:12.474  INFO 23684 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 18:09:12.497  INFO 23684 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 18:09:12.497  INFO 23684 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 422 ms
2021-02-02 18:09:12.747  INFO 23684 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 18:09:12.782  INFO 23684 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 18:09:13.041  INFO 23684 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 18:09:13.052  INFO 23684 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 18:09:13.057  INFO 23684 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 1.017 seconds (JVM running for 8674.479)
2021-02-02 18:09:13.058  INFO 23684 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2021-02-02 18:11:06.900  INFO 23684 --- [Thread-889] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-02-02 18:11:07.013  INFO 23684 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 23684 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 18:11:07.013 DEBUG 23684 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 18:11:07.014  INFO 23684 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 18:11:07.328  INFO 23684 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 18:11:07.328  INFO 23684 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 18:11:07.328  INFO 23684 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 18:11:07.344  INFO 23684 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 18:11:07.344  INFO 23684 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 328 ms
2021-02-02 18:11:07.589  INFO 23684 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 18:11:07.619  INFO 23684 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 18:11:07.792  INFO 23684 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 18:11:07.802  INFO 23684 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 18:11:07.805  INFO 23684 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 0.816 seconds (JVM running for 8789.227)
2021-02-02 18:11:07.806  INFO 23684 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2021-02-02 18:12:02.151  INFO 22804 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 22804 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 18:12:02.154 DEBUG 22804 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 18:12:02.155  INFO 22804 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 18:12:02.215  INFO 22804 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 18:12:02.215  INFO 22804 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 18:12:03.762  INFO 22804 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 18:12:03.772  INFO 22804 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 18:12:03.773  INFO 22804 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 18:12:03.864  INFO 22804 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 18:12:03.864  INFO 22804 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1649 ms
2021-02-02 18:12:04.571  INFO 22804 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 18:12:04.654  INFO 22804 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 18:12:04.979  INFO 22804 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 18:12:05.012  INFO 22804 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 18:12:05.022  INFO 22804 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 3.671 seconds (JVM running for 4.94)
2021-02-02 18:12:08.994  INFO 22804 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 18:12:08.994  INFO 22804 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 18:12:09.027  INFO 22804 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 32 ms
2021-02-02 18:12:09.086  INFO 22804 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 18:12:09.108  INFO 22804 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 18:12:09.454  INFO 22804 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 18:12:09.547 DEBUG 22804 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 18:12:09.577 DEBUG 22804 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 18:12:09.608 DEBUG 22804 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 18:12:09.613 DEBUG 22804 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 18:12:09.614 DEBUG 22804 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 18:12:09.621 DEBUG 22804 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 18:12:09.626 DEBUG 22804 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 18:12:09.627 DEBUG 22804 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 18:12:09.629 DEBUG 22804 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 18:12:09.640 DEBUG 22804 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 18:12:09.640 DEBUG 22804 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 18:12:09.644 DEBUG 22804 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 18:12:09.649 DEBUG 22804 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 18:12:09.650 DEBUG 22804 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 18:12:09.657 DEBUG 22804 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 18:12:09.665 DEBUG 22804 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 18:12:09.666 DEBUG 22804 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 18:12:09.671 DEBUG 22804 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 18:12:09.673  INFO 22804 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 18:12:15.355  INFO 22804 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/types/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TypeShowController.typeShow', args=[{}, -1, 1]}
2021-02-02 18:12:15.359 DEBUG 22804 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 18:12:15.359 DEBUG 22804 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 18:12:15.361 DEBUG 22804 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 18:12:15.363 DEBUG 22804 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getByTypeId  : ==>  Preparing: select b.id,b.title,b.flag,b.first_picture,b.published,b.views,b.update_time,b.description, t.id tid,t.name, b.comment_count, b.type_id, u.nickname, u.avatar from t_blog b join t_user u on b.user_id=u.id join t_type t on t.id=b.type_id and b.type_id = ? order by b.update_time desc
2021-02-02 18:12:15.363 DEBUG 22804 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getByTypeId  : ==> Parameters: 25(Long)
2021-02-02 18:12:15.369 DEBUG 22804 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getByTypeId  : <==      Total: 1
2021-02-02 18:12:15.371  INFO 22804 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : types
2021-02-02 18:12:22.395  INFO 22804 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[28, {}]}
2021-02-02 18:12:22.397 DEBUG 22804 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 18:12:22.397 DEBUG 22804 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 28(Long)
2021-02-02 18:12:22.404 DEBUG 22804 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 18:12:22.467 DEBUG 22804 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 18:12:22.468 DEBUG 22804 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 28(Long)
2021-02-02 18:12:22.476 DEBUG 22804 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 18:12:22.477 DEBUG 22804 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 18:12:22.477 DEBUG 22804 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 28(Long), 28(Long), 28(Long)
2021-02-02 18:12:22.483 DEBUG 22804 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 18:12:22.491 DEBUG 22804 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 18:12:22.491 DEBUG 22804 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 18:12:22.494 DEBUG 22804 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 2
2021-02-02 18:12:22.495 DEBUG 22804 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 18:12:22.495 DEBUG 22804 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 20(Long)
2021-02-02 18:12:22.496 DEBUG 22804 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 18:12:22.498 DEBUG 22804 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 18:12:22.499 DEBUG 22804 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 21(Long)
2021-02-02 18:12:22.500 DEBUG 22804 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 18:12:22.501 DEBUG 22804 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 18:12:22.502 DEBUG 22804 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 18(Long)
2021-02-02 18:12:22.503 DEBUG 22804 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 18:12:22.504 DEBUG 22804 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 18:12:22.504 DEBUG 22804 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 19(Long)
2021-02-02 18:12:22.505 DEBUG 22804 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 18:12:22.506  INFO 22804 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 18:12:23.160  INFO 22804 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[28, {}]}
2021-02-02 18:12:23.165 DEBUG 22804 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 18:12:23.165 DEBUG 22804 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 18:12:23.167 DEBUG 22804 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 2
2021-02-02 18:12:23.167 DEBUG 22804 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 18:12:23.168 DEBUG 22804 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 20(Long)
2021-02-02 18:12:23.180 DEBUG 22804 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 18:12:23.184 DEBUG 22804 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 18:12:23.184 DEBUG 22804 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 21(Long)
2021-02-02 18:12:23.185 DEBUG 22804 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 18:12:23.186 DEBUG 22804 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 18:12:23.187 DEBUG 22804 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 18(Long)
2021-02-02 18:12:23.187 DEBUG 22804 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 18:12:23.188 DEBUG 22804 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 18:12:23.188 DEBUG 22804 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 19(Long)
2021-02-02 18:12:23.189 DEBUG 22804 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 18:12:23.189  INFO 22804 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 18:12:31.544 DEBUG 22804 --- [http-nio-8080-exec-7] com.personblog.dao.UserMapper.login      : ==>  Preparing: select * from t_user where username = ? and password = ?;
2021-02-02 18:12:31.544 DEBUG 22804 --- [http-nio-8080-exec-7] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 18:12:31.548 DEBUG 22804 --- [http-nio-8080-exec-7] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 18:12:33.110 DEBUG 22804 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 18:12:33.111 DEBUG 22804 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 18:12:33.111 DEBUG 22804 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 18:12:33.116 DEBUG 22804 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 18:12:33.117 DEBUG 22804 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 18:12:33.118 DEBUG 22804 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 18:12:33.119 DEBUG 22804 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 18:12:33.119 DEBUG 22804 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 18:12:33.120 DEBUG 22804 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 18:14:20.092  INFO 22804 --- [Thread-182] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-02-02 18:14:20.092  INFO 22804 --- [Thread-182] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2021-02-02 18:14:20.097  INFO 22804 --- [Thread-182] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2021-02-02 18:14:20.318  INFO 22804 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 22804 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 18:14:20.318 DEBUG 22804 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 18:14:20.319  INFO 22804 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 18:14:20.725  INFO 22804 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 18:14:20.725  INFO 22804 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 18:14:20.725  INFO 22804 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 18:14:20.747  INFO 22804 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 18:14:20.747  INFO 22804 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 425 ms
2021-02-02 18:14:21.053  INFO 22804 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 18:14:21.085  INFO 22804 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 18:14:21.287  INFO 22804 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 18:14:21.298  INFO 22804 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 18:14:21.302  INFO 22804 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 1.04 seconds (JVM running for 141.22)
2021-02-02 18:14:21.304  INFO 22804 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2021-02-02 18:15:07.258  INFO 22804 --- [Thread-189] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-02-02 18:15:07.487  INFO 22804 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 22804 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 18:15:07.487 DEBUG 22804 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 18:15:07.487  INFO 22804 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 18:15:07.816  INFO 22804 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 18:15:07.816  INFO 22804 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 18:15:07.816  INFO 22804 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 18:15:07.834  INFO 22804 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 18:15:07.834  INFO 22804 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 344 ms
2021-02-02 18:15:08.102  INFO 22804 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 18:15:08.132  INFO 22804 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 18:15:08.313  INFO 22804 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 18:15:08.324  INFO 22804 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 18:15:08.327  INFO 22804 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 0.876 seconds (JVM running for 188.245)
2021-02-02 18:15:08.328  INFO 22804 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2021-02-02 18:17:10.673  INFO 22804 --- [Thread-364] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-02-02 18:17:11.215  INFO 22804 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 22804 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 18:17:11.216 DEBUG 22804 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 18:17:11.216  INFO 22804 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 18:17:11.914  INFO 22804 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 18:17:11.915  INFO 22804 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 18:17:11.915  INFO 22804 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 18:17:11.946  INFO 22804 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 18:17:11.946  INFO 22804 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 723 ms
2021-02-02 18:17:12.249  INFO 22804 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 18:17:12.290  INFO 22804 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 18:17:12.478  INFO 22804 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 18:17:12.488  INFO 22804 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 18:17:12.491  INFO 22804 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 1.395 seconds (JVM running for 312.409)
2021-02-02 18:17:12.492  INFO 22804 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2021-02-02 18:27:38.665  INFO 22804 --- [Thread-539] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-02-02 18:27:38.847  INFO 22804 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 22804 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 18:27:38.847 DEBUG 22804 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 18:27:38.847  INFO 22804 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 18:27:39.183  INFO 22804 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 18:27:39.184  INFO 22804 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 18:27:39.184  INFO 22804 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 18:27:39.204  INFO 22804 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 18:27:39.204  INFO 22804 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 355 ms
2021-02-02 18:27:39.565  INFO 22804 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 18:27:39.597  INFO 22804 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 18:27:39.768  INFO 22804 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 18:27:39.779  INFO 22804 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 18:27:39.783  INFO 22804 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 0.967 seconds (JVM running for 939.7)
2021-02-02 18:27:39.784  INFO 22804 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2021-02-02 18:41:37.128  INFO 33124 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 33124 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 18:41:37.131 DEBUG 33124 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 18:41:37.132  INFO 33124 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 18:41:37.186  INFO 33124 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 18:41:37.187  INFO 33124 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 18:41:38.502  INFO 33124 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 18:41:38.511  INFO 33124 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 18:41:38.511  INFO 33124 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 18:41:38.614  INFO 33124 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 18:41:38.615  INFO 33124 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1428 ms
2021-02-02 18:41:39.411  INFO 33124 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 18:41:39.496  INFO 33124 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 18:41:39.846  INFO 33124 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 18:41:39.892  INFO 33124 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 18:41:39.905  INFO 33124 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 3.645 seconds (JVM running for 4.885)
2021-02-02 18:41:44.331  INFO 33124 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 18:41:44.331  INFO 33124 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 18:41:44.340  INFO 33124 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
2021-02-02 18:41:47.218  INFO 33124 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 18:41:47.397  INFO 33124 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 18:41:47.403 DEBUG 33124 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : ==>  Preparing: select * from t_user where username = ? and password = ?;
2021-02-02 18:41:47.419 DEBUG 33124 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 18:41:47.437 DEBUG 33124 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 18:41:49.172 DEBUG 33124 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 18:41:49.175 DEBUG 33124 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 18:41:49.178 DEBUG 33124 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 18:41:49.181 DEBUG 33124 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 18:41:49.182 DEBUG 33124 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 18:41:49.184 DEBUG 33124 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 18:41:49.193 DEBUG 33124 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 18:41:49.194 DEBUG 33124 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 18:41:49.195 DEBUG 33124 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 18:41:51.102 DEBUG 33124 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 18:41:51.103 DEBUG 33124 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 18:41:51.104 DEBUG 33124 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 18:41:51.106 DEBUG 33124 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 18:41:51.108 DEBUG 33124 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 18:41:51.109 DEBUG 33124 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 18:42:20.370 DEBUG 33124 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 18:42:20.371 DEBUG 33124 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 18:42:20.373 DEBUG 33124 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 18:42:20.374 DEBUG 33124 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 18:42:20.374 DEBUG 33124 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 18:42:20.375 DEBUG 33124 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 18:42:20.381 DEBUG 33124 --- [http-nio-8080-exec-3] com.personblog.dao.BlogMapper.saveBlog   : ==>  Preparing: insert into t_blog (title, content, first_picture, flag, views, comment_count, appreciation, share_statement, commentabled, published, recommend, create_time, update_time, type_id, user_id, description, tag_ids) values (?,?,?,?,?,?,?, ?,?,?,?,?, ?,?,?,?,?)
2021-02-02 18:42:20.382 DEBUG 33124 --- [http-nio-8080-exec-3] com.personblog.dao.BlogMapper.saveBlog   : ==> Parameters: 111(String), 1111,(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), 原创(String), 0(Integer), 0(Integer), false(Boolean), false(Boolean), false(Boolean), true(Boolean), false(Boolean), 2021-02-02 18:42:20.38(Timestamp), 2021-02-02 18:42:20.38(Timestamp), 25(Long), 0(Long), 1111(String), 16(String)
2021-02-02 18:42:20.389 DEBUG 33124 --- [http-nio-8080-exec-3] com.personblog.dao.BlogMapper.saveBlog   : <==    Updates: 1
2021-02-02 18:42:20.389 DEBUG 33124 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.saveBlog!selectKey    : ==>  Preparing: SELECT LAST_INSERT_ID()
2021-02-02 18:42:20.390 DEBUG 33124 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.saveBlog!selectKey    : ==> Parameters: 
2021-02-02 18:42:20.392 DEBUG 33124 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.saveBlog!selectKey    : <==      Total: 1
2021-02-02 18:42:20.393 DEBUG 33124 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 18:42:20.393 DEBUG 33124 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 29(Long)
2021-02-02 18:42:20.394 DEBUG 33124 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 18:42:20.415 DEBUG 33124 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 18:42:20.415 DEBUG 33124 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 18:42:20.416 DEBUG 33124 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 18:42:20.418 DEBUG 33124 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 18:42:20.420 DEBUG 33124 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 18:42:20.424 DEBUG 33124 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 2
2021-02-02 18:42:20.425 DEBUG 33124 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 18:42:20.425 DEBUG 33124 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 18:42:20.425 DEBUG 33124 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 18:43:06.713 DEBUG 33124 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 18:43:06.715 DEBUG 33124 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 18:43:06.716 DEBUG 33124 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 18:43:06.717 DEBUG 33124 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 18:43:06.718 DEBUG 33124 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 18:43:06.720 DEBUG 33124 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 18:43:06.721 DEBUG 33124 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 18:43:06.721 DEBUG 33124 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 18:43:06.722 DEBUG 33124 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 18:43:09.905  INFO 33124 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/types/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TypeShowController.typeShow', args=[{}, -1, 1]}
2021-02-02 18:43:09.909 DEBUG 33124 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 18:43:09.909 DEBUG 33124 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 18:43:09.913 DEBUG 33124 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 18:43:09.917 DEBUG 33124 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getByTypeId  : ==>  Preparing: select b.id,b.title,b.flag,b.first_picture,b.published,b.views,b.update_time,b.description, t.id tid,t.name, b.comment_count, b.type_id, u.nickname, u.avatar from t_blog b join t_user u on b.user_id=u.id join t_type t on t.id=b.type_id and b.type_id = ? order by b.update_time desc
2021-02-02 18:43:09.917 DEBUG 33124 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getByTypeId  : ==> Parameters: 25(Long)
2021-02-02 18:43:09.920 DEBUG 33124 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getByTypeId  : <==      Total: 1
2021-02-02 18:43:09.921  INFO 33124 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Result : types
2021-02-02 18:44:52.052  INFO 33124 --- [Thread-181] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-02-02 18:44:52.053  INFO 33124 --- [Thread-181] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2021-02-02 18:44:52.059  INFO 33124 --- [Thread-181] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2021-02-02 18:44:52.337  INFO 33124 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 33124 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 18:44:52.337 DEBUG 33124 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 18:44:52.337  INFO 33124 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 18:44:52.955  INFO 33124 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 18:44:52.955  INFO 33124 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 18:44:52.955  INFO 33124 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 18:44:52.979  INFO 33124 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 18:44:52.979  INFO 33124 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 638 ms
2021-02-02 18:44:53.297  INFO 33124 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 18:44:53.331  INFO 33124 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 18:44:53.553  INFO 33124 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 18:44:53.564  INFO 33124 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 18:44:53.568  INFO 33124 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 1.284 seconds (JVM running for 198.548)
2021-02-02 18:44:53.570  INFO 33124 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2021-02-02 18:49:06.049  INFO 33124 --- [Thread-189] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-02-02 18:49:06.274  INFO 33124 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 33124 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 18:49:06.275 DEBUG 33124 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 18:49:06.275  INFO 33124 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 18:49:06.653  INFO 33124 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 18:49:06.654  INFO 33124 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 18:49:06.654  INFO 33124 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 18:49:06.677  INFO 33124 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 18:49:06.677  INFO 33124 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 400 ms
2021-02-02 18:49:06.997  INFO 33124 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 18:49:07.034  INFO 33124 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 18:49:07.291  INFO 33124 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 18:49:07.315  INFO 33124 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 18:49:07.319  INFO 33124 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 1.082 seconds (JVM running for 452.299)
2021-02-02 18:49:07.320  INFO 33124 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2021-02-02 18:52:44.693  INFO 33124 --- [Thread-364] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-02-02 18:52:44.946  INFO 33124 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 33124 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 18:52:44.946 DEBUG 33124 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 18:52:44.946  INFO 33124 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 18:52:45.363  INFO 33124 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 18:52:45.363  INFO 33124 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 18:52:45.363  INFO 33124 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 18:52:45.382  INFO 33124 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 18:52:45.383  INFO 33124 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 435 ms
2021-02-02 18:52:45.833  INFO 33124 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 18:52:45.865  INFO 33124 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 18:52:46.052  INFO 33124 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 18:52:46.062  INFO 33124 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 18:52:46.066  INFO 33124 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 1.156 seconds (JVM running for 671.046)
2021-02-02 18:52:46.067  INFO 33124 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2021-02-02 18:54:25.986  INFO 33932 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 33932 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 18:54:25.988 DEBUG 33932 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 18:54:25.989  INFO 33932 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 18:54:26.040  INFO 33932 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 18:54:26.041  INFO 33932 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 18:54:27.456  INFO 33932 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 18:54:27.464  INFO 33932 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 18:54:27.464  INFO 33932 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 18:54:27.558  INFO 33932 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 18:54:27.558  INFO 33932 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1517 ms
2021-02-02 18:54:28.234  INFO 33932 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 18:54:28.310  INFO 33932 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 18:54:28.612  INFO 33932 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 18:54:28.649  INFO 33932 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 18:54:28.660  INFO 33932 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 3.368 seconds (JVM running for 4.707)
2021-02-02 18:54:33.663  INFO 33932 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 18:54:33.663  INFO 33932 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 18:54:33.671  INFO 33932 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 8 ms
2021-02-02 18:54:35.690  INFO 33932 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 18:54:35.854  INFO 33932 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 18:54:35.863 DEBUG 33932 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : ==>  Preparing: select * from t_user where username = ? and password = ?;
2021-02-02 18:54:35.878 DEBUG 33932 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 18:54:35.889 DEBUG 33932 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 18:54:37.536 DEBUG 33932 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 18:54:37.537 DEBUG 33932 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 18:54:37.539 DEBUG 33932 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 18:54:37.546 DEBUG 33932 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 18:54:37.547 DEBUG 33932 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 18:54:37.549 DEBUG 33932 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 18:54:37.553 DEBUG 33932 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 18:54:37.553 DEBUG 33932 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 18:54:37.554 DEBUG 33932 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 18:54:40.008 DEBUG 33932 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 18:54:40.009 DEBUG 33932 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 28(Long)
2021-02-02 18:54:40.014 DEBUG 33932 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 18:54:40.015 DEBUG 33932 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 18:54:40.015 DEBUG 33932 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 18:54:40.015 DEBUG 33932 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 18:54:40.018 DEBUG 33932 --- [http-nio-8080-exec-10] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 18:54:40.019 DEBUG 33932 --- [http-nio-8080-exec-10] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 18:54:40.022 DEBUG 33932 --- [http-nio-8080-exec-10] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 18:54:47.664  WARN 33932 --- [http-nio-8080-exec-9] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 18:54:47.682 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 18:54:47.682 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 18:54:47.683 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 18:54:47.684 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 18:54:47.684 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 18:54:47.685 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 18:54:47.685 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 18:54:47.685 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 17(Long)
2021-02-02 18:54:47.686 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 18:54:47.686 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 18:54:47.686 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 18(Long)
2021-02-02 18:54:47.687 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 18:54:47.688 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 18:54:47.688 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 28(Long)
2021-02-02 18:54:47.695 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 3
2021-02-02 18:54:47.696 DEBUG 33932 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.updateBlog   : ==>  Preparing: update t_blog set published = ?,flag = ? , title = ?, content = ?, type_id = ?, tag_ids = ?, first_picture = ? , description = ? , recommend = ? , share_statement = ?, appreciation = ?, commentabled = ? ,update_time = ? where id = ?
2021-02-02 18:54:47.701 DEBUG 33932 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.updateBlog   : ==> Parameters: true(Boolean), 原创(String), 记录一次线上部署个人项目的流程以及遇到的坑..(String), # 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,(String), 25(Long), 16,17,18(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), 主要记录了部署个人项目的流程和过程中遇到的坑(String), true(Boolean), true(Boolean), false(Boolean), true(Boolean), 2021-02-02 18:54:47.687(Timestamp), 28(Long)
2021-02-02 18:54:47.716 DEBUG 33932 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.updateBlog   : <==    Updates: 1
2021-02-02 18:54:47.717 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 18:54:47.718 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 28(Long)
2021-02-02 18:54:47.721 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 18:54:47.721 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 18:54:47.722 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 17(Long), 28(Long)
2021-02-02 18:54:47.727 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 18:54:47.727 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 18:54:47.728 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 18(Long), 28(Long)
2021-02-02 18:54:47.731 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 18:54:47.748 DEBUG 33932 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 18:54:47.748 DEBUG 33932 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 18:54:47.749 DEBUG 33932 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 18:54:47.750 DEBUG 33932 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 18:54:47.750 DEBUG 33932 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 18:54:47.751 DEBUG 33932 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 18:54:47.752 DEBUG 33932 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 18:54:47.753 DEBUG 33932 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 18:54:47.753 DEBUG 33932 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 18:55:01.677 DEBUG 33932 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 18:55:01.678 DEBUG 33932 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 28(Long)
2021-02-02 18:55:01.680 DEBUG 33932 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 18:55:01.681 DEBUG 33932 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 18:55:01.681 DEBUG 33932 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 18:55:01.683 DEBUG 33932 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 18:55:01.684 DEBUG 33932 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 18:55:01.685 DEBUG 33932 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 18:55:01.686 DEBUG 33932 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 18:55:05.685  WARN 33932 --- [http-nio-8080-exec-9] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 18:55:05.688 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 18:55:05.689 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 18:55:05.691 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 18:55:05.691 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 18:55:05.692 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 18:55:05.692 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 18:55:05.693 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 18:55:05.693 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 17(Long)
2021-02-02 18:55:05.694 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 18:55:05.694 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 18:55:05.694 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 18(Long)
2021-02-02 18:55:05.705 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 18:55:05.706 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 18:55:05.707 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 28(Long)
2021-02-02 18:55:05.710 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 3
2021-02-02 18:55:05.711 DEBUG 33932 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.updateBlog   : ==>  Preparing: update t_blog set published = ?,flag = ? , title = ?, content = ?, type_id = ?, tag_ids = ?, first_picture = ? , description = ? , recommend = ? , share_statement = ?, appreciation = ?, commentabled = ? ,update_time = ? where id = ?
2021-02-02 18:55:05.715 DEBUG 33932 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.updateBlog   : ==> Parameters: false(Boolean), 原创(String), 记录一次线上部署个人项目的流程以及遇到的坑..(String), # 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,(String), 25(Long), 16,17,18(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), 主要记录了部署个人项目的流程和过程中遇到的坑(String), true(Boolean), true(Boolean), false(Boolean), true(Boolean), 2021-02-02 18:55:05.706(Timestamp), 28(Long)
2021-02-02 18:55:05.744 DEBUG 33932 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.updateBlog   : <==    Updates: 1
2021-02-02 18:55:05.744 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 18:55:05.744 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 28(Long)
2021-02-02 18:55:05.746 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 18:55:05.747 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 18:55:05.747 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 17(Long), 28(Long)
2021-02-02 18:55:05.749 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 18:55:05.750 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 18:55:05.750 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 18(Long), 28(Long)
2021-02-02 18:55:05.752 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 18:55:05.761 DEBUG 33932 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 18:55:05.761 DEBUG 33932 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 18:55:05.762 DEBUG 33932 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 18:55:05.763 DEBUG 33932 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 18:55:05.763 DEBUG 33932 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 18:55:05.764 DEBUG 33932 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 18:55:05.765 DEBUG 33932 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 18:55:05.765 DEBUG 33932 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 18:55:05.766 DEBUG 33932 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 18:55:10.600  INFO 33932 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/types/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TypeShowController.typeShow', args=[{}, -1, 1]}
2021-02-02 18:55:10.606 DEBUG 33932 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 18:55:10.606 DEBUG 33932 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 18:55:10.609 DEBUG 33932 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 0
2021-02-02 18:55:10.613 ERROR 33932 --- [http-nio-8080-exec-5] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/types/-1, Exception : {}

java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657)
	at java.util.ArrayList.get(ArrayList.java:433)
	at com.personblog.controller.TypeShowController.typeShow(TypeShowController.java:32)
	at com.personblog.controller.TypeShowController$$FastClassBySpringCGLIB$$9fdf3e9b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.personblog.controller.TypeShowController$$EnhancerBySpringCGLIB$$b348d085.typeShow(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-02-02 18:55:10.614  WARN 33932 --- [http-nio-8080-exec-5] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.IndexOutOfBoundsException: Index: 0, Size: 0]
2021-02-02 18:55:16.360  INFO 33932 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 18:55:16.372 DEBUG 33932 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 18:55:16.372 DEBUG 33932 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 18:55:16.372 DEBUG 33932 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 18:55:16.373 DEBUG 33932 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 18:55:16.373 DEBUG 33932 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 18:55:16.375 DEBUG 33932 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 18:55:16.375 DEBUG 33932 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 18:55:16.375 DEBUG 33932 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 18:55:16.376 DEBUG 33932 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 0
2021-02-02 18:55:16.376 DEBUG 33932 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 18:55:16.376 DEBUG 33932 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 18:55:16.377 DEBUG 33932 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 0
2021-02-02 18:55:16.380 DEBUG 33932 --- [http-nio-8080-exec-5] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 18:55:16.380 DEBUG 33932 --- [http-nio-8080-exec-5] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 18:55:16.382 DEBUG 33932 --- [http-nio-8080-exec-5] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 18:55:16.382  INFO 33932 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 18:55:23.428 DEBUG 33932 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 18:55:23.428 DEBUG 33932 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 28(Long)
2021-02-02 18:55:23.429 DEBUG 33932 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 18:55:23.430 DEBUG 33932 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 18:55:23.430 DEBUG 33932 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 18:55:23.430 DEBUG 33932 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 18:55:23.431 DEBUG 33932 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 18:55:23.431 DEBUG 33932 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 18:55:23.431 DEBUG 33932 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 18:55:30.572  WARN 33932 --- [http-nio-8080-exec-2] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 18:55:30.573 DEBUG 33932 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 18:55:30.574 DEBUG 33932 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 18:55:30.574 DEBUG 33932 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 18:55:30.575 DEBUG 33932 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 18:55:30.575 DEBUG 33932 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 18:55:30.576 DEBUG 33932 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 18:55:30.576 DEBUG 33932 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 18:55:30.577 DEBUG 33932 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 17(Long)
2021-02-02 18:55:30.577 DEBUG 33932 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 18:55:30.578 DEBUG 33932 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 18:55:30.578 DEBUG 33932 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 18(Long)
2021-02-02 18:55:30.578 DEBUG 33932 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 18:55:30.579 DEBUG 33932 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 18:55:30.579 DEBUG 33932 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 28(Long)
2021-02-02 18:55:30.580 DEBUG 33932 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 3
2021-02-02 18:55:30.581 DEBUG 33932 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.updateBlog   : ==>  Preparing: update t_blog set published = ?,flag = ? , title = ?, content = ?, type_id = ?, tag_ids = ?, first_picture = ? , description = ? , recommend = ? , share_statement = ?, appreciation = ?, commentabled = ? ,update_time = ? where id = ?
2021-02-02 18:55:30.588 DEBUG 33932 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.updateBlog   : ==> Parameters: true(Boolean), 原创(String), 记录一次线上部署个人项目的流程以及遇到的坑(String), # 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,(String), 25(Long), 16,17,18(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), 主要记录了部署个人项目的流程和过程中遇到的坑(String), true(Boolean), true(Boolean), false(Boolean), true(Boolean), 2021-02-02 18:55:30.579(Timestamp), 28(Long)
2021-02-02 18:55:30.625 DEBUG 33932 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.updateBlog   : <==    Updates: 1
2021-02-02 18:55:30.625 DEBUG 33932 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 18:55:30.625 DEBUG 33932 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 28(Long)
2021-02-02 18:55:30.628 DEBUG 33932 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 18:55:30.628 DEBUG 33932 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 18:55:30.628 DEBUG 33932 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 17(Long), 28(Long)
2021-02-02 18:55:30.630 DEBUG 33932 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 18:55:30.630 DEBUG 33932 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 18:55:30.631 DEBUG 33932 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 18(Long), 28(Long)
2021-02-02 18:55:30.635 DEBUG 33932 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 18:55:30.641 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 18:55:30.642 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 18:55:30.642 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 18:55:30.643 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 18:55:30.643 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 18:55:30.644 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 18:55:30.645 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 18:55:30.645 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 18:55:30.646 DEBUG 33932 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 18:55:40.560  INFO 33932 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 18:55:40.562 DEBUG 33932 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 18:55:40.562 DEBUG 33932 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 18:55:40.563 DEBUG 33932 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 18:55:40.563 DEBUG 33932 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 18:55:40.564 DEBUG 33932 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 18:55:40.567 DEBUG 33932 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 18:55:40.568 DEBUG 33932 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 18:55:40.569 DEBUG 33932 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 18:55:40.570 DEBUG 33932 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 18:55:40.572 DEBUG 33932 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 18:55:40.572 DEBUG 33932 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 18:55:40.575 DEBUG 33932 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 18:55:40.576 DEBUG 33932 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 18:55:40.576 DEBUG 33932 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 18:55:40.578 DEBUG 33932 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 18:55:40.578 DEBUG 33932 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 18:55:40.578 DEBUG 33932 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 18:55:40.579 DEBUG 33932 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 18:55:40.579  INFO 33932 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 19:04:12.550  INFO 33932 --- [Thread-182] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-02-02 19:04:12.552  INFO 33932 --- [Thread-182] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2021-02-02 19:04:12.560  INFO 33932 --- [Thread-182] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2021-02-02 19:04:12.883  INFO 33932 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 33932 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 19:04:12.883 DEBUG 33932 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 19:04:12.883  INFO 33932 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 19:04:13.364  INFO 33932 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 19:04:13.365  INFO 33932 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 19:04:13.365  INFO 33932 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 19:04:13.388  INFO 33932 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 19:04:13.388  INFO 33932 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 502 ms
2021-02-02 19:04:13.765  INFO 33932 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 19:04:13.823  INFO 33932 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 19:04:14.057  INFO 33932 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 19:04:14.085  INFO 33932 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 19:04:14.091  INFO 33932 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 1.263 seconds (JVM running for 590.138)
2021-02-02 19:04:14.092  INFO 33932 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2021-02-02 19:16:47.853  INFO 33932 --- [Thread-189] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-02-02 19:16:48.056  INFO 33932 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 33932 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 19:16:48.056 DEBUG 33932 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 19:16:48.056  INFO 33932 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 19:16:48.505  INFO 33932 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 19:16:48.505  INFO 33932 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 19:16:48.505  INFO 33932 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 19:16:48.525  INFO 33932 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 19:16:48.525  INFO 33932 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 467 ms
2021-02-02 19:16:48.823  INFO 33932 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 19:16:48.857  INFO 33932 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 19:16:49.057  INFO 33932 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 19:16:49.068  INFO 33932 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 19:16:49.072  INFO 33932 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 1.043 seconds (JVM running for 1345.119)
2021-02-02 19:16:49.073  INFO 33932 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2021-02-02 19:24:04.168  INFO 33932 --- [Thread-364] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-02-02 19:24:04.387  INFO 33932 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 33932 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 19:24:04.387 DEBUG 33932 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 19:24:04.388  INFO 33932 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 19:24:04.993  INFO 33932 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 19:24:04.993  INFO 33932 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 19:24:04.993  INFO 33932 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 19:24:05.017  INFO 33932 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 19:24:05.017  INFO 33932 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 627 ms
2021-02-02 19:24:05.354  INFO 33932 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 19:24:05.389  INFO 33932 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 19:24:05.569  INFO 33932 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 19:24:05.579  INFO 33932 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 19:24:05.583  INFO 33932 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 1.232 seconds (JVM running for 1781.631)
2021-02-02 19:24:05.585  INFO 33932 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2021-02-02 19:28:07.780  INFO 5552 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 5552 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 19:28:07.790 DEBUG 5552 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 19:28:07.791  INFO 5552 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 19:28:07.883  INFO 5552 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 19:28:07.884  INFO 5552 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 19:28:10.660  INFO 5552 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 19:28:10.678  INFO 5552 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 19:28:10.678  INFO 5552 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 19:28:10.895  INFO 5552 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 19:28:10.896  INFO 5552 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 3010 ms
2021-02-02 19:28:12.039  INFO 5552 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 19:28:12.153  INFO 5552 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 19:28:12.604  INFO 5552 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 19:28:12.655  INFO 5552 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 19:28:12.671  INFO 5552 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 5.991 seconds (JVM running for 8.033)
2021-02-02 19:28:15.461  INFO 5552 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 19:28:15.462  INFO 5552 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 19:28:15.479  INFO 5552 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 17 ms
2021-02-02 19:28:15.538  INFO 5552 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 19:28:15.591  INFO 5552 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 19:28:15.940  INFO 5552 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 19:28:16.013 DEBUG 5552 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 19:28:16.044 DEBUG 5552 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 19:28:16.076 DEBUG 5552 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 19:28:16.082 DEBUG 5552 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 19:28:16.085 DEBUG 5552 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 19:28:16.092 DEBUG 5552 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 19:28:16.095 DEBUG 5552 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 19:28:16.095 DEBUG 5552 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 19:28:16.097 DEBUG 5552 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 19:28:16.107 DEBUG 5552 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 19:28:16.108 DEBUG 5552 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 19:28:16.113 DEBUG 5552 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 19:28:16.125 DEBUG 5552 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 19:28:16.125 DEBUG 5552 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 19:28:16.128 DEBUG 5552 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 19:28:16.129  INFO 5552 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 19:28:22.339  INFO 5552 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/types/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TypeShowController.typeShow', args=[{}, -1, 1]}
2021-02-02 19:28:22.345 DEBUG 5552 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 19:28:22.346 DEBUG 5552 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 19:28:22.351 DEBUG 5552 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 19:28:22.354 DEBUG 5552 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getByTypeId  : ==>  Preparing: select b.id,b.title,b.flag,b.first_picture,b.published,b.views,b.update_time,b.description, t.id tid,t.name, b.comment_count, b.type_id, u.nickname, u.avatar from t_blog b join t_user u on b.user_id=u.id join t_type t on t.id=b.type_id and b.type_id = ? order by b.update_time desc
2021-02-02 19:28:22.355 DEBUG 5552 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getByTypeId  : ==> Parameters: 25(Long)
2021-02-02 19:28:22.357 DEBUG 5552 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getByTypeId  : <==      Total: 1
2021-02-02 19:28:22.357  INFO 5552 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Result : types
2021-02-02 19:28:26.406  INFO 5552 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/tags/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TagShowController.tag', args=[1, -1, {}]}
2021-02-02 19:28:26.409 DEBUG 5552 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.getByTagId   : ==>  Preparing: select b.id,b.title,b.first_picture,b.flag,b.views,b.update_time,b.description, t.id,t.name, u.nickname, u.avatar, b.comment_count from t_blog b, t_type t,t_blog_tag tb ,t_user u,t_tag tt where b.type_id = t.id and u.id = b.user_id and tb.blog_id = b.id and tb.tag_id = tt.id and tb.tag_id = ? order by b.update_time desc
2021-02-02 19:28:26.410 DEBUG 5552 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.getByTagId   : ==> Parameters: -1(Long)
2021-02-02 19:28:26.411 DEBUG 5552 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.getByTagId   : <==      Total: 0
2021-02-02 19:28:26.412  INFO 5552 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : tags
2021-02-02 19:28:26.428 ERROR 5552 --- [http-nio-8080-exec-4] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8080-exec-4] Exception processing template "tags": An error happened during template parsing (template: "class path resource [templates/tags.html]")

org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/tags.html]")
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:241)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.attoparser.ParseException: Exception evaluating SpringEL expression: "#arrays.length(tags)" (template: "tags" - line 46, col 71)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:393)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 48 common frames omitted
Caused by: org.thymeleaf.exceptions.TemplateProcessingException: Exception evaluating SpringEL expression: "#arrays.length(tags)" (template: "tags" - line 46, col 71)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:290)
	at org.thymeleaf.standard.expression.VariableExpression.executeVariableExpression(VariableExpression.java:166)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:66)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:144)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124)
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	... 50 common frames omitted
Caused by: java.lang.IllegalArgumentException: Cannot get array length of null
	at org.thymeleaf.util.Validate.notNull(Validate.java:37)
	at org.thymeleaf.util.ArrayUtils.length(ArrayUtils.java:72)
	at org.thymeleaf.expression.Arrays.length(Arrays.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.expression.spel.support.ReflectiveMethodExecutor.execute(ReflectiveMethodExecutor.java:129)
	at org.springframework.expression.spel.ast.MethodReference.getValueInternal(MethodReference.java:139)
	at org.springframework.expression.spel.ast.MethodReference.access$000(MethodReference.java:55)
	at org.springframework.expression.spel.ast.MethodReference$MethodValueRef.getValue(MethodReference.java:386)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:92)
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:337)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263)
	... 69 common frames omitted

2021-02-02 19:28:26.433 ERROR 5552 --- [http-nio-8080-exec-4] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/tags.html]")] with root cause

java.lang.IllegalArgumentException: Cannot get array length of null
	at org.thymeleaf.util.Validate.notNull(Validate.java:37)
	at org.thymeleaf.util.ArrayUtils.length(ArrayUtils.java:72)
	at org.thymeleaf.expression.Arrays.length(Arrays.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.expression.spel.support.ReflectiveMethodExecutor.execute(ReflectiveMethodExecutor.java:129)
	at org.springframework.expression.spel.ast.MethodReference.getValueInternal(MethodReference.java:139)
	at org.springframework.expression.spel.ast.MethodReference.access$000(MethodReference.java:55)
	at org.springframework.expression.spel.ast.MethodReference$MethodValueRef.getValue(MethodReference.java:386)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:92)
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:337)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263)
	at org.thymeleaf.standard.expression.VariableExpression.executeVariableExpression(VariableExpression.java:166)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:66)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:144)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124)
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-02-02 19:40:11.499  INFO 21124 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 21124 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 19:40:11.501 DEBUG 21124 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 19:40:11.502  INFO 21124 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 19:40:11.550  INFO 21124 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 19:40:11.551  INFO 21124 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 19:40:13.223  INFO 21124 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 19:40:13.234  INFO 21124 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 19:40:13.235  INFO 21124 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 19:40:13.382  INFO 21124 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 19:40:13.382  INFO 21124 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1831 ms
2021-02-02 19:40:14.117  INFO 21124 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 19:40:14.193  INFO 21124 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 19:40:14.491  INFO 21124 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 19:40:14.523  INFO 21124 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 19:40:14.533  INFO 21124 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 3.665 seconds (JVM running for 4.97)
2021-02-02 19:40:30.072  INFO 17808 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 17808 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 19:40:30.074 DEBUG 17808 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 19:40:30.074  INFO 17808 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 19:40:30.126  INFO 17808 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 19:40:30.127  INFO 17808 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 19:40:31.329  INFO 17808 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 19:40:31.336  INFO 17808 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 19:40:31.337  INFO 17808 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 19:40:31.426  INFO 17808 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 19:40:31.427  INFO 17808 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1300 ms
2021-02-02 19:40:32.069  INFO 17808 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 19:40:32.146  INFO 17808 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 19:40:32.440  INFO 17808 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 19:40:32.472  INFO 17808 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 19:40:32.482  INFO 17808 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 3.11 seconds (JVM running for 4.287)
2021-02-02 19:40:35.796  INFO 17808 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 19:40:35.796  INFO 17808 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 19:40:35.809  INFO 17808 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 13 ms
2021-02-02 19:40:35.865  INFO 17808 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/tags/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TagShowController.tag', args=[1, -1, {}]}
2021-02-02 19:40:35.893  INFO 17808 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 19:40:36.162  INFO 17808 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 19:40:36.170 DEBUG 17808 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 19:40:36.189 DEBUG 17808 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 19:40:36.209 DEBUG 17808 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 19:40:36.220 DEBUG 17808 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getByTagId   : ==>  Preparing: select b.id,b.title,b.first_picture,b.flag,b.views,b.update_time,b.description, t.id,t.name, u.nickname, u.avatar, b.comment_count from t_blog b, t_type t,t_blog_tag tb ,t_user u,t_tag tt where b.type_id = t.id and u.id = b.user_id and tb.blog_id = b.id and tb.tag_id = tt.id and tb.tag_id = ? order by b.update_time desc
2021-02-02 19:40:36.220 DEBUG 17808 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getByTagId   : ==> Parameters: 18(Long)
2021-02-02 19:40:36.225 DEBUG 17808 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getByTagId   : <==      Total: 1
2021-02-02 19:40:36.228  INFO 17808 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : tags
2021-02-02 19:40:41.289  INFO 17808 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/tags/16', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TagShowController.tag', args=[1, 16, {}]}
2021-02-02 19:40:41.291 DEBUG 17808 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 19:40:41.291 DEBUG 17808 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 19:40:41.292 DEBUG 17808 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 19:40:41.293 DEBUG 17808 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.getByTagId   : ==>  Preparing: select b.id,b.title,b.first_picture,b.flag,b.views,b.update_time,b.description, t.id,t.name, u.nickname, u.avatar, b.comment_count from t_blog b, t_type t,t_blog_tag tb ,t_user u,t_tag tt where b.type_id = t.id and u.id = b.user_id and tb.blog_id = b.id and tb.tag_id = tt.id and tb.tag_id = ? order by b.update_time desc
2021-02-02 19:40:41.294 DEBUG 17808 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.getByTagId   : ==> Parameters: 16(Long)
2021-02-02 19:40:41.295 DEBUG 17808 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.getByTagId   : <==      Total: 1
2021-02-02 19:40:41.295  INFO 17808 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : tags
2021-02-02 19:40:42.841  INFO 17808 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/tags/17', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TagShowController.tag', args=[1, 17, {}]}
2021-02-02 19:40:42.843 DEBUG 17808 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 19:40:42.844 DEBUG 17808 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 19:40:42.847 DEBUG 17808 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 19:40:42.848 DEBUG 17808 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.getByTagId   : ==>  Preparing: select b.id,b.title,b.first_picture,b.flag,b.views,b.update_time,b.description, t.id,t.name, u.nickname, u.avatar, b.comment_count from t_blog b, t_type t,t_blog_tag tb ,t_user u,t_tag tt where b.type_id = t.id and u.id = b.user_id and tb.blog_id = b.id and tb.tag_id = tt.id and tb.tag_id = ? order by b.update_time desc
2021-02-02 19:40:42.848 DEBUG 17808 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.getByTagId   : ==> Parameters: 17(Long)
2021-02-02 19:40:42.850 DEBUG 17808 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.getByTagId   : <==      Total: 1
2021-02-02 19:40:42.850  INFO 17808 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : tags
2021-02-02 19:40:44.174  INFO 17808 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/tags/18', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TagShowController.tag', args=[1, 18, {}]}
2021-02-02 19:40:44.176 DEBUG 17808 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 19:40:44.176 DEBUG 17808 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 19:40:44.178 DEBUG 17808 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 19:40:44.179 DEBUG 17808 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.getByTagId   : ==>  Preparing: select b.id,b.title,b.first_picture,b.flag,b.views,b.update_time,b.description, t.id,t.name, u.nickname, u.avatar, b.comment_count from t_blog b, t_type t,t_blog_tag tb ,t_user u,t_tag tt where b.type_id = t.id and u.id = b.user_id and tb.blog_id = b.id and tb.tag_id = tt.id and tb.tag_id = ? order by b.update_time desc
2021-02-02 19:40:44.180 DEBUG 17808 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.getByTagId   : ==> Parameters: 18(Long)
2021-02-02 19:40:44.182 DEBUG 17808 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.getByTagId   : <==      Total: 1
2021-02-02 19:40:44.182  INFO 17808 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : tags
2021-02-02 20:09:02.517  INFO 17808 --- [Thread-181] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-02-02 20:09:02.518  INFO 17808 --- [Thread-181] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2021-02-02 20:09:02.523  INFO 17808 --- [Thread-181] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2021-02-02 20:09:02.847  INFO 17808 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 17808 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 20:09:02.847 DEBUG 17808 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 20:09:02.847  INFO 17808 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 20:09:03.999  INFO 17808 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 20:09:04.000  INFO 17808 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 20:09:04.000  INFO 17808 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 20:09:04.079  INFO 17808 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 20:09:04.079  INFO 17808 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1227 ms
2021-02-02 20:09:05.129  INFO 17808 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 20:09:05.226  INFO 17808 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 20:09:05.704  INFO 17808 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 20:09:05.724  INFO 17808 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 20:09:05.728  INFO 17808 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 2.999 seconds (JVM running for 1717.533)
2021-02-02 20:09:05.729  INFO 17808 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2021-02-02 20:13:36.716  INFO 17808 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 20:13:36.718  INFO 17808 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 20:13:36.740  INFO 17808 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 21 ms
2021-02-02 20:13:36.746  INFO 17808 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[28, {}]}
2021-02-02 20:13:36.754  INFO 17808 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Starting...
2021-02-02 20:13:36.765  INFO 17808 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Start completed.
2021-02-02 20:13:36.765 DEBUG 17808 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 20:13:36.765 DEBUG 17808 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 28(Long)
2021-02-02 20:13:36.775 DEBUG 17808 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 20:13:36.888 DEBUG 17808 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 20:13:36.888 DEBUG 17808 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 28(Long)
2021-02-02 20:13:36.893 DEBUG 17808 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 20:13:36.893 DEBUG 17808 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 20:13:36.894 DEBUG 17808 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 28(Long), 28(Long), 28(Long)
2021-02-02 20:13:36.897 DEBUG 17808 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 20:13:36.908 DEBUG 17808 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:13:36.909 DEBUG 17808 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 20:13:36.911 DEBUG 17808 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 2
2021-02-02 20:13:36.911 DEBUG 17808 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:13:36.912 DEBUG 17808 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 20(Long)
2021-02-02 20:13:36.912 DEBUG 17808 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 20:13:36.913 DEBUG 17808 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:13:36.913 DEBUG 17808 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 21(Long)
2021-02-02 20:13:36.914 DEBUG 17808 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 20:13:36.914 DEBUG 17808 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:13:36.915 DEBUG 17808 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 18(Long)
2021-02-02 20:13:36.916 DEBUG 17808 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 20:13:36.916 DEBUG 17808 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:13:36.917 DEBUG 17808 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 19(Long)
2021-02-02 20:13:36.918 DEBUG 17808 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 20:13:36.921  INFO 17808 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 20:13:38.377  INFO 17808 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[28, {}]}
2021-02-02 20:13:38.381 DEBUG 17808 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:13:38.381 DEBUG 17808 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 20:13:38.383 DEBUG 17808 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 2
2021-02-02 20:13:38.384 DEBUG 17808 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:13:38.385 DEBUG 17808 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 20(Long)
2021-02-02 20:13:38.388 DEBUG 17808 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 20:13:38.389 DEBUG 17808 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:13:38.389 DEBUG 17808 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 21(Long)
2021-02-02 20:13:38.390 DEBUG 17808 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 20:13:38.391 DEBUG 17808 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:13:38.391 DEBUG 17808 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 18(Long)
2021-02-02 20:13:38.392 DEBUG 17808 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 20:13:38.393 DEBUG 17808 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:13:38.393 DEBUG 17808 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 19(Long)
2021-02-02 20:13:38.393 DEBUG 17808 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 20:13:38.394  INFO 17808 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 20:13:50.679  INFO 34024 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 34024 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 20:13:50.685 DEBUG 34024 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 20:13:50.686  INFO 34024 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 20:13:50.761  INFO 34024 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 20:13:50.762  INFO 34024 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 20:13:52.731  INFO 34024 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 20:13:52.742  INFO 34024 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 20:13:52.743  INFO 34024 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 20:13:52.882  INFO 34024 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 20:13:52.883  INFO 34024 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2121 ms
2021-02-02 20:13:53.762  INFO 34024 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 20:13:53.858  INFO 34024 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 20:13:54.258  INFO 34024 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 20:13:54.309  INFO 34024 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 20:13:54.323  INFO 34024 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 4.515 seconds (JVM running for 6.255)
2021-02-02 20:14:01.227  INFO 34024 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 20:14:01.228  INFO 34024 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 20:14:01.243  INFO 34024 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 15 ms
2021-02-02 20:14:01.278  INFO 34024 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[28, {}]}
2021-02-02 20:14:01.320  INFO 34024 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 20:14:01.558  INFO 34024 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 20:14:01.570 DEBUG 34024 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 20:14:01.592 DEBUG 34024 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 28(Long)
2021-02-02 20:14:01.614 DEBUG 34024 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 20:14:01.755 DEBUG 34024 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 20:14:01.755 DEBUG 34024 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 28(Long)
2021-02-02 20:14:01.758 DEBUG 34024 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 20:14:01.758 DEBUG 34024 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 20:14:01.759 DEBUG 34024 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 28(Long), 28(Long), 28(Long)
2021-02-02 20:14:01.761 DEBUG 34024 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 20:14:01.771 DEBUG 34024 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:14:01.771 DEBUG 34024 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 20:14:01.775 DEBUG 34024 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 2
2021-02-02 20:14:01.776 DEBUG 34024 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:14:01.777 DEBUG 34024 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 20(Long)
2021-02-02 20:14:01.779 DEBUG 34024 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 20:14:01.780 DEBUG 34024 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:14:01.781 DEBUG 34024 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 21(Long)
2021-02-02 20:14:01.784 DEBUG 34024 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 20:14:01.785 DEBUG 34024 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:14:01.787 DEBUG 34024 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 18(Long)
2021-02-02 20:14:01.788 DEBUG 34024 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 20:14:01.789 DEBUG 34024 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:14:01.789 DEBUG 34024 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 19(Long)
2021-02-02 20:14:01.790 DEBUG 34024 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 20:14:01.790  INFO 34024 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 20:14:03.489  INFO 34024 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[28, {}]}
2021-02-02 20:14:03.492 DEBUG 34024 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:14:03.493 DEBUG 34024 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 20:14:03.496 DEBUG 34024 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 2
2021-02-02 20:14:03.496 DEBUG 34024 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:14:03.497 DEBUG 34024 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 20(Long)
2021-02-02 20:14:03.502 DEBUG 34024 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 20:14:03.502 DEBUG 34024 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:14:03.503 DEBUG 34024 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 21(Long)
2021-02-02 20:14:03.504 DEBUG 34024 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 20:14:03.504 DEBUG 34024 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:14:03.505 DEBUG 34024 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 18(Long)
2021-02-02 20:14:03.506 DEBUG 34024 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 20:14:03.506 DEBUG 34024 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:14:03.506 DEBUG 34024 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 19(Long)
2021-02-02 20:14:03.507 DEBUG 34024 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 20:14:03.508  INFO 34024 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 20:15:08.899 DEBUG 34024 --- [http-nio-8080-exec-7] com.personblog.dao.UserMapper.login      : ==>  Preparing: select * from t_user where username = ? and password = ?;
2021-02-02 20:15:08.900 DEBUG 34024 --- [http-nio-8080-exec-7] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 20:15:08.901 DEBUG 34024 --- [http-nio-8080-exec-7] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 20:15:10.953 DEBUG 34024 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 20:15:10.953 DEBUG 34024 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 20:15:10.955 DEBUG 34024 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 20:15:10.962 DEBUG 34024 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 20:15:10.963 DEBUG 34024 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 20:15:10.964 DEBUG 34024 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 20:15:10.969 DEBUG 34024 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 20:15:10.969 DEBUG 34024 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 20:15:10.970 DEBUG 34024 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 20:15:12.479 DEBUG 34024 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 20:15:12.480 DEBUG 34024 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 28(Long)
2021-02-02 20:15:12.484 DEBUG 34024 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 20:15:12.485 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 20:15:12.485 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 20:15:12.486 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 20:15:12.490 DEBUG 34024 --- [http-nio-8080-exec-4] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 20:15:12.491 DEBUG 34024 --- [http-nio-8080-exec-4] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 20:15:12.493 DEBUG 34024 --- [http-nio-8080-exec-4] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 20:17:16.964  WARN 34024 --- [http-nio-8080-exec-4] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 20:17:16.973 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 20:17:16.974 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 20:17:16.976 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 20:17:16.978 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 20:17:16.978 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 20:17:16.979 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 20:17:16.980 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 20:17:16.980 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 17(Long)
2021-02-02 20:17:16.981 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 20:17:16.981 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 20:17:16.981 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 18(Long)
2021-02-02 20:17:16.982 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 20:17:16.982 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 20:17:16.982 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 28(Long)
2021-02-02 20:17:16.989 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 3
2021-02-02 20:17:16.991 DEBUG 34024 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.updateBlog   : ==>  Preparing: update t_blog set published = ?,flag = ? , title = ?, content = ?, type_id = ?, tag_ids = ?, first_picture = ? , description = ? , recommend = ? , share_statement = ?, appreciation = ?, commentabled = ? ,update_time = ? where id = ?
2021-02-02 20:17:17.001 DEBUG 34024 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.updateBlog   : ==> Parameters: true(Boolean), 原创(String), 记录一次线上部署个人项目的流程以及遇到的坑(String), # 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,(String), 25(Long), 16,17,18(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), 主要记录了部署个人项目的流程和过程中遇到的坑(String), true(Boolean), true(Boolean), false(Boolean), true(Boolean), 2021-02-02 20:17:16.982(Timestamp), 28(Long)
2021-02-02 20:17:17.049 DEBUG 34024 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.updateBlog   : <==    Updates: 1
2021-02-02 20:17:17.049 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 20:17:17.049 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 28(Long)
2021-02-02 20:17:17.052 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 20:17:17.053 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 20:17:17.053 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 17(Long), 28(Long)
2021-02-02 20:17:17.055 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 20:17:17.056 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 20:17:17.057 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 18(Long), 28(Long)
2021-02-02 20:17:17.061 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 20:17:17.076 DEBUG 34024 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 20:17:17.077 DEBUG 34024 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 20:17:17.077 DEBUG 34024 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 20:17:17.078 DEBUG 34024 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 20:17:17.079 DEBUG 34024 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 20:17:17.080 DEBUG 34024 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 20:17:17.080 DEBUG 34024 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 20:17:17.080 DEBUG 34024 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 20:17:17.081 DEBUG 34024 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 20:17:22.486  INFO 34024 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/tags/18', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TagShowController.tag', args=[1, 18, {}]}
2021-02-02 20:17:22.495 DEBUG 34024 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 20:17:22.495 DEBUG 34024 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 20:17:22.499 DEBUG 34024 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 20:17:22.500 DEBUG 34024 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.getByTagId   : ==>  Preparing: select b.id,b.title,b.first_picture,b.flag,b.views,b.update_time,b.description, t.id,t.name, u.nickname, u.avatar, b.comment_count from t_blog b, t_type t,t_blog_tag tb ,t_user u,t_tag tt where b.type_id = t.id and u.id = b.user_id and tb.blog_id = b.id and tb.tag_id = tt.id and tb.tag_id = ? order by b.update_time desc
2021-02-02 20:17:22.500 DEBUG 34024 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.getByTagId   : ==> Parameters: 18(Long)
2021-02-02 20:17:22.504 DEBUG 34024 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.getByTagId   : <==      Total: 1
2021-02-02 20:17:22.505  INFO 34024 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Result : tags
2021-02-02 20:17:25.069  INFO 34024 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[28, {}]}
2021-02-02 20:17:25.071 DEBUG 34024 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 20:17:25.072 DEBUG 34024 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 28(Long)
2021-02-02 20:17:25.077 DEBUG 34024 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 20:17:25.108 DEBUG 34024 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 20:17:25.108 DEBUG 34024 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 28(Long)
2021-02-02 20:17:25.114 DEBUG 34024 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 20:17:25.114 DEBUG 34024 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 20:17:25.115 DEBUG 34024 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 28(Long), 28(Long), 28(Long)
2021-02-02 20:17:25.117 DEBUG 34024 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 20:17:25.118 DEBUG 34024 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:17:25.118 DEBUG 34024 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 20:17:25.119 DEBUG 34024 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 2
2021-02-02 20:17:25.120 DEBUG 34024 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:17:25.120 DEBUG 34024 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 20(Long)
2021-02-02 20:17:25.122 DEBUG 34024 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 20:17:25.124 DEBUG 34024 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:17:25.124 DEBUG 34024 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 21(Long)
2021-02-02 20:17:25.125 DEBUG 34024 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 20:17:25.126 DEBUG 34024 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:17:25.126 DEBUG 34024 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 18(Long)
2021-02-02 20:17:25.127 DEBUG 34024 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 20:17:25.128 DEBUG 34024 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:17:25.129 DEBUG 34024 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 19(Long)
2021-02-02 20:17:25.130 DEBUG 34024 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 20:17:25.131  INFO 34024 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 20:17:26.646  INFO 34024 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[28, {}]}
2021-02-02 20:17:26.647 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:17:26.647 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 20:17:26.648 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 2
2021-02-02 20:17:26.648 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:17:26.649 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 20(Long)
2021-02-02 20:17:26.649 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 20:17:26.650 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:17:26.650 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 21(Long)
2021-02-02 20:17:26.651 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 20:17:26.651 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:17:26.651 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 18(Long)
2021-02-02 20:17:26.653 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 20:17:26.654 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:17:26.654 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 19(Long)
2021-02-02 20:17:26.657 DEBUG 34024 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 20:17:26.657  INFO 34024 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 20:18:02.291  INFO 25004 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 25004 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 20:18:02.295 DEBUG 25004 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 20:18:02.295  INFO 25004 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 20:18:02.386  INFO 25004 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 20:18:02.388  INFO 25004 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 20:18:04.827  INFO 25004 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 20:18:04.841  INFO 25004 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 20:18:04.842  INFO 25004 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 20:18:05.026  INFO 25004 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 20:18:05.026  INFO 25004 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2638 ms
2021-02-02 20:18:07.279  INFO 25004 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 20:18:07.506  INFO 25004 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 20:18:08.289  INFO 25004 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 20:18:08.376  INFO 25004 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 20:18:08.393  INFO 25004 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 6.967 seconds (JVM running for 8.713)
2021-02-02 20:18:17.361  INFO 25004 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 20:18:17.361  INFO 25004 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 20:18:17.374  INFO 25004 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 13 ms
2021-02-02 20:18:20.106  INFO 25004 --- [http-nio-8080-exec-10] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 20:18:20.262  INFO 25004 --- [http-nio-8080-exec-10] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 20:18:20.270 DEBUG 25004 --- [http-nio-8080-exec-10] com.personblog.dao.UserMapper.login      : ==>  Preparing: select * from t_user where username = ? and password = ?;
2021-02-02 20:18:20.286 DEBUG 25004 --- [http-nio-8080-exec-10] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 20:18:20.297 DEBUG 25004 --- [http-nio-8080-exec-10] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 20:18:22.191 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 20:18:22.191 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 20:18:22.193 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 20:18:22.196 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 20:18:22.196 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 20:18:22.201 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 20:18:22.206 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 20:18:22.206 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 20:18:22.207 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 20:18:23.833 DEBUG 25004 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 20:18:23.834 DEBUG 25004 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 28(Long)
2021-02-02 20:18:23.840 DEBUG 25004 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 20:18:23.841 DEBUG 25004 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 20:18:23.841 DEBUG 25004 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 20:18:23.842 DEBUG 25004 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 20:18:23.845 DEBUG 25004 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 20:18:23.845 DEBUG 25004 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 20:18:23.847 DEBUG 25004 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 20:18:34.589  WARN 25004 --- [http-nio-8080-exec-10] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 20:18:34.603 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 20:18:34.603 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 20:18:34.604 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 20:18:34.605 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 20:18:34.605 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 20:18:34.606 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 20:18:34.606 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 20:18:34.606 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 17(Long)
2021-02-02 20:18:34.607 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 20:18:34.607 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 20:18:34.608 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 18(Long)
2021-02-02 20:18:34.608 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 20:18:34.609 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 20:18:34.609 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 28(Long)
2021-02-02 20:18:34.616 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 3
2021-02-02 20:18:34.617 DEBUG 25004 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.updateBlog   : ==>  Preparing: update t_blog set published = ?,flag = ? , title = ?, content = ?, type_id = ?, tag_ids = ?, first_picture = ? , description = ? , recommend = ? , share_statement = ?, appreciation = ?, commentabled = ? ,update_time = ? where id = ?
2021-02-02 20:18:34.626 DEBUG 25004 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.updateBlog   : ==> Parameters: true(Boolean), 原创(String), 记录一次线上部署个人项目的流程以及遇到的坑(String), # 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,(String), 25(Long), 16,17,18(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), 主要记录了部署个人项目的流程和过程中遇到的坑(String), true(Boolean), true(Boolean), false(Boolean), true(Boolean), 2021-02-02 20:18:34.609(Timestamp), 28(Long)
2021-02-02 20:18:34.650 DEBUG 25004 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.updateBlog   : <==    Updates: 1
2021-02-02 20:18:34.651 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 20:18:34.652 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 28(Long)
2021-02-02 20:18:34.654 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 20:18:34.655 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 20:18:34.655 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 17(Long), 28(Long)
2021-02-02 20:18:34.657 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 20:18:34.657 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 20:18:34.658 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 18(Long), 28(Long)
2021-02-02 20:18:34.661 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 20:18:34.685 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 20:18:34.686 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 20:18:34.687 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 20:18:34.689 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 20:18:34.689 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 20:18:34.690 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 20:18:34.692 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 20:18:34.692 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 20:18:34.693 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 20:18:40.042  INFO 25004 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[28, {}]}
2021-02-02 20:18:40.048 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 20:18:40.048 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 28(Long)
2021-02-02 20:18:40.053 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 20:18:40.148 DEBUG 25004 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 20:18:40.150 DEBUG 25004 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 28(Long)
2021-02-02 20:18:40.155 DEBUG 25004 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 20:18:40.155 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 20:18:40.156 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 28(Long), 28(Long), 28(Long)
2021-02-02 20:18:40.158 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 20:18:40.162 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:18:40.163 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 20:18:40.176 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 2
2021-02-02 20:18:40.177 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:18:40.178 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 20(Long)
2021-02-02 20:18:40.180 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 20:18:40.182 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:18:40.182 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 21(Long)
2021-02-02 20:18:40.184 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 20:18:40.185 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:18:40.185 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 18(Long)
2021-02-02 20:18:40.187 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 20:18:40.187 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:18:40.187 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 19(Long)
2021-02-02 20:18:40.188 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 20:18:40.188  INFO 25004 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 20:18:41.254  INFO 25004 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[28, {}]}
2021-02-02 20:18:41.257 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:18:41.257 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 20:18:41.259 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 2
2021-02-02 20:18:41.259 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:18:41.259 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 20(Long)
2021-02-02 20:18:41.260 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 20:18:41.261 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:18:41.261 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 21(Long)
2021-02-02 20:18:41.261 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 20:18:41.262 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:18:41.263 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 18(Long)
2021-02-02 20:18:41.266 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 20:18:41.267 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:18:41.267 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 19(Long)
2021-02-02 20:18:41.268 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 20:18:41.268  INFO 25004 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 20:18:50.519 DEBUG 25004 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 20:18:50.519 DEBUG 25004 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 28(Long)
2021-02-02 20:18:50.543 DEBUG 25004 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 20:18:50.543 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 20:18:50.544 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 20:18:50.548 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 20:18:50.549 DEBUG 25004 --- [http-nio-8080-exec-8] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 20:18:50.550 DEBUG 25004 --- [http-nio-8080-exec-8] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 20:18:50.551 DEBUG 25004 --- [http-nio-8080-exec-8] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 20:21:21.429  WARN 25004 --- [http-nio-8080-exec-8] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 20:21:21.431 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 20:21:21.432 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 20:21:21.433 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 20:21:21.433 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 20:21:21.433 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 20:21:21.433 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 20:21:21.434 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 20:21:21.434 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 17(Long)
2021-02-02 20:21:21.434 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 20:21:21.435 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 20:21:21.435 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 18(Long)
2021-02-02 20:21:21.435 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 20:21:21.436 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 20:21:21.436 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 28(Long)
2021-02-02 20:21:21.446 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 3
2021-02-02 20:21:21.447 DEBUG 25004 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.updateBlog   : ==>  Preparing: update t_blog set published = ?,flag = ? , title = ?, content = ?, type_id = ?, tag_ids = ?, first_picture = ? , description = ? , recommend = ? , share_statement = ?, appreciation = ?, commentabled = ? ,update_time = ? where id = ?
2021-02-02 20:21:21.450 DEBUG 25004 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.updateBlog   : ==> Parameters: true(Boolean), 原创(String), 记录一次线上部署个人项目的流程以及遇到的坑(String), 1,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,(String), 25(Long), 16,17,18(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), 主要记录了部署个人项目的流程和过程中遇到的坑(String), true(Boolean), true(Boolean), false(Boolean), true(Boolean), 2021-02-02 20:21:21.436(Timestamp), 28(Long)
2021-02-02 20:21:21.469 DEBUG 25004 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.updateBlog   : <==    Updates: 1
2021-02-02 20:21:21.470 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 20:21:21.470 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 28(Long)
2021-02-02 20:21:21.472 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 20:21:21.472 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 20:21:21.473 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 17(Long), 28(Long)
2021-02-02 20:21:21.475 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 20:21:21.477 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 20:21:21.478 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 18(Long), 28(Long)
2021-02-02 20:21:21.480 DEBUG 25004 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 20:21:21.488 DEBUG 25004 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 20:21:21.488 DEBUG 25004 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 20:21:21.489 DEBUG 25004 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 20:21:21.490 DEBUG 25004 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 20:21:21.491 DEBUG 25004 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 20:21:21.495 DEBUG 25004 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 20:21:21.496 DEBUG 25004 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 20:21:21.497 DEBUG 25004 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 20:21:21.498 DEBUG 25004 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 20:21:24.668 DEBUG 25004 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 20:21:24.668 DEBUG 25004 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 28(Long)
2021-02-02 20:21:24.671 DEBUG 25004 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 20:21:24.671 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 20:21:24.672 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 20:21:24.672 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 20:21:24.672 DEBUG 25004 --- [http-nio-8080-exec-7] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 20:21:24.673 DEBUG 25004 --- [http-nio-8080-exec-7] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 20:21:24.673 DEBUG 25004 --- [http-nio-8080-exec-7] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 20:21:43.800  INFO 25004 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[28, {}]}
2021-02-02 20:21:43.801 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 20:21:43.801 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 28(Long)
2021-02-02 20:21:43.804 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 20:21:43.833 DEBUG 25004 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 20:21:43.833 DEBUG 25004 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 28(Long)
2021-02-02 20:21:43.843 DEBUG 25004 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 20:21:43.844 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 20:21:43.844 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 28(Long), 28(Long), 28(Long)
2021-02-02 20:21:43.847 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 20:21:43.847 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:21:43.847 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 20:21:43.848 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 2
2021-02-02 20:21:43.849 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:21:43.849 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 20(Long)
2021-02-02 20:21:43.850 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 20:21:43.850 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:21:43.850 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 21(Long)
2021-02-02 20:21:43.851 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 20:21:43.851 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:21:43.851 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 18(Long)
2021-02-02 20:21:43.852 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 20:21:43.852 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:21:43.852 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 19(Long)
2021-02-02 20:21:43.853 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 20:21:43.853  INFO 25004 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 20:21:44.930  INFO 25004 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[28, {}]}
2021-02-02 20:21:44.931 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:21:44.931 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 20:21:44.932 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 2
2021-02-02 20:21:44.933 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:21:44.933 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 20(Long)
2021-02-02 20:21:44.934 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 20:21:44.934 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:21:44.935 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 21(Long)
2021-02-02 20:21:44.935 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 20:21:44.935 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:21:44.936 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 18(Long)
2021-02-02 20:21:44.940 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 20:21:44.941 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:21:44.941 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 19(Long)
2021-02-02 20:21:44.942 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 20:21:44.943  INFO 25004 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 20:25:01.176  INFO 25004 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/types/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TypeShowController.typeShow', args=[{}, -1, 1]}
2021-02-02 20:25:01.185 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 20:25:01.186 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 20:25:01.189 DEBUG 25004 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 20:25:01.189 DEBUG 25004 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.getByTypeId  : ==>  Preparing: select b.id,b.title,b.flag,b.first_picture,b.published,b.views,b.update_time,b.description, t.id tid,t.name, b.comment_count, b.type_id, u.nickname, u.avatar from t_blog b join t_user u on b.user_id=u.id join t_type t on t.id=b.type_id and b.type_id = ? order by b.update_time desc
2021-02-02 20:25:01.190 DEBUG 25004 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.getByTypeId  : ==> Parameters: 25(Long)
2021-02-02 20:25:01.191 DEBUG 25004 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.getByTypeId  : <==      Total: 1
2021-02-02 20:25:01.191  INFO 25004 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : types
2021-02-02 20:25:02.883  INFO 25004 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/tags/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TagShowController.tag', args=[1, -1, {}]}
2021-02-02 20:25:02.890 DEBUG 25004 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 20:25:02.890 DEBUG 25004 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 20:25:02.893 DEBUG 25004 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 20:25:02.894 DEBUG 25004 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.getByTagId   : ==>  Preparing: select b.id,b.title,b.first_picture,b.flag,b.views,b.update_time,b.description, t.id,t.name, u.nickname, u.avatar, b.comment_count from t_blog b, t_type t,t_blog_tag tb ,t_user u,t_tag tt where b.type_id = t.id and u.id = b.user_id and tb.blog_id = b.id and tb.tag_id = tt.id and tb.tag_id = ? order by b.update_time desc
2021-02-02 20:25:02.894 DEBUG 25004 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.getByTagId   : ==> Parameters: 16(Long)
2021-02-02 20:25:02.898 DEBUG 25004 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.getByTagId   : <==      Total: 1
2021-02-02 20:25:02.899  INFO 25004 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : tags
2021-02-02 20:25:05.660  INFO 25004 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/message', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.message', args=[]}
2021-02-02 20:25:05.662  INFO 25004 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : message
2021-02-02 20:25:06.042  INFO 25004 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/messagecomment', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.messages', args=[{}]}
2021-02-02 20:25:06.044 DEBUG 25004 --- [http-nio-8080-exec-3] c.p.d.MessageMapper.findByParentIdNull   : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 20:25:06.044 DEBUG 25004 --- [http-nio-8080-exec-3] c.p.d.MessageMapper.findByParentIdNull   : ==> Parameters: -1(Long)
2021-02-02 20:25:06.048 DEBUG 25004 --- [http-nio-8080-exec-3] c.p.d.MessageMapper.findByParentIdNull   : <==      Total: 1
2021-02-02 20:25:06.051 DEBUG 25004 --- [http-nio-8080-exec-3] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 20:25:06.051 DEBUG 25004 --- [http-nio-8080-exec-3] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 119(Long)
2021-02-02 20:25:06.052 DEBUG 25004 --- [http-nio-8080-exec-3] c.p.d.M.findByParentIdNotNull            : <==      Total: 1
2021-02-02 20:25:06.053 DEBUG 25004 --- [http-nio-8080-exec-3] c.p.dao.MessageMapper.findByReplayId     : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 20:25:06.053 DEBUG 25004 --- [http-nio-8080-exec-3] c.p.dao.MessageMapper.findByReplayId     : ==> Parameters: 120(Long)
2021-02-02 20:25:06.054 DEBUG 25004 --- [http-nio-8080-exec-3] c.p.dao.MessageMapper.findByReplayId     : <==      Total: 0
2021-02-02 20:25:06.054  INFO 25004 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : message::messageList
2021-02-02 20:25:10.759  INFO 25004 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/message', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.message', args=[]}
2021-02-02 20:25:10.759  INFO 25004 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : message
2021-02-02 20:25:11.196  INFO 25004 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/messagecomment', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.messages', args=[{}]}
2021-02-02 20:25:11.199 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.d.MessageMapper.findByParentIdNull   : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 20:25:11.199 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.d.MessageMapper.findByParentIdNull   : ==> Parameters: -1(Long)
2021-02-02 20:25:11.201 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.d.MessageMapper.findByParentIdNull   : <==      Total: 1
2021-02-02 20:25:11.202 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 20:25:11.202 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 119(Long)
2021-02-02 20:25:11.204 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.d.M.findByParentIdNotNull            : <==      Total: 1
2021-02-02 20:25:11.204 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.dao.MessageMapper.findByReplayId     : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 20:25:11.205 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.dao.MessageMapper.findByReplayId     : ==> Parameters: 120(Long)
2021-02-02 20:25:11.205 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.dao.MessageMapper.findByReplayId     : <==      Total: 0
2021-02-02 20:25:11.206  INFO 25004 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Result : message::messageList
2021-02-02 20:25:13.315  INFO 25004 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/message', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.message', args=[]}
2021-02-02 20:25:13.315  INFO 25004 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : message
2021-02-02 20:25:13.753  INFO 25004 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/messagecomment', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.messages', args=[{}]}
2021-02-02 20:25:13.753 DEBUG 25004 --- [http-nio-8080-exec-4] c.p.d.MessageMapper.findByParentIdNull   : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 20:25:13.754 DEBUG 25004 --- [http-nio-8080-exec-4] c.p.d.MessageMapper.findByParentIdNull   : ==> Parameters: -1(Long)
2021-02-02 20:25:13.755 DEBUG 25004 --- [http-nio-8080-exec-4] c.p.d.MessageMapper.findByParentIdNull   : <==      Total: 1
2021-02-02 20:25:13.755 DEBUG 25004 --- [http-nio-8080-exec-4] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 20:25:13.756 DEBUG 25004 --- [http-nio-8080-exec-4] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 119(Long)
2021-02-02 20:25:13.757 DEBUG 25004 --- [http-nio-8080-exec-4] c.p.d.M.findByParentIdNotNull            : <==      Total: 1
2021-02-02 20:25:13.758 DEBUG 25004 --- [http-nio-8080-exec-4] c.p.dao.MessageMapper.findByReplayId     : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 20:25:13.759 DEBUG 25004 --- [http-nio-8080-exec-4] c.p.dao.MessageMapper.findByReplayId     : ==> Parameters: 120(Long)
2021-02-02 20:25:13.760 DEBUG 25004 --- [http-nio-8080-exec-4] c.p.dao.MessageMapper.findByReplayId     : <==      Total: 0
2021-02-02 20:25:13.760  INFO 25004 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : message::messageList
2021-02-02 20:25:15.213  INFO 25004 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/message', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.message', args=[]}
2021-02-02 20:25:15.213  INFO 25004 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : message
2021-02-02 20:25:15.594  INFO 25004 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/messagecomment', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.messages', args=[{}]}
2021-02-02 20:25:15.596 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.d.MessageMapper.findByParentIdNull   : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 20:25:15.597 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.d.MessageMapper.findByParentIdNull   : ==> Parameters: -1(Long)
2021-02-02 20:25:15.599 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.d.MessageMapper.findByParentIdNull   : <==      Total: 1
2021-02-02 20:25:15.600 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 20:25:15.600 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 119(Long)
2021-02-02 20:25:15.601 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.d.M.findByParentIdNotNull            : <==      Total: 1
2021-02-02 20:25:15.602 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.dao.MessageMapper.findByReplayId     : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 20:25:15.602 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.dao.MessageMapper.findByReplayId     : ==> Parameters: 120(Long)
2021-02-02 20:25:15.603 DEBUG 25004 --- [http-nio-8080-exec-10] c.p.dao.MessageMapper.findByReplayId     : <==      Total: 0
2021-02-02 20:25:15.603  INFO 25004 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Result : message::messageList
2021-02-02 20:25:16.989  INFO 25004 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/archives', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.ArchiveShowController.archive', args=[{count=Count(id=null, count=null, createTime=null), org.springframework.validation.BindingResult.count=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, Count(id=null, count=null, createTime=null)]}
2021-02-02 20:25:16.993 DEBUG 25004 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.findGroupYear         : ==>  Preparing: select date_format(b.create_time,'%Y') year from t_blog b group by year order by year desc
2021-02-02 20:25:16.993 DEBUG 25004 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.findGroupYear         : ==> Parameters: 
2021-02-02 20:25:17.000 DEBUG 25004 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.findGroupYear         : <==      Total: 1
2021-02-02 20:25:17.001 DEBUG 25004 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.findByYear   : ==>  Preparing: select b.id bid, b.title, b.create_time, b.flag,t.name from t_blog b, t_type t where date_format(b.create_time,'%Y')=? and b.type_id=t.id order by b.create_time desc
2021-02-02 20:25:17.001 DEBUG 25004 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.findByYear   : ==> Parameters: 2021(String)
2021-02-02 20:25:17.004 DEBUG 25004 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.findByYear   : <==      Total: 1
2021-02-02 20:25:17.004 DEBUG 25004 --- [http-nio-8080-exec-4] com.personblog.dao.BlogMapper.count      : ==>  Preparing: select count(*) from t_blog
2021-02-02 20:25:17.005 DEBUG 25004 --- [http-nio-8080-exec-4] com.personblog.dao.BlogMapper.count      : ==> Parameters: 
2021-02-02 20:25:17.005 DEBUG 25004 --- [http-nio-8080-exec-4] com.personblog.dao.BlogMapper.count      : <==      Total: 1
2021-02-02 20:25:17.006 DEBUG 25004 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.deleteCount  : ==>  Preparing: delete from t_count
2021-02-02 20:25:17.006 DEBUG 25004 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.deleteCount  : ==> Parameters: 
2021-02-02 20:25:17.011 DEBUG 25004 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.deleteCount  : <==    Updates: 1
2021-02-02 20:25:17.015 DEBUG 25004 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.insertCount  : ==>  Preparing: insert into t_count(count,create_time) (select count(*) count, create_time from t_blog GROUP BY year(create_time),month(create_time) order by create_time desc)
2021-02-02 20:25:17.015 DEBUG 25004 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.insertCount  : ==> Parameters: 
2021-02-02 20:25:17.024 DEBUG 25004 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.insertCount  : <==    Updates: 1
2021-02-02 20:25:17.024 DEBUG 25004 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.findGroupYear2        : ==>  Preparing: select date_format(t_count.create_time,'%Y年%m月') year1 from t_count GROUP BY year1 order by year1 desc
2021-02-02 20:25:17.024 DEBUG 25004 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.findGroupYear2        : ==> Parameters: 
2021-02-02 20:25:17.026 DEBUG 25004 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.findGroupYear2        : <==      Total: 1
2021-02-02 20:25:17.026 DEBUG 25004 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.findByYear2  : ==>  Preparing: select c.id,c.count,c.create_time from t_count c where date_format(c.create_time,'%Y年%m月')=? order by c.create_time desc
2021-02-02 20:25:17.027 DEBUG 25004 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.findByYear2  : ==> Parameters: 2021年02月(String)
2021-02-02 20:25:17.029 DEBUG 25004 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.findByYear2  : <==      Total: 1
2021-02-02 20:25:17.030  INFO 25004 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : archives
2021-02-02 20:25:20.809  INFO 25004 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/about', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.AboutShowController.about', args=[]}
2021-02-02 20:25:20.813  INFO 25004 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : about
2021-02-02 20:25:24.137  INFO 25004 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/tags/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TagShowController.tag', args=[1, -1, {}]}
2021-02-02 20:25:24.138 DEBUG 25004 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 20:25:24.138 DEBUG 25004 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 20:25:24.139 DEBUG 25004 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 20:25:24.140 DEBUG 25004 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.getByTagId   : ==>  Preparing: select b.id,b.title,b.first_picture,b.flag,b.views,b.update_time,b.description, t.id,t.name, u.nickname, u.avatar, b.comment_count from t_blog b, t_type t,t_blog_tag tb ,t_user u,t_tag tt where b.type_id = t.id and u.id = b.user_id and tb.blog_id = b.id and tb.tag_id = tt.id and tb.tag_id = ? order by b.update_time desc
2021-02-02 20:25:24.140 DEBUG 25004 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.getByTagId   : ==> Parameters: 16(Long)
2021-02-02 20:25:24.142 DEBUG 25004 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.getByTagId   : <==      Total: 1
2021-02-02 20:25:24.142  INFO 25004 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : tags
2021-02-02 20:25:35.981  INFO 25004 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/tags/17', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TagShowController.tag', args=[1, 17, {}]}
2021-02-02 20:25:35.982 DEBUG 25004 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 20:25:35.983 DEBUG 25004 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 20:25:35.985 DEBUG 25004 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 20:25:35.986 DEBUG 25004 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getByTagId   : ==>  Preparing: select b.id,b.title,b.first_picture,b.flag,b.views,b.update_time,b.description, t.id,t.name, u.nickname, u.avatar, b.comment_count from t_blog b, t_type t,t_blog_tag tb ,t_user u,t_tag tt where b.type_id = t.id and u.id = b.user_id and tb.blog_id = b.id and tb.tag_id = tt.id and tb.tag_id = ? order by b.update_time desc
2021-02-02 20:25:35.987 DEBUG 25004 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getByTagId   : ==> Parameters: 17(Long)
2021-02-02 20:25:35.989 DEBUG 25004 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getByTagId   : <==      Total: 1
2021-02-02 20:25:35.989  INFO 25004 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : tags
2021-02-02 20:25:38.121  INFO 25004 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/tags/18', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TagShowController.tag', args=[1, 18, {}]}
2021-02-02 20:25:38.122 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 20:25:38.122 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 20:25:38.124 DEBUG 25004 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 20:25:38.125 DEBUG 25004 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.getByTagId   : ==>  Preparing: select b.id,b.title,b.first_picture,b.flag,b.views,b.update_time,b.description, t.id,t.name, u.nickname, u.avatar, b.comment_count from t_blog b, t_type t,t_blog_tag tb ,t_user u,t_tag tt where b.type_id = t.id and u.id = b.user_id and tb.blog_id = b.id and tb.tag_id = tt.id and tb.tag_id = ? order by b.update_time desc
2021-02-02 20:25:38.125 DEBUG 25004 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.getByTagId   : ==> Parameters: 18(Long)
2021-02-02 20:25:38.129 DEBUG 25004 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.getByTagId   : <==      Total: 1
2021-02-02 20:25:38.129  INFO 25004 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : tags
2021-02-02 20:42:03.914  INFO 34856 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 34856 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 20:42:03.917 DEBUG 34856 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 20:42:03.918  INFO 34856 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 20:42:03.976  INFO 34856 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 20:42:03.977  INFO 34856 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 20:42:05.253  INFO 34856 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 20:42:05.260  INFO 34856 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 20:42:05.261  INFO 34856 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 20:42:05.353  INFO 34856 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 20:42:05.353  INFO 34856 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1376 ms
2021-02-02 20:42:06.002  INFO 34856 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 20:42:06.086  INFO 34856 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 20:42:06.423  INFO 34856 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 20:42:06.464  INFO 34856 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 20:42:06.474  INFO 34856 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 3.224 seconds (JVM running for 4.554)
2021-02-02 20:42:10.997  INFO 34856 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 20:42:10.997  INFO 34856 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 20:42:11.011  INFO 34856 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 13 ms
2021-02-02 20:42:11.062  INFO 34856 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/tags/18', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TagShowController.tag', args=[1, 18, {}]}
2021-02-02 20:42:11.102  INFO 34856 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 20:42:11.348  INFO 34856 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 20:42:11.360 DEBUG 34856 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 20:42:11.379 DEBUG 34856 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 20:42:11.409 DEBUG 34856 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 20:42:11.424 DEBUG 34856 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getByTagId   : ==>  Preparing: select b.id,b.title,b.first_picture,b.flag,b.views,b.update_time,b.description, t.id,t.name, u.nickname, u.avatar, b.comment_count from t_blog b, t_type t,t_blog_tag tb ,t_user u,t_tag tt where b.type_id = t.id and u.id = b.user_id and tb.blog_id = b.id and tb.tag_id = tt.id and tb.tag_id = ? order by b.update_time desc
2021-02-02 20:42:11.424 DEBUG 34856 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getByTagId   : ==> Parameters: 18(Long)
2021-02-02 20:42:11.430 DEBUG 34856 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getByTagId   : <==      Total: 1
2021-02-02 20:42:11.435  INFO 34856 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : tags
2021-02-02 20:42:26.210 DEBUG 34856 --- [http-nio-8080-exec-10] com.personblog.dao.UserMapper.login      : ==>  Preparing: select * from t_user where username = ? and password = ?;
2021-02-02 20:42:26.211 DEBUG 34856 --- [http-nio-8080-exec-10] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 20:42:26.212 DEBUG 34856 --- [http-nio-8080-exec-10] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 20:42:27.871 DEBUG 34856 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 20:42:27.871 DEBUG 34856 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 20:42:27.873 DEBUG 34856 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 20:42:27.876 DEBUG 34856 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 20:42:27.876 DEBUG 34856 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 20:42:27.878 DEBUG 34856 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 20:42:27.885 DEBUG 34856 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 20:42:27.886 DEBUG 34856 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 20:42:27.887 DEBUG 34856 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 20:42:30.600 DEBUG 34856 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 20:42:30.601 DEBUG 34856 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 20:42:30.604 DEBUG 34856 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 20:42:30.605 DEBUG 34856 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 20:42:30.605 DEBUG 34856 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 20:42:30.606 DEBUG 34856 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 20:42:33.861 DEBUG 34856 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 20:42:33.862 DEBUG 34856 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 28(Long)
2021-02-02 20:42:33.869 DEBUG 34856 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 20:42:33.870 DEBUG 34856 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 20:42:33.870 DEBUG 34856 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 20:42:33.871 DEBUG 34856 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 20:42:33.871 DEBUG 34856 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 20:42:33.871 DEBUG 34856 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 20:42:33.872 DEBUG 34856 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 20:42:44.272  WARN 34856 --- [http-nio-8080-exec-5] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 20:42:44.289 DEBUG 34856 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 20:42:44.289 DEBUG 34856 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 20:42:44.290 DEBUG 34856 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 20:42:44.291 DEBUG 34856 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 20:42:44.291 DEBUG 34856 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 20:42:44.291 DEBUG 34856 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 20:42:44.292 DEBUG 34856 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 20:42:44.292 DEBUG 34856 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 17(Long)
2021-02-02 20:42:44.293 DEBUG 34856 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 20:42:44.295 DEBUG 34856 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 20:42:44.295 DEBUG 34856 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 18(Long)
2021-02-02 20:42:44.298 DEBUG 34856 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 20:42:44.299 DEBUG 34856 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 20:42:44.299 DEBUG 34856 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 28(Long)
2021-02-02 20:42:44.303 DEBUG 34856 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 3
2021-02-02 20:42:44.304 DEBUG 34856 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateBlog   : ==>  Preparing: update t_blog set published = ?,flag = ? , title = ?, content = ?, type_id = ?, tag_ids = ?, first_picture = ? , description = ? , recommend = ? , share_statement = ?, appreciation = ?, commentabled = ? ,update_time = ? where id = ?
2021-02-02 20:42:44.317 DEBUG 34856 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateBlog   : ==> Parameters: true(Boolean), 原创(String), 记录一次线上部署个人项目的流程以及遇到的坑(String), 0,1,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,(String), 25(Long), 16,17,18(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), 主要记录了部署个人项目的流程和过程中遇到的坑(String), true(Boolean), true(Boolean), false(Boolean), true(Boolean), 2021-02-02 20:42:44.298(Timestamp), 28(Long)
2021-02-02 20:42:44.338 DEBUG 34856 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateBlog   : <==    Updates: 1
2021-02-02 20:42:44.339 DEBUG 34856 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 20:42:44.339 DEBUG 34856 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 28(Long)
2021-02-02 20:42:44.342 DEBUG 34856 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 20:42:44.342 DEBUG 34856 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 20:42:44.343 DEBUG 34856 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 17(Long), 28(Long)
2021-02-02 20:42:44.345 DEBUG 34856 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 20:42:44.347 DEBUG 34856 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 20:42:44.348 DEBUG 34856 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 18(Long), 28(Long)
2021-02-02 20:42:44.352 DEBUG 34856 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 20:42:44.369 DEBUG 34856 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 20:42:44.369 DEBUG 34856 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 20:42:44.371 DEBUG 34856 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 20:42:44.372 DEBUG 34856 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 20:42:44.373 DEBUG 34856 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 20:42:44.374 DEBUG 34856 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 20:42:44.374 DEBUG 34856 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 20:42:44.374 DEBUG 34856 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 20:42:44.375 DEBUG 34856 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 20:42:53.157  INFO 34856 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/tags/18', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TagShowController.tag', args=[1, 18, {}]}
2021-02-02 20:42:53.158 DEBUG 34856 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 20:42:53.158 DEBUG 34856 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 20:42:53.173 DEBUG 34856 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 20:42:53.174 DEBUG 34856 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.getByTagId   : ==>  Preparing: select b.id,b.title,b.first_picture,b.flag,b.views,b.update_time,b.description, t.id,t.name, u.nickname, u.avatar, b.comment_count from t_blog b, t_type t,t_blog_tag tb ,t_user u,t_tag tt where b.type_id = t.id and u.id = b.user_id and tb.blog_id = b.id and tb.tag_id = tt.id and tb.tag_id = ? order by b.update_time desc
2021-02-02 20:42:53.174 DEBUG 34856 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.getByTagId   : ==> Parameters: 18(Long)
2021-02-02 20:42:53.179 DEBUG 34856 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.getByTagId   : <==      Total: 1
2021-02-02 20:42:53.180  INFO 34856 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : tags
2021-02-02 20:42:55.930  INFO 34856 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[28, {}]}
2021-02-02 20:42:55.936 DEBUG 34856 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 20:42:55.937 DEBUG 34856 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 28(Long)
2021-02-02 20:42:55.944 DEBUG 34856 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 20:42:56.064 DEBUG 34856 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 20:42:56.064 DEBUG 34856 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 28(Long)
2021-02-02 20:42:56.067 DEBUG 34856 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 20:42:56.067 DEBUG 34856 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 20:42:56.067 DEBUG 34856 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 28(Long), 28(Long), 28(Long)
2021-02-02 20:42:56.071 DEBUG 34856 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 20:42:56.073 DEBUG 34856 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:42:56.074 DEBUG 34856 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 20:42:56.075 DEBUG 34856 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 2
2021-02-02 20:42:56.076 DEBUG 34856 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:42:56.077 DEBUG 34856 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 20(Long)
2021-02-02 20:42:56.079 DEBUG 34856 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 20:42:56.080 DEBUG 34856 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:42:56.081 DEBUG 34856 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 21(Long)
2021-02-02 20:42:56.082 DEBUG 34856 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 20:42:56.083 DEBUG 34856 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:42:56.083 DEBUG 34856 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 18(Long)
2021-02-02 20:42:56.084 DEBUG 34856 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 20:42:56.084 DEBUG 34856 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:42:56.085 DEBUG 34856 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 19(Long)
2021-02-02 20:42:56.085 DEBUG 34856 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 20:42:56.085  INFO 34856 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 20:42:57.536  INFO 34856 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/28', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[28, {}]}
2021-02-02 20:42:57.541 DEBUG 34856 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:42:57.541 DEBUG 34856 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 28(Long), -1(Long)
2021-02-02 20:42:57.546 DEBUG 34856 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 2
2021-02-02 20:42:57.547 DEBUG 34856 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:42:57.548 DEBUG 34856 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 20(Long)
2021-02-02 20:42:57.550 DEBUG 34856 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 20:42:57.551 DEBUG 34856 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:42:57.551 DEBUG 34856 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 21(Long)
2021-02-02 20:42:57.552 DEBUG 34856 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 20:42:57.553 DEBUG 34856 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNotNull      : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:42:57.553 DEBUG 34856 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNotNull      : ==> Parameters: 28(Long), 18(Long)
2021-02-02 20:42:57.554 DEBUG 34856 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNotNull      : <==      Total: 1
2021-02-02 20:42:57.555 DEBUG 34856 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdAndReplayId          : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:42:57.555 DEBUG 34856 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdAndReplayId          : ==> Parameters: 28(Long), 19(Long)
2021-02-02 20:42:57.556 DEBUG 34856 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdAndReplayId          : <==      Total: 0
2021-02-02 20:42:57.557  INFO 34856 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 20:45:02.334  INFO 29720 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 29720 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 20:45:02.338 DEBUG 29720 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 20:45:02.338  INFO 29720 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 20:45:02.419  INFO 29720 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 20:45:02.420  INFO 29720 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 20:45:04.664  INFO 29720 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 20:45:04.691  INFO 29720 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 20:45:04.691  INFO 29720 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 20:45:04.801  INFO 29720 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 20:45:04.801  INFO 29720 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2381 ms
2021-02-02 20:45:05.813  INFO 29720 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 20:45:05.917  INFO 29720 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 20:45:06.361  INFO 29720 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 20:45:06.405  INFO 29720 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 20:45:06.418  INFO 29720 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 4.849 seconds (JVM running for 6.551)
2021-02-02 20:45:10.938  INFO 29720 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 20:45:10.939  INFO 29720 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 20:45:10.965  INFO 29720 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 26 ms
2021-02-02 20:45:13.701  INFO 29720 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 20:45:13.878  INFO 29720 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 20:45:13.886 DEBUG 29720 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : ==>  Preparing: select * from t_user where username = ? and password = ?;
2021-02-02 20:45:13.901 DEBUG 29720 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 20:45:13.917 DEBUG 29720 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 20:45:15.788 DEBUG 29720 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 20:45:15.788 DEBUG 29720 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 20:45:15.796 DEBUG 29720 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 20:45:15.799 DEBUG 29720 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 20:45:15.799 DEBUG 29720 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 20:45:15.801 DEBUG 29720 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 20:45:15.805 DEBUG 29720 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 20:45:15.805 DEBUG 29720 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 20:45:15.806 DEBUG 29720 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 20:45:18.284 DEBUG 29720 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 20:45:18.285 DEBUG 29720 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 28(Long)
2021-02-02 20:45:18.293 DEBUG 29720 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 20:45:18.295 DEBUG 29720 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 20:45:18.296 DEBUG 29720 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 20:45:18.297 DEBUG 29720 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 20:45:18.300 DEBUG 29720 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 20:45:18.301 DEBUG 29720 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 20:45:18.303 DEBUG 29720 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 20:45:25.917  WARN 29720 --- [http-nio-8080-exec-5] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 20:45:25.934 DEBUG 29720 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 20:45:25.934 DEBUG 29720 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 20:45:25.935 DEBUG 29720 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 20:45:25.936 DEBUG 29720 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 20:45:25.936 DEBUG 29720 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 20:45:25.937 DEBUG 29720 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 20:45:25.938 DEBUG 29720 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 20:45:25.938 DEBUG 29720 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 17(Long)
2021-02-02 20:45:25.939 DEBUG 29720 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 20:45:25.939 DEBUG 29720 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 20:45:25.940 DEBUG 29720 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 18(Long)
2021-02-02 20:45:25.942 DEBUG 29720 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 20:45:25.945 DEBUG 29720 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 20:45:25.946 DEBUG 29720 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 28(Long)
2021-02-02 20:45:25.950 DEBUG 29720 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 3
2021-02-02 20:45:25.951 DEBUG 29720 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateBlog   : ==>  Preparing: update t_blog set published = ?,flag = ? , title = ?, content = ?, type_id = ?, tag_ids = ?, first_picture = ? , description = ? , recommend = ? , share_statement = ?, appreciation = ?, commentabled = ? ,update_time = ? where id = ?
2021-02-02 20:45:25.964 DEBUG 29720 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateBlog   : ==> Parameters: true(Boolean), 原创(String), 记录一次线上部署个人项目的流程以及遇到的坑(String), 1,0,1,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,(String), 25(Long), 16,17,18(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), 主要记录了部署个人项目的流程和过程中遇到的坑(String), true(Boolean), true(Boolean), false(Boolean), true(Boolean), 2021-02-02 20:45:25.944(Timestamp), 28(Long)
2021-02-02 20:45:25.989 DEBUG 29720 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateBlog   : <==    Updates: 1
2021-02-02 20:45:25.990 DEBUG 29720 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 20:45:25.992 DEBUG 29720 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 28(Long)
2021-02-02 20:45:25.997 DEBUG 29720 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 20:45:25.998 DEBUG 29720 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 20:45:25.999 DEBUG 29720 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 17(Long), 28(Long)
2021-02-02 20:45:26.001 DEBUG 29720 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 20:45:26.002 DEBUG 29720 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 20:45:26.003 DEBUG 29720 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 18(Long), 28(Long)
2021-02-02 20:45:26.006 DEBUG 29720 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 20:45:26.028 DEBUG 29720 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 20:45:26.029 DEBUG 29720 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 20:45:26.030 DEBUG 29720 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 20:45:26.031 DEBUG 29720 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 20:45:26.031 DEBUG 29720 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 20:45:26.032 DEBUG 29720 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 20:45:26.033 DEBUG 29720 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 20:45:26.033 DEBUG 29720 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 20:45:26.034 DEBUG 29720 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 20:45:33.375 DEBUG 29720 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 20:45:33.376 DEBUG 29720 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 20:45:33.377 DEBUG 29720 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 20:45:33.378 DEBUG 29720 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 20:45:33.378 DEBUG 29720 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 20:45:33.381 DEBUG 29720 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 20:45:35.132 DEBUG 29720 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 20:45:35.132 DEBUG 29720 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 20:45:35.133 DEBUG 29720 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 20:45:37.558  WARN 29720 --- [http-nio-8080-exec-9] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 20:45:37.612 DEBUG 29720 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectTypeByName      : ==>  Preparing: select id, name from t_type where name = ?
2021-02-02 20:45:37.613 DEBUG 29720 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectTypeByName      : ==> Parameters: 项目部署1(String)
2021-02-02 20:45:37.613 DEBUG 29720 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectTypeByName      : <==      Total: 0
2021-02-02 20:45:37.621 DEBUG 29720 --- [http-nio-8080-exec-9] c.personblog.dao.TypeMapper.updateType   : ==>  Preparing: update t_type set name = ? where id = ?
2021-02-02 20:45:37.622 DEBUG 29720 --- [http-nio-8080-exec-9] c.personblog.dao.TypeMapper.updateType   : ==> Parameters: 项目部署1(String), 25(Long)
2021-02-02 20:45:37.632 DEBUG 29720 --- [http-nio-8080-exec-9] c.personblog.dao.TypeMapper.updateType   : <==    Updates: 1
2021-02-02 20:45:37.640 DEBUG 29720 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 20:45:37.641 DEBUG 29720 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 20:45:37.643 DEBUG 29720 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 20:45:37.645 DEBUG 29720 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 20:45:37.645 DEBUG 29720 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 20:45:37.646 DEBUG 29720 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 20:45:41.560 DEBUG 29720 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 20:45:41.560 DEBUG 29720 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 20:45:41.561 DEBUG 29720 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 20:45:45.144  WARN 29720 --- [http-nio-8080-exec-6] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 20:45:45.146 DEBUG 29720 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeByName      : ==>  Preparing: select id, name from t_type where name = ?
2021-02-02 20:45:45.147 DEBUG 29720 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeByName      : ==> Parameters: 项目部署(String)
2021-02-02 20:45:45.148 DEBUG 29720 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeByName      : <==      Total: 0
2021-02-02 20:45:45.148 DEBUG 29720 --- [http-nio-8080-exec-6] c.personblog.dao.TypeMapper.updateType   : ==>  Preparing: update t_type set name = ? where id = ?
2021-02-02 20:45:45.149 DEBUG 29720 --- [http-nio-8080-exec-6] c.personblog.dao.TypeMapper.updateType   : ==> Parameters: 项目部署(String), 25(Long)
2021-02-02 20:45:45.151 DEBUG 29720 --- [http-nio-8080-exec-6] c.personblog.dao.TypeMapper.updateType   : <==    Updates: 1
2021-02-02 20:45:45.161 DEBUG 29720 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 20:45:45.162 DEBUG 29720 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 20:45:45.162 DEBUG 29720 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 20:45:45.163 DEBUG 29720 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 20:45:45.163 DEBUG 29720 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 20:45:45.164 DEBUG 29720 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 20:45:48.137 DEBUG 29720 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 20:45:48.137 DEBUG 29720 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 20:45:48.139 DEBUG 29720 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 20:45:48.141 DEBUG 29720 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 20:45:48.143 DEBUG 29720 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 20:45:48.145 DEBUG 29720 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 20:45:48.146 DEBUG 29720 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 20:45:48.146 DEBUG 29720 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 20:45:48.147 DEBUG 29720 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 20:50:57.205  INFO 29720 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/types/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TypeShowController.typeShow', args=[{}, -1, 1]}
2021-02-02 20:50:57.210 DEBUG 29720 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 20:50:57.210 DEBUG 29720 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 20:50:57.212 DEBUG 29720 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 20:50:57.212 DEBUG 29720 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.getByTypeId  : ==>  Preparing: select b.id,b.title,b.flag,b.first_picture,b.published,b.views,b.update_time,b.description, t.id tid,t.name, b.comment_count, b.type_id, u.nickname, u.avatar from t_blog b join t_user u on b.user_id=u.id join t_type t on t.id=b.type_id and b.type_id = ? order by b.update_time desc
2021-02-02 20:50:57.212 DEBUG 29720 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.getByTypeId  : ==> Parameters: 25(Long)
2021-02-02 20:50:57.222 DEBUG 29720 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.getByTypeId  : <==      Total: 1
2021-02-02 20:50:57.223  INFO 29720 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : types
2021-02-02 20:50:59.693  INFO 29720 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 20:50:59.706 DEBUG 29720 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 20:50:59.706 DEBUG 29720 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 20:50:59.707 DEBUG 29720 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 20:50:59.707 DEBUG 29720 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 20:50:59.708 DEBUG 29720 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 20:50:59.711 DEBUG 29720 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 20:50:59.712 DEBUG 29720 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 20:50:59.712 DEBUG 29720 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 20:50:59.713 DEBUG 29720 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 20:50:59.713 DEBUG 29720 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 20:50:59.713 DEBUG 29720 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 20:50:59.714 DEBUG 29720 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 20:50:59.721 DEBUG 29720 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 20:50:59.721 DEBUG 29720 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 20:50:59.724 DEBUG 29720 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 20:50:59.725  INFO 29720 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 20:51:12.657  INFO 29720 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/about', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.AboutShowController.about', args=[]}
2021-02-02 20:51:12.660  INFO 29720 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : about
2021-02-02 20:51:24.513  INFO 29720 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/archives', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.ArchiveShowController.archive', args=[{count=Count(id=null, count=null, createTime=null), org.springframework.validation.BindingResult.count=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, Count(id=null, count=null, createTime=null)]}
2021-02-02 20:51:24.519 DEBUG 29720 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.findGroupYear         : ==>  Preparing: select date_format(b.create_time,'%Y') year from t_blog b group by year order by year desc
2021-02-02 20:51:24.519 DEBUG 29720 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.findGroupYear         : ==> Parameters: 
2021-02-02 20:51:24.530 DEBUG 29720 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.findGroupYear         : <==      Total: 1
2021-02-02 20:51:24.532 DEBUG 29720 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.findByYear   : ==>  Preparing: select b.id bid, b.title, b.create_time, b.flag,t.name from t_blog b, t_type t where date_format(b.create_time,'%Y')=? and b.type_id=t.id order by b.create_time desc
2021-02-02 20:51:24.532 DEBUG 29720 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.findByYear   : ==> Parameters: 2021(String)
2021-02-02 20:51:24.533 DEBUG 29720 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.findByYear   : <==      Total: 1
2021-02-02 20:51:24.534 DEBUG 29720 --- [http-nio-8080-exec-10] com.personblog.dao.BlogMapper.count      : ==>  Preparing: select count(*) from t_blog
2021-02-02 20:51:24.534 DEBUG 29720 --- [http-nio-8080-exec-10] com.personblog.dao.BlogMapper.count      : ==> Parameters: 
2021-02-02 20:51:24.534 DEBUG 29720 --- [http-nio-8080-exec-10] com.personblog.dao.BlogMapper.count      : <==      Total: 1
2021-02-02 20:51:24.534 DEBUG 29720 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.deleteCount  : ==>  Preparing: delete from t_count
2021-02-02 20:51:24.535 DEBUG 29720 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.deleteCount  : ==> Parameters: 
2021-02-02 20:51:24.537 DEBUG 29720 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.deleteCount  : <==    Updates: 1
2021-02-02 20:51:24.537 DEBUG 29720 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.insertCount  : ==>  Preparing: insert into t_count(count,create_time) (select count(*) count, create_time from t_blog GROUP BY year(create_time),month(create_time) order by create_time desc)
2021-02-02 20:51:24.537 DEBUG 29720 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.insertCount  : ==> Parameters: 
2021-02-02 20:51:24.540 DEBUG 29720 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.insertCount  : <==    Updates: 1
2021-02-02 20:51:24.541 DEBUG 29720 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.findGroupYear2        : ==>  Preparing: select date_format(t_count.create_time,'%Y年%m月') year1 from t_count GROUP BY year1 order by year1 desc
2021-02-02 20:51:24.541 DEBUG 29720 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.findGroupYear2        : ==> Parameters: 
2021-02-02 20:51:24.542 DEBUG 29720 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.findGroupYear2        : <==      Total: 1
2021-02-02 20:51:24.542 DEBUG 29720 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.findByYear2  : ==>  Preparing: select c.id,c.count,c.create_time from t_count c where date_format(c.create_time,'%Y年%m月')=? order by c.create_time desc
2021-02-02 20:51:24.542 DEBUG 29720 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.findByYear2  : ==> Parameters: 2021年02月(String)
2021-02-02 20:51:24.543 DEBUG 29720 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.findByYear2  : <==      Total: 1
2021-02-02 20:51:24.543  INFO 29720 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Result : archives
2021-02-02 20:51:27.677  INFO 29720 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/message', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.message', args=[]}
2021-02-02 20:51:27.683  INFO 29720 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : message
2021-02-02 20:51:28.100  INFO 29720 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/messagecomment', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.messages', args=[{}]}
2021-02-02 20:51:28.102 DEBUG 29720 --- [http-nio-8080-exec-1] c.p.d.MessageMapper.findByParentIdNull   : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 20:51:28.102 DEBUG 29720 --- [http-nio-8080-exec-1] c.p.d.MessageMapper.findByParentIdNull   : ==> Parameters: -1(Long)
2021-02-02 20:51:28.105 DEBUG 29720 --- [http-nio-8080-exec-1] c.p.d.MessageMapper.findByParentIdNull   : <==      Total: 1
2021-02-02 20:51:28.105 DEBUG 29720 --- [http-nio-8080-exec-1] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 20:51:28.105 DEBUG 29720 --- [http-nio-8080-exec-1] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 119(Long)
2021-02-02 20:51:28.106 DEBUG 29720 --- [http-nio-8080-exec-1] c.p.d.M.findByParentIdNotNull            : <==      Total: 1
2021-02-02 20:51:28.107 DEBUG 29720 --- [http-nio-8080-exec-1] c.p.dao.MessageMapper.findByReplayId     : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 20:51:28.107 DEBUG 29720 --- [http-nio-8080-exec-1] c.p.dao.MessageMapper.findByReplayId     : ==> Parameters: 120(Long)
2021-02-02 20:51:28.107 DEBUG 29720 --- [http-nio-8080-exec-1] c.p.dao.MessageMapper.findByReplayId     : <==      Total: 0
2021-02-02 20:51:28.108  INFO 29720 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : message::messageList
2021-02-02 20:51:40.873  INFO 29720 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/message', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.message', args=[]}
2021-02-02 20:51:40.873  INFO 29720 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : message
2021-02-02 20:51:41.348  INFO 29720 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/messagecomment', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.messages', args=[{}]}
2021-02-02 20:51:41.349 DEBUG 29720 --- [http-nio-8080-exec-8] c.p.d.MessageMapper.findByParentIdNull   : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 20:51:41.349 DEBUG 29720 --- [http-nio-8080-exec-8] c.p.d.MessageMapper.findByParentIdNull   : ==> Parameters: -1(Long)
2021-02-02 20:51:41.351 DEBUG 29720 --- [http-nio-8080-exec-8] c.p.d.MessageMapper.findByParentIdNull   : <==      Total: 1
2021-02-02 20:51:41.351 DEBUG 29720 --- [http-nio-8080-exec-8] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 20:51:41.352 DEBUG 29720 --- [http-nio-8080-exec-8] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 119(Long)
2021-02-02 20:51:41.353 DEBUG 29720 --- [http-nio-8080-exec-8] c.p.d.M.findByParentIdNotNull            : <==      Total: 1
2021-02-02 20:51:41.354 DEBUG 29720 --- [http-nio-8080-exec-8] c.p.dao.MessageMapper.findByReplayId     : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 20:51:41.354 DEBUG 29720 --- [http-nio-8080-exec-8] c.p.dao.MessageMapper.findByReplayId     : ==> Parameters: 120(Long)
2021-02-02 20:51:41.356 DEBUG 29720 --- [http-nio-8080-exec-8] c.p.dao.MessageMapper.findByReplayId     : <==      Total: 0
2021-02-02 20:51:41.357  INFO 29720 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : message::messageList
2021-02-02 20:54:24.151  INFO 12520 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 12520 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 20:54:24.154 DEBUG 12520 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 20:54:24.154  INFO 12520 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 20:54:24.203  INFO 12520 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 20:54:24.204  INFO 12520 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 20:54:25.568  INFO 12520 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 20:54:25.577  INFO 12520 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 20:54:25.578  INFO 12520 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 20:54:25.689  INFO 12520 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 20:54:25.690  INFO 12520 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1485 ms
2021-02-02 20:54:26.505  INFO 12520 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 20:54:26.609  INFO 12520 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 20:54:27.030  INFO 12520 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 20:54:27.070  INFO 12520 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 20:54:27.081  INFO 12520 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 3.576 seconds (JVM running for 4.942)
2021-02-02 20:54:31.661  INFO 12520 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 20:54:31.662  INFO 12520 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 20:54:31.677  INFO 12520 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 15 ms
2021-02-02 20:54:34.068  INFO 12520 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 20:54:34.229  INFO 12520 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 20:54:34.234 DEBUG 12520 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : ==>  Preparing: select * from t_user where username = ? and password = ?;
2021-02-02 20:54:34.251 DEBUG 12520 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 20:54:34.265 DEBUG 12520 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 20:54:36.052 DEBUG 12520 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 20:54:36.052 DEBUG 12520 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 20:54:36.059 DEBUG 12520 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 20:54:36.061 DEBUG 12520 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 20:54:36.062 DEBUG 12520 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 20:54:36.064 DEBUG 12520 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 20:54:36.068 DEBUG 12520 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 20:54:36.068 DEBUG 12520 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 20:54:36.069 DEBUG 12520 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 20:54:37.852 DEBUG 12520 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 20:54:37.853 DEBUG 12520 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 28(Long)
2021-02-02 20:54:37.861 DEBUG 12520 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 20:54:37.861 DEBUG 12520 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 20:54:37.862 DEBUG 12520 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 20:54:37.863 DEBUG 12520 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 20:54:37.866 DEBUG 12520 --- [http-nio-8080-exec-5] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 20:54:37.866 DEBUG 12520 --- [http-nio-8080-exec-5] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 20:54:37.867 DEBUG 12520 --- [http-nio-8080-exec-5] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 20:54:52.960  WARN 12520 --- [http-nio-8080-exec-6] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 20:54:52.980 DEBUG 12520 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 20:54:52.981 DEBUG 12520 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 20:54:52.982 DEBUG 12520 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 20:54:52.983 DEBUG 12520 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 20:54:52.984 DEBUG 12520 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 20:54:52.989 DEBUG 12520 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 20:54:52.990 DEBUG 12520 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 20:54:52.991 DEBUG 12520 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 17(Long)
2021-02-02 20:54:52.992 DEBUG 12520 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 20:54:52.993 DEBUG 12520 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 20:54:52.993 DEBUG 12520 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 18(Long)
2021-02-02 20:54:52.994 DEBUG 12520 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 20:54:53.007 DEBUG 12520 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 20:54:53.008 DEBUG 12520 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 28(Long)
2021-02-02 20:54:53.012 DEBUG 12520 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 3
2021-02-02 20:54:53.014 DEBUG 12520 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.updateBlog   : ==>  Preparing: update t_blog set published = ?,flag = ? , title = ?, content = ?, type_id = ?, tag_ids = ?, first_picture = ? , description = ? , recommend = ? , share_statement = ?, appreciation = ?, commentabled = ? ,update_time = ? where id = ?
2021-02-02 20:54:53.031 DEBUG 12520 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.updateBlog   : ==> Parameters: true(Boolean), 原创(String), 记录一次线上部署个人项目的流程以及遇到的坑(String), 213132131,1,0,1,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,(String), 25(Long), 16,17,18(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), 主要记录了部署个人项目的流程和过程中遇到的坑(String), true(Boolean), true(Boolean), false(Boolean), true(Boolean), 2021-02-02 20:54:53.002(Timestamp), 28(Long)
2021-02-02 20:54:53.055 DEBUG 12520 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.updateBlog   : <==    Updates: 1
2021-02-02 20:54:53.056 DEBUG 12520 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 20:54:53.057 DEBUG 12520 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 28(Long)
2021-02-02 20:54:53.058 DEBUG 12520 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 20:54:53.059 DEBUG 12520 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 20:54:53.059 DEBUG 12520 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 17(Long), 28(Long)
2021-02-02 20:54:53.060 DEBUG 12520 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 20:54:53.060 DEBUG 12520 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 20:54:53.061 DEBUG 12520 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 18(Long), 28(Long)
2021-02-02 20:54:53.062 DEBUG 12520 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 20:54:53.090 DEBUG 12520 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 20:54:53.091 DEBUG 12520 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 20:54:53.092 DEBUG 12520 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 20:54:53.093 DEBUG 12520 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 20:54:53.093 DEBUG 12520 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 20:54:53.094 DEBUG 12520 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 20:54:53.095 DEBUG 12520 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 20:54:53.095 DEBUG 12520 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 20:54:53.096 DEBUG 12520 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 20:56:43.900  INFO 30868 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 30868 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 20:56:43.902 DEBUG 30868 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 20:56:43.903  INFO 30868 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 20:56:44.011  INFO 30868 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 20:56:44.012  INFO 30868 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 20:56:45.829  INFO 30868 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 20:56:45.836  INFO 30868 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 20:56:45.837  INFO 30868 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 20:56:45.946  INFO 30868 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 20:56:45.946  INFO 30868 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1934 ms
2021-02-02 20:56:46.741  INFO 30868 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 20:56:46.835  INFO 30868 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 20:56:47.211  INFO 30868 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 20:56:47.263  INFO 30868 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 20:56:47.281  INFO 30868 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 4.346 seconds (JVM running for 5.832)
2021-02-02 20:57:58.736  INFO 30868 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 20:57:58.737  INFO 30868 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 20:57:58.749  INFO 30868 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 12 ms
2021-02-02 20:58:00.769  INFO 30868 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 20:58:00.930  INFO 30868 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 20:58:00.936 DEBUG 30868 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : ==>  Preparing: select * from t_user where username = ? and password = ?;
2021-02-02 20:58:00.952 DEBUG 30868 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 20:58:00.965 DEBUG 30868 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 20:58:02.570 DEBUG 30868 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 20:58:02.570 DEBUG 30868 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 20:58:02.572 DEBUG 30868 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 20:58:02.574 DEBUG 30868 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 20:58:02.574 DEBUG 30868 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 20:58:02.575 DEBUG 30868 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 20:58:13.810 DEBUG 30868 --- [http-nio-8080-exec-10] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 20:58:13.810 DEBUG 30868 --- [http-nio-8080-exec-10] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 20:58:13.812 DEBUG 30868 --- [http-nio-8080-exec-10] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 20:58:13.813 DEBUG 30868 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 20:58:13.813 DEBUG 30868 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 20:58:13.813 DEBUG 30868 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 20:59:08.646 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 20:59:08.647 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 20:59:08.648 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 20:59:08.649 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 20:59:08.649 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 20:59:08.650 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 20:59:08.651 DEBUG 30868 --- [http-nio-8080-exec-5] com.personblog.dao.BlogMapper.saveBlog   : ==>  Preparing: insert into t_blog (title, content, first_picture, flag, views, comment_count, appreciation, share_statement, commentabled, published, recommend, create_time, update_time, type_id, user_id, description, tag_ids) values (?,?,?,?,?,?,?, ?,?,?,?,?, ?,?,?,?,?)
2021-02-02 20:59:08.654 DEBUG 30868 --- [http-nio-8080-exec-5] com.personblog.dao.BlogMapper.saveBlog   : ==> Parameters: 记录一次线上部署个人项目的流程以及遇到的坑(String), # 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), 原创(String), 0(Integer), 0(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), false(Boolean), 2021-02-02 20:59:08.65(Timestamp), 2021-02-02 20:59:08.65(Timestamp), 25(Long), 0(Long), 主要是记录一次线上部署个人项目的流程以及遇到的坑(String), 16(String)
2021-02-02 20:59:08.661 DEBUG 30868 --- [http-nio-8080-exec-5] com.personblog.dao.BlogMapper.saveBlog   : <==    Updates: 1
2021-02-02 20:59:08.661 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlog!selectKey    : ==>  Preparing: SELECT LAST_INSERT_ID()
2021-02-02 20:59:08.661 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlog!selectKey    : ==> Parameters: 
2021-02-02 20:59:08.662 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlog!selectKey    : <==      Total: 1
2021-02-02 20:59:08.663 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 20:59:08.663 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 30(Long)
2021-02-02 20:59:08.665 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 20:59:08.683 DEBUG 30868 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 20:59:08.684 DEBUG 30868 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 20:59:08.684 DEBUG 30868 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 20:59:08.690 DEBUG 30868 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 20:59:08.690 DEBUG 30868 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 20:59:08.693 DEBUG 30868 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 20:59:08.693 DEBUG 30868 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 20:59:08.693 DEBUG 30868 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 20:59:08.694 DEBUG 30868 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 20:59:12.813  INFO 30868 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/message', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.message', args=[]}
2021-02-02 20:59:12.817  INFO 30868 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : message
2021-02-02 20:59:13.330  INFO 30868 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/messagecomment', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.messages', args=[{}]}
2021-02-02 20:59:13.332 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.d.MessageMapper.findByParentIdNull   : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 20:59:13.332 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.d.MessageMapper.findByParentIdNull   : ==> Parameters: -1(Long)
2021-02-02 20:59:13.333 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.d.MessageMapper.findByParentIdNull   : <==      Total: 0
2021-02-02 20:59:13.335  INFO 30868 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : message::messageList
2021-02-02 20:59:16.780  INFO 30868 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 20:59:16.790 DEBUG 30868 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 20:59:16.791 DEBUG 30868 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 20:59:16.792 DEBUG 30868 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 20:59:16.793 DEBUG 30868 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 20:59:16.794 DEBUG 30868 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 20:59:16.795 DEBUG 30868 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 20:59:16.796 DEBUG 30868 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 20:59:16.797 DEBUG 30868 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 20:59:16.797 DEBUG 30868 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 20:59:16.798 DEBUG 30868 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 20:59:16.798 DEBUG 30868 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 20:59:16.809 DEBUG 30868 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 20:59:16.811 DEBUG 30868 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 20:59:16.811 DEBUG 30868 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 20:59:16.812 DEBUG 30868 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 20:59:16.812  INFO 30868 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 20:59:18.333  INFO 30868 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/30', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[30, {}]}
2021-02-02 20:59:18.335 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 20:59:18.335 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 30(Long)
2021-02-02 20:59:18.338 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 20:59:18.380 DEBUG 30868 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 20:59:18.380 DEBUG 30868 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 30(Long)
2021-02-02 20:59:18.386 DEBUG 30868 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 20:59:18.387 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 20:59:18.388 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 30(Long), 30(Long), 30(Long)
2021-02-02 20:59:18.391 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 20:59:18.397 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:59:18.397 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 30(Long), -1(Long)
2021-02-02 20:59:18.398 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 20:59:18.399  INFO 30868 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 20:59:19.306  INFO 30868 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/30', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[30, {}]}
2021-02-02 20:59:19.311 DEBUG 30868 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:59:19.311 DEBUG 30868 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 30(Long), -1(Long)
2021-02-02 20:59:19.313 DEBUG 30868 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 20:59:19.313  INFO 30868 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 20:59:42.813  INFO 30868 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/30', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[30, {}]}
2021-02-02 20:59:42.815 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 20:59:42.816 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 30(Long)
2021-02-02 20:59:42.828 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 20:59:42.838 DEBUG 30868 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 20:59:42.839 DEBUG 30868 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 30(Long)
2021-02-02 20:59:42.851 DEBUG 30868 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 20:59:42.852 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 20:59:42.852 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 30(Long), 30(Long), 30(Long)
2021-02-02 20:59:42.855 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 20:59:42.856 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:59:42.856 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 30(Long), -1(Long)
2021-02-02 20:59:42.857 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 20:59:42.857  INFO 30868 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 20:59:43.424  INFO 30868 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/30', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[30, {}]}
2021-02-02 20:59:43.424 DEBUG 30868 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 20:59:43.426 DEBUG 30868 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 30(Long), -1(Long)
2021-02-02 20:59:43.426 DEBUG 30868 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 20:59:43.427  INFO 30868 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 21:00:01.716  INFO 30868 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 21:00:01.720 DEBUG 30868 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 21:00:01.720 DEBUG 30868 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 21:00:01.723 DEBUG 30868 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 21:00:01.724 DEBUG 30868 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 21:00:01.724 DEBUG 30868 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 21:00:01.726 DEBUG 30868 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 21:00:01.728 DEBUG 30868 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 21:00:01.729 DEBUG 30868 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 21:00:01.730 DEBUG 30868 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 21:00:01.732 DEBUG 30868 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 21:00:01.732 DEBUG 30868 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 21:00:01.733 DEBUG 30868 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 21:00:01.733 DEBUG 30868 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 21:00:01.733 DEBUG 30868 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 21:00:01.734 DEBUG 30868 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 21:00:01.734  INFO 30868 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 21:00:05.025  INFO 30868 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/archives', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.ArchiveShowController.archive', args=[{count=Count(id=null, count=null, createTime=null), org.springframework.validation.BindingResult.count=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, Count(id=null, count=null, createTime=null)]}
2021-02-02 21:00:05.031 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.findGroupYear         : ==>  Preparing: select date_format(b.create_time,'%Y') year from t_blog b group by year order by year desc
2021-02-02 21:00:05.032 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.findGroupYear         : ==> Parameters: 
2021-02-02 21:00:05.033 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.findGroupYear         : <==      Total: 1
2021-02-02 21:00:05.034 DEBUG 30868 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.findByYear   : ==>  Preparing: select b.id bid, b.title, b.create_time, b.flag,t.name from t_blog b, t_type t where date_format(b.create_time,'%Y')=? and b.type_id=t.id order by b.create_time desc
2021-02-02 21:00:05.034 DEBUG 30868 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.findByYear   : ==> Parameters: 2021(String)
2021-02-02 21:00:05.035 DEBUG 30868 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.findByYear   : <==      Total: 1
2021-02-02 21:00:05.035 DEBUG 30868 --- [http-nio-8080-exec-5] com.personblog.dao.BlogMapper.count      : ==>  Preparing: select count(*) from t_blog
2021-02-02 21:00:05.035 DEBUG 30868 --- [http-nio-8080-exec-5] com.personblog.dao.BlogMapper.count      : ==> Parameters: 
2021-02-02 21:00:05.036 DEBUG 30868 --- [http-nio-8080-exec-5] com.personblog.dao.BlogMapper.count      : <==      Total: 1
2021-02-02 21:00:05.036 DEBUG 30868 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.deleteCount  : ==>  Preparing: delete from t_count
2021-02-02 21:00:05.036 DEBUG 30868 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.deleteCount  : ==> Parameters: 
2021-02-02 21:00:05.037 DEBUG 30868 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.deleteCount  : <==    Updates: 0
2021-02-02 21:00:05.037 DEBUG 30868 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.insertCount  : ==>  Preparing: insert into t_count(count,create_time) (select count(*) count, create_time from t_blog GROUP BY year(create_time),month(create_time) order by create_time desc)
2021-02-02 21:00:05.038 DEBUG 30868 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.insertCount  : ==> Parameters: 
2021-02-02 21:00:05.048 DEBUG 30868 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.insertCount  : <==    Updates: 1
2021-02-02 21:00:05.049 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.findGroupYear2        : ==>  Preparing: select date_format(t_count.create_time,'%Y年%m月') year1 from t_count GROUP BY year1 order by year1 desc
2021-02-02 21:00:05.049 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.findGroupYear2        : ==> Parameters: 
2021-02-02 21:00:05.050 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.findGroupYear2        : <==      Total: 1
2021-02-02 21:00:05.051 DEBUG 30868 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.findByYear2  : ==>  Preparing: select c.id,c.count,c.create_time from t_count c where date_format(c.create_time,'%Y年%m月')=? order by c.create_time desc
2021-02-02 21:00:05.051 DEBUG 30868 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.findByYear2  : ==> Parameters: 2021年02月(String)
2021-02-02 21:00:05.053 DEBUG 30868 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.findByYear2  : <==      Total: 1
2021-02-02 21:00:05.054  INFO 30868 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : archives
2021-02-02 21:00:08.258  INFO 30868 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 21:00:08.264 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 21:00:08.265 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 21:00:08.265 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 21:00:08.266 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 21:00:08.267 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 21:00:08.269 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 21:00:08.270 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 21:00:08.270 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 21:00:08.270 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 21:00:08.270 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 21:00:08.270 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 21:00:08.270 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 21:00:08.271 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 21:00:08.271 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 21:00:08.271 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 21:00:08.271  INFO 30868 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 21:00:22.385 DEBUG 30868 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 21:00:22.386 DEBUG 30868 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 30(Long)
2021-02-02 21:00:22.387 DEBUG 30868 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 21:00:22.387 DEBUG 30868 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:00:22.388 DEBUG 30868 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:00:22.389 DEBUG 30868 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:00:22.389 DEBUG 30868 --- [http-nio-8080-exec-10] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:00:22.389 DEBUG 30868 --- [http-nio-8080-exec-10] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:00:22.398 DEBUG 30868 --- [http-nio-8080-exec-10] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:00:27.555  WARN 30868 --- [http-nio-8080-exec-4] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 21:00:27.556 DEBUG 30868 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 21:00:27.556 DEBUG 30868 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 21:00:27.557 DEBUG 30868 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 21:00:27.559 DEBUG 30868 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 21:00:27.560 DEBUG 30868 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 21:00:27.561 DEBUG 30868 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 21:00:27.562 DEBUG 30868 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 21:00:27.562 DEBUG 30868 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 30(Long)
2021-02-02 21:00:27.565 DEBUG 30868 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 1
2021-02-02 21:00:27.566 DEBUG 30868 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.updateBlog   : ==>  Preparing: update t_blog set published = ?,flag = ? , title = ?, content = ?, type_id = ?, tag_ids = ?, first_picture = ? , description = ? , recommend = ? , share_statement = ?, appreciation = ?, commentabled = ? ,update_time = ? where id = ?
2021-02-02 21:00:27.568 DEBUG 30868 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.updateBlog   : ==> Parameters: true(Boolean), 原创(String), 记录一次线上部署个人项目的流程以及遇到的坑(String), # 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,,# 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。,(String), 25(Long), 16(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), 主要是记录一次线上部署个人项目的流程以及遇到的坑(String), false(Boolean), true(Boolean), false(Boolean), true(Boolean), 2021-02-02 21:00:27.562(Timestamp), 30(Long)
2021-02-02 21:00:27.574 DEBUG 30868 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.updateBlog   : <==    Updates: 1
2021-02-02 21:00:27.575 DEBUG 30868 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 21:00:27.575 DEBUG 30868 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 30(Long)
2021-02-02 21:00:27.578 DEBUG 30868 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 21:00:27.584 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 21:00:27.584 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 21:00:27.585 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 21:00:27.586 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 21:00:27.586 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 21:00:27.587 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 21:00:27.588 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:00:27.588 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:00:27.588 DEBUG 30868 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:00:32.723  INFO 30868 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 21:00:32.725 DEBUG 30868 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 21:00:32.726 DEBUG 30868 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 21:00:32.727 DEBUG 30868 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 21:00:32.728 DEBUG 30868 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 21:00:32.728 DEBUG 30868 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 21:00:32.740 DEBUG 30868 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 21:00:32.740 DEBUG 30868 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 21:00:32.740 DEBUG 30868 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 21:00:32.741 DEBUG 30868 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 21:00:32.742 DEBUG 30868 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 21:00:32.742 DEBUG 30868 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 21:00:32.745 DEBUG 30868 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 21:00:32.746 DEBUG 30868 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 21:00:32.747 DEBUG 30868 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 21:00:32.747 DEBUG 30868 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 21:00:32.748  INFO 30868 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 21:00:36.811  INFO 30868 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 21:00:36.813 DEBUG 30868 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 21:00:36.814 DEBUG 30868 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 21:00:36.814 DEBUG 30868 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 21:00:36.815 DEBUG 30868 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 21:00:36.816 DEBUG 30868 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 21:00:36.818 DEBUG 30868 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 21:00:36.819 DEBUG 30868 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 21:00:36.820 DEBUG 30868 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 21:00:36.820 DEBUG 30868 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 21:00:36.821 DEBUG 30868 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 21:00:36.821 DEBUG 30868 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 21:00:36.822 DEBUG 30868 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 21:00:36.823 DEBUG 30868 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 21:00:36.823 DEBUG 30868 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 21:00:36.825 DEBUG 30868 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 21:00:36.826  INFO 30868 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 21:00:37.978  INFO 30868 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/30', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[30, {}]}
2021-02-02 21:00:37.980 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 21:00:37.980 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 30(Long)
2021-02-02 21:00:37.985 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 21:00:37.994 DEBUG 30868 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 21:00:37.994 DEBUG 30868 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 30(Long)
2021-02-02 21:00:37.996 DEBUG 30868 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 21:00:37.997 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 21:00:37.997 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 30(Long), 30(Long), 30(Long)
2021-02-02 21:00:37.999 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 21:00:38.000 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 21:00:38.000 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 30(Long), -1(Long)
2021-02-02 21:00:38.000 DEBUG 30868 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 21:00:38.001  INFO 30868 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 21:00:38.864  INFO 30868 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/30', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[30, {}]}
2021-02-02 21:00:38.864 DEBUG 30868 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 21:00:38.865 DEBUG 30868 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 30(Long), -1(Long)
2021-02-02 21:00:38.866 DEBUG 30868 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 21:00:38.866  INFO 30868 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 21:01:01.148 DEBUG 30868 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 21:01:01.149 DEBUG 30868 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 30(Long)
2021-02-02 21:01:01.150 DEBUG 30868 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 21:01:01.150 DEBUG 30868 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:01:01.150 DEBUG 30868 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:01:01.151 DEBUG 30868 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:01:01.151 DEBUG 30868 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:01:01.151 DEBUG 30868 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:01:01.152 DEBUG 30868 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:02:16.177  INFO 28828 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 28828 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 21:02:16.184 DEBUG 28828 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 21:02:16.184  INFO 28828 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 21:02:16.250  INFO 28828 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 21:02:16.251  INFO 28828 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 21:02:18.120  INFO 28828 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 21:02:18.135  INFO 28828 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 21:02:18.135  INFO 28828 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 21:02:18.291  INFO 28828 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 21:02:18.292  INFO 28828 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2041 ms
2021-02-02 21:02:19.239  INFO 28828 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 21:02:19.352  INFO 28828 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 21:02:19.708  INFO 28828 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 21:02:19.752  INFO 28828 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 21:02:19.764  INFO 28828 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 4.507 seconds (JVM running for 6.07)
2021-02-02 21:02:25.070  INFO 28828 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 21:02:25.071  INFO 28828 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 21:02:25.093  INFO 28828 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 22 ms
2021-02-02 21:02:27.653  INFO 28828 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 21:02:27.815  INFO 28828 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 21:02:27.821 DEBUG 28828 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : ==>  Preparing: select * from t_user where username = ? and password = ?;
2021-02-02 21:02:27.837 DEBUG 28828 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 21:02:27.851 DEBUG 28828 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 21:02:29.781 DEBUG 28828 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 21:02:29.782 DEBUG 28828 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 21:02:29.784 DEBUG 28828 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 21:02:29.787 DEBUG 28828 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 21:02:29.788 DEBUG 28828 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 21:02:29.789 DEBUG 28828 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 21:02:29.792 DEBUG 28828 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:02:29.793 DEBUG 28828 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:02:29.795 DEBUG 28828 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:02:32.422 DEBUG 28828 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 21:02:32.423 DEBUG 28828 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 30(Long)
2021-02-02 21:02:32.425 DEBUG 28828 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 1
2021-02-02 21:02:32.426 DEBUG 28828 --- [http-nio-8080-exec-10] c.p.dao.CommentMapper.findIdsByBlogId    : ==>  Preparing: select id from t_comment where blog_id=?
2021-02-02 21:02:32.427 DEBUG 28828 --- [http-nio-8080-exec-10] c.p.dao.CommentMapper.findIdsByBlogId    : ==> Parameters: 30(Long)
2021-02-02 21:02:32.429 DEBUG 28828 --- [http-nio-8080-exec-10] c.p.dao.CommentMapper.findIdsByBlogId    : <==      Total: 0
2021-02-02 21:02:32.430 DEBUG 28828 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.deleteBlog   : ==>  Preparing: delete from t_blog where id = ?
2021-02-02 21:02:32.431 DEBUG 28828 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.deleteBlog   : ==> Parameters: 30(Long)
2021-02-02 21:02:32.432 DEBUG 28828 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.deleteBlog   : <==    Updates: 1
2021-02-02 21:02:32.455 DEBUG 28828 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 21:02:32.456 DEBUG 28828 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 21:02:32.457 DEBUG 28828 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 21:02:32.458 DEBUG 28828 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:02:32.458 DEBUG 28828 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:02:32.461 DEBUG 28828 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:02:43.836 DEBUG 28828 --- [http-nio-8080-exec-7] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:02:43.837 DEBUG 28828 --- [http-nio-8080-exec-7] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:02:43.839 DEBUG 28828 --- [http-nio-8080-exec-7] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:02:43.840 DEBUG 28828 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:02:43.841 DEBUG 28828 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:02:43.843 DEBUG 28828 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:03:13.393 DEBUG 28828 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 21:03:13.393 DEBUG 28828 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 21:03:13.394 DEBUG 28828 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 21:03:13.394 DEBUG 28828 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 21:03:13.395 DEBUG 28828 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 21:03:13.395 DEBUG 28828 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 21:03:13.396 DEBUG 28828 --- [http-nio-8080-exec-6] com.personblog.dao.BlogMapper.saveBlog   : ==>  Preparing: insert into t_blog (title, content, first_picture, flag, views, comment_count, appreciation, share_statement, commentabled, published, recommend, create_time, update_time, type_id, user_id, description, tag_ids) values (?,?,?,?,?,?,?, ?,?,?,?,?, ?,?,?,?,?)
2021-02-02 21:03:13.397 DEBUG 28828 --- [http-nio-8080-exec-6] com.personblog.dao.BlogMapper.saveBlog   : ==> Parameters: 记录一次线上部署个人项目的流程以及遇到的坑(String), 记录一次线上部署个人项目的流程以及遇到的坑,(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), 原创(String), 0(Integer), 0(Integer), false(Boolean), true(Boolean), true(Boolean), true(Boolean), false(Boolean), 2021-02-02 21:03:13.396(Timestamp), 2021-02-02 21:03:13.396(Timestamp), 25(Long), 0(Long), zxzxz(String), 16(String)
2021-02-02 21:03:13.398 DEBUG 28828 --- [http-nio-8080-exec-6] com.personblog.dao.BlogMapper.saveBlog   : <==    Updates: 1
2021-02-02 21:03:13.399 DEBUG 28828 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.saveBlog!selectKey    : ==>  Preparing: SELECT LAST_INSERT_ID()
2021-02-02 21:03:13.399 DEBUG 28828 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.saveBlog!selectKey    : ==> Parameters: 
2021-02-02 21:03:13.400 DEBUG 28828 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.saveBlog!selectKey    : <==      Total: 1
2021-02-02 21:03:13.401 DEBUG 28828 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 21:03:13.401 DEBUG 28828 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 31(Long)
2021-02-02 21:03:13.402 DEBUG 28828 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 21:03:13.417 DEBUG 28828 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 21:03:13.418 DEBUG 28828 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 21:03:13.418 DEBUG 28828 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 21:03:13.419 DEBUG 28828 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 21:03:13.419 DEBUG 28828 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 21:03:13.421 DEBUG 28828 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 21:03:13.424 DEBUG 28828 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:03:13.425 DEBUG 28828 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:03:13.426 DEBUG 28828 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:03:28.160  INFO 28828 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 21:03:28.167 DEBUG 28828 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 21:03:28.167 DEBUG 28828 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 21:03:28.169 DEBUG 28828 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 21:03:28.172 DEBUG 28828 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 21:03:28.173 DEBUG 28828 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 21:03:28.175 DEBUG 28828 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 21:03:28.177 DEBUG 28828 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 21:03:28.177 DEBUG 28828 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 21:03:28.178 DEBUG 28828 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 21:03:28.179 DEBUG 28828 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 21:03:28.179 DEBUG 28828 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 21:03:28.180 DEBUG 28828 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 21:03:28.182 DEBUG 28828 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 21:03:28.182 DEBUG 28828 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 21:03:28.183 DEBUG 28828 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 21:03:28.183  INFO 28828 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 21:03:29.622  INFO 28828 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/31', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[31, {}]}
2021-02-02 21:03:29.624 DEBUG 28828 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 21:03:29.625 DEBUG 28828 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 31(Long)
2021-02-02 21:03:29.628 DEBUG 28828 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 21:03:29.657 DEBUG 28828 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 21:03:29.657 DEBUG 28828 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 31(Long)
2021-02-02 21:03:29.658 DEBUG 28828 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 21:03:29.659 DEBUG 28828 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 21:03:29.659 DEBUG 28828 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 31(Long), 31(Long), 31(Long)
2021-02-02 21:03:29.660 DEBUG 28828 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 21:03:29.728 DEBUG 28828 --- [http-nio-8080-exec-10] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 21:03:29.728 DEBUG 28828 --- [http-nio-8080-exec-10] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 31(Long), -1(Long)
2021-02-02 21:03:29.729 DEBUG 28828 --- [http-nio-8080-exec-10] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 21:03:29.730  INFO 28828 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 21:03:30.393  INFO 28828 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/31', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[31, {}]}
2021-02-02 21:03:30.397 DEBUG 28828 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 21:03:30.397 DEBUG 28828 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 31(Long), -1(Long)
2021-02-02 21:03:30.398 DEBUG 28828 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 21:03:30.398  INFO 28828 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 21:03:39.687 DEBUG 28828 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 21:03:39.687 DEBUG 28828 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 31(Long)
2021-02-02 21:03:39.689 DEBUG 28828 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 21:03:39.691 DEBUG 28828 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:03:39.691 DEBUG 28828 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:03:39.692 DEBUG 28828 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:03:39.693 DEBUG 28828 --- [http-nio-8080-exec-7] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:03:39.693 DEBUG 28828 --- [http-nio-8080-exec-7] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:03:39.694 DEBUG 28828 --- [http-nio-8080-exec-7] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:03:52.999  WARN 28828 --- [http-nio-8080-exec-10] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 21:03:53.002 DEBUG 28828 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 21:03:53.002 DEBUG 28828 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 21:03:53.003 DEBUG 28828 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 21:03:53.004 DEBUG 28828 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 21:03:53.005 DEBUG 28828 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 21:03:53.006 DEBUG 28828 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 21:03:53.007 DEBUG 28828 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 21:03:53.007 DEBUG 28828 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 31(Long)
2021-02-02 21:03:53.008 DEBUG 28828 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 1
2021-02-02 21:03:53.010 DEBUG 28828 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.updateBlog   : ==>  Preparing: update t_blog set published = ?,flag = ? , title = ?, content = ?, type_id = ?, tag_ids = ?, first_picture = ? , description = ? , recommend = ? , share_statement = ?, appreciation = ?, commentabled = ? ,update_time = ? where id = ?
2021-02-02 21:03:53.010 DEBUG 28828 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.updateBlog   : ==> Parameters: true(Boolean), 原创(String), 记录一次线上部署个人项目的流程以及遇到的坑(String), 记录一次线上部署个人项目的流程以及遇到的坑,eqeqweqeq,记录一次线上部署个人项目的流程以及遇到的坑,(String), 25(Long), 16(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), zxzxz(String), false(Boolean), true(Boolean), false(Boolean), true(Boolean), 2021-02-02 21:03:53.007(Timestamp), 31(Long)
2021-02-02 21:03:53.020 DEBUG 28828 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.updateBlog   : <==    Updates: 1
2021-02-02 21:03:53.020 DEBUG 28828 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 21:03:53.021 DEBUG 28828 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 31(Long)
2021-02-02 21:03:53.021 DEBUG 28828 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 21:03:53.032 DEBUG 28828 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 21:03:53.033 DEBUG 28828 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 21:03:53.035 DEBUG 28828 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 21:03:53.037 DEBUG 28828 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 21:03:53.038 DEBUG 28828 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 21:03:53.039 DEBUG 28828 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 21:03:53.040 DEBUG 28828 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:03:53.041 DEBUG 28828 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:03:53.042 DEBUG 28828 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:03:56.861  INFO 28828 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 21:03:56.863 DEBUG 28828 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 21:03:56.863 DEBUG 28828 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 21:03:56.864 DEBUG 28828 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 21:03:56.864 DEBUG 28828 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 21:03:56.865 DEBUG 28828 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 21:03:56.869 DEBUG 28828 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 21:03:56.871 DEBUG 28828 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 21:03:56.871 DEBUG 28828 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 21:03:56.872 DEBUG 28828 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 21:03:56.874 DEBUG 28828 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 21:03:56.874 DEBUG 28828 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 21:03:56.875 DEBUG 28828 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 21:03:56.876 DEBUG 28828 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 21:03:56.876 DEBUG 28828 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 21:03:56.877 DEBUG 28828 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 21:03:56.877  INFO 28828 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 21:03:58.282  INFO 28828 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/31', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[31, {}]}
2021-02-02 21:03:58.284 DEBUG 28828 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 21:03:58.284 DEBUG 28828 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 31(Long)
2021-02-02 21:03:58.287 DEBUG 28828 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 21:03:58.288 DEBUG 28828 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 21:03:58.289 DEBUG 28828 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 31(Long)
2021-02-02 21:03:58.290 DEBUG 28828 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 21:03:58.290 DEBUG 28828 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 21:03:58.291 DEBUG 28828 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 31(Long), 31(Long), 31(Long)
2021-02-02 21:03:58.292 DEBUG 28828 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 21:03:58.294 DEBUG 28828 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 21:03:58.294 DEBUG 28828 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 31(Long), -1(Long)
2021-02-02 21:03:58.295 DEBUG 28828 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 21:03:58.295  INFO 28828 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 21:03:58.941  INFO 28828 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/31', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[31, {}]}
2021-02-02 21:03:58.942 DEBUG 28828 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 21:03:58.943 DEBUG 28828 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 31(Long), -1(Long)
2021-02-02 21:03:58.943 DEBUG 28828 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 21:03:58.944  INFO 28828 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 21:04:08.953 DEBUG 28828 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 21:04:08.953 DEBUG 28828 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 31(Long)
2021-02-02 21:04:08.956 DEBUG 28828 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 21:04:08.958 DEBUG 28828 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:04:08.958 DEBUG 28828 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:04:08.959 DEBUG 28828 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:04:08.960 DEBUG 28828 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:04:08.960 DEBUG 28828 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:04:08.961 DEBUG 28828 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:13:01.126 DEBUG 28828 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 21:13:01.127 DEBUG 28828 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 31(Long)
2021-02-02 21:13:01.128 DEBUG 28828 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 21:13:01.130 DEBUG 28828 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:13:01.131 DEBUG 28828 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:13:01.133 DEBUG 28828 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:13:01.133 DEBUG 28828 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:13:01.134 DEBUG 28828 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:13:01.135 DEBUG 28828 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:16:10.518  INFO 19436 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 19436 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 21:16:10.530 DEBUG 19436 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 21:16:10.530  INFO 19436 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 21:16:10.679  INFO 19436 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 21:16:10.679  INFO 19436 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 21:16:16.346  INFO 19436 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 21:16:16.373  INFO 19436 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 21:16:16.374  INFO 19436 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 21:16:16.578  INFO 19436 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 21:16:16.578  INFO 19436 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 5899 ms
2021-02-02 21:16:18.296  INFO 19436 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 21:16:18.555  INFO 19436 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 21:16:19.301  INFO 19436 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 21:16:19.436  INFO 19436 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 21:16:19.466  INFO 19436 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 10.55 seconds (JVM running for 14.17)
2021-02-02 21:16:25.843  INFO 19436 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 21:16:25.844  INFO 19436 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 21:16:25.895  INFO 19436 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 51 ms
2021-02-02 21:16:30.008  INFO 19436 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 21:16:30.341  INFO 19436 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 21:16:30.359 DEBUG 19436 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : ==>  Preparing: select * from t_user where username = ? and password = ?;
2021-02-02 21:16:30.391 DEBUG 19436 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 21:16:30.415 DEBUG 19436 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 21:16:32.446 DEBUG 19436 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 21:16:32.447 DEBUG 19436 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 21:16:32.452 DEBUG 19436 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 21:16:32.474 DEBUG 19436 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:16:32.475 DEBUG 19436 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:16:32.477 DEBUG 19436 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:16:34.702 DEBUG 19436 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:16:34.703 DEBUG 19436 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:16:34.707 DEBUG 19436 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:16:34.710 DEBUG 19436 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:16:34.710 DEBUG 19436 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:16:34.711 DEBUG 19436 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:16:52.194 DEBUG 19436 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 21:16:52.195 DEBUG 19436 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 21:16:52.196 DEBUG 19436 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 21:16:52.197 DEBUG 19436 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 21:16:52.197 DEBUG 19436 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 21:16:52.204 DEBUG 19436 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 21:16:52.207 DEBUG 19436 --- [http-nio-8080-exec-1] com.personblog.dao.BlogMapper.saveBlog   : ==>  Preparing: insert into t_blog (title, content, first_picture, flag, views, comment_count, appreciation, share_statement, commentabled, published, recommend, create_time, update_time, type_id, user_id, description, tag_ids) values (?,?,?,?,?,?,?, ?,?,?,?,?, ?,?,?,?,?)
2021-02-02 21:16:52.208 DEBUG 19436 --- [http-nio-8080-exec-1] com.personblog.dao.BlogMapper.saveBlog   : ==> Parameters: 库里故事汇(3):当年一哥和库里的那件事(String), hjhj,(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), 原创(String), 0(Integer), 0(Integer), false(Boolean), true(Boolean), false(Boolean), true(Boolean), false(Boolean), 2021-02-02 21:16:52.206(Timestamp), 2021-02-02 21:16:52.206(Timestamp), 25(Long), 0(Long), dsds(String), 16(String)
2021-02-02 21:16:52.209 DEBUG 19436 --- [http-nio-8080-exec-1] com.personblog.dao.BlogMapper.saveBlog   : <==    Updates: 1
2021-02-02 21:16:52.210 DEBUG 19436 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.saveBlog!selectKey    : ==>  Preparing: SELECT LAST_INSERT_ID()
2021-02-02 21:16:52.210 DEBUG 19436 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.saveBlog!selectKey    : ==> Parameters: 
2021-02-02 21:16:52.210 DEBUG 19436 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.saveBlog!selectKey    : <==      Total: 1
2021-02-02 21:16:52.213 DEBUG 19436 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 21:16:52.213 DEBUG 19436 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 32(Long)
2021-02-02 21:16:52.214 DEBUG 19436 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 21:16:52.250 DEBUG 19436 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 21:16:52.252 DEBUG 19436 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 21:16:52.254 DEBUG 19436 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 21:16:52.263 DEBUG 19436 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 21:16:52.263 DEBUG 19436 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 21:16:52.267 DEBUG 19436 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 21:16:52.271 DEBUG 19436 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:16:52.272 DEBUG 19436 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:16:52.272 DEBUG 19436 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:17:32.269 DEBUG 19436 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 21:17:32.271 DEBUG 19436 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 32(Long)
2021-02-02 21:17:32.372 DEBUG 19436 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 21:17:44.542 DEBUG 19436 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:17:44.546 DEBUG 19436 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:17:44.552 DEBUG 19436 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:18:12.587 DEBUG 19436 --- [http-nio-8080-exec-6] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:18:12.605 DEBUG 19436 --- [http-nio-8080-exec-6] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:18:12.618 DEBUG 19436 --- [http-nio-8080-exec-6] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:20:15.652 DEBUG 19436 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 21:20:15.653 DEBUG 19436 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 32(Long)
2021-02-02 21:20:15.654 DEBUG 19436 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 21:20:15.662 DEBUG 19436 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:20:15.662 DEBUG 19436 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:20:15.669 DEBUG 19436 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:20:15.681 DEBUG 19436 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:20:15.681 DEBUG 19436 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:20:15.682 DEBUG 19436 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:20:37.376  INFO 19436 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-02-02 21:20:37.377  INFO 19436 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2021-02-02 21:20:37.382  INFO 19436 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2021-02-02 21:20:51.779  INFO 36900 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 36900 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 21:20:51.784 DEBUG 36900 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 21:20:51.784  INFO 36900 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 21:20:51.907  INFO 36900 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 21:20:51.908  INFO 36900 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 21:20:54.127  INFO 36900 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 21:20:54.140  INFO 36900 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 21:20:54.141  INFO 36900 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 21:20:54.299  INFO 36900 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 21:20:54.300  INFO 36900 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2392 ms
2021-02-02 21:20:55.394  INFO 36900 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 21:20:55.511  INFO 36900 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 21:20:55.983  INFO 36900 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 21:20:56.055  INFO 36900 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 21:20:56.071  INFO 36900 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 5.345 seconds (JVM running for 7.589)
2021-02-02 21:21:02.347  INFO 36900 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 21:21:02.348  INFO 36900 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 21:21:02.363  INFO 36900 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 15 ms
2021-02-02 21:21:04.873  INFO 36900 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 21:21:05.073  INFO 36900 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 21:21:05.081 DEBUG 36900 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : ==>  Preparing: select * from t_user where username = ? and password = ?;
2021-02-02 21:21:05.102 DEBUG 36900 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 21:21:05.117 DEBUG 36900 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 21:21:06.703 DEBUG 36900 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 21:21:06.703 DEBUG 36900 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 21:21:06.708 DEBUG 36900 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 21:21:06.710 DEBUG 36900 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 21:21:06.711 DEBUG 36900 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 21:21:06.712 DEBUG 36900 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 21:21:06.721 DEBUG 36900 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:21:06.722 DEBUG 36900 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:21:06.723 DEBUG 36900 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:21:09.961 DEBUG 36900 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 21:21:09.962 DEBUG 36900 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 32(Long)
2021-02-02 21:21:09.964 DEBUG 36900 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 21:21:09.965 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:21:09.965 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:21:09.966 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:21:09.975 DEBUG 36900 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:21:09.975 DEBUG 36900 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:21:09.976 DEBUG 36900 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:21:19.743  WARN 36900 --- [http-nio-8080-exec-7] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 21:21:19.760 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 21:21:19.760 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 21:21:19.761 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 21:21:19.763 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 21:21:19.764 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 21:21:19.766 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 21:21:19.770 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 21:21:19.771 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 32(Long)
2021-02-02 21:21:19.781 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 1
2021-02-02 21:21:19.784 DEBUG 36900 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.updateBlog   : ==>  Preparing: update t_blog set published = ?,flag = ? , title = ?, content = ?, type_id = ?, tag_ids = ?, first_picture = ? , description = ? , recommend = ? , share_statement = ?, appreciation = ?, commentabled = ? ,update_time = ? where id = ?
2021-02-02 21:21:19.786 DEBUG 36900 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.updateBlog   : ==> Parameters: true(Boolean), 原创(String), 库里故事汇(3):当年一哥和库里的那件事(String), hjhj,fdsfds,hjhj,(String), 25(Long), 16(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), dsds(String), false(Boolean), true(Boolean), false(Boolean), false(Boolean), 2021-02-02 21:21:19.77(Timestamp), 32(Long)
2021-02-02 21:21:19.789 DEBUG 36900 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.updateBlog   : <==    Updates: 1
2021-02-02 21:21:19.790 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 21:21:19.790 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 32(Long)
2021-02-02 21:21:19.791 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 21:21:19.813 DEBUG 36900 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 21:21:19.813 DEBUG 36900 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 21:21:19.813 DEBUG 36900 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 21:21:19.815 DEBUG 36900 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 21:21:19.816 DEBUG 36900 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 21:21:19.819 DEBUG 36900 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 21:21:19.821 DEBUG 36900 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:21:19.822 DEBUG 36900 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:21:19.822 DEBUG 36900 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:21:23.209 DEBUG 36900 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 21:21:23.211 DEBUG 36900 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 32(Long)
2021-02-02 21:21:23.213 DEBUG 36900 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 21:21:23.216 DEBUG 36900 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:21:23.217 DEBUG 36900 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:21:23.219 DEBUG 36900 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:21:23.221 DEBUG 36900 --- [http-nio-8080-exec-10] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:21:23.221 DEBUG 36900 --- [http-nio-8080-exec-10] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:21:23.222 DEBUG 36900 --- [http-nio-8080-exec-10] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:21:32.015  WARN 36900 --- [http-nio-8080-exec-3] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 21:21:32.018 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 21:21:32.019 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 21:21:32.021 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 21:21:32.024 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 21:21:32.024 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 21:21:32.025 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 21:21:32.027 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 21:21:32.027 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 32(Long)
2021-02-02 21:21:32.028 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 1
2021-02-02 21:21:32.028 DEBUG 36900 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.updateBlog   : ==>  Preparing: update t_blog set published = ?,flag = ? , title = ?, content = ?, type_id = ?, tag_ids = ?, first_picture = ? , description = ? , recommend = ? , share_statement = ?, appreciation = ?, commentabled = ? ,update_time = ? where id = ?
2021-02-02 21:21:32.029 DEBUG 36900 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.updateBlog   : ==> Parameters: true(Boolean), 原创(String), 库里故事汇(3):当年一哥和库里的那件事(String), hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,(String), 25(Long), 16(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), dsds(String), false(Boolean), true(Boolean), false(Boolean), false(Boolean), 2021-02-02 21:21:32.026(Timestamp), 32(Long)
2021-02-02 21:21:32.032 DEBUG 36900 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.updateBlog   : <==    Updates: 1
2021-02-02 21:21:32.033 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 21:21:32.035 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 32(Long)
2021-02-02 21:21:32.036 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 21:21:32.044 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 21:21:32.044 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 21:21:32.045 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 21:21:32.049 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 21:21:32.050 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 21:21:32.052 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 21:21:32.054 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:21:32.054 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:21:32.055 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:21:33.901 DEBUG 36900 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 21:21:33.902 DEBUG 36900 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 32(Long)
2021-02-02 21:21:33.903 DEBUG 36900 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 21:21:33.904 DEBUG 36900 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:21:33.905 DEBUG 36900 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:21:33.905 DEBUG 36900 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:21:33.906 DEBUG 36900 --- [http-nio-8080-exec-6] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:21:33.906 DEBUG 36900 --- [http-nio-8080-exec-6] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:21:33.907 DEBUG 36900 --- [http-nio-8080-exec-6] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:22:18.020  INFO 36900 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 21:22:18.034 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 21:22:18.035 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 21:22:18.035 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 21:22:18.036 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 21:22:18.036 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 21:22:18.038 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 21:22:18.039 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 21:22:18.039 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 21:22:18.040 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 21:22:18.042 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 21:22:18.043 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 21:22:18.047 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 21:22:18.051 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 21:22:18.051 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 21:22:18.052 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 21:22:18.053  INFO 36900 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 21:22:19.694  INFO 36900 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/32', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[32, {}]}
2021-02-02 21:22:19.696 DEBUG 36900 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 21:22:19.697 DEBUG 36900 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 32(Long)
2021-02-02 21:22:19.700 DEBUG 36900 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 21:22:19.775 DEBUG 36900 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 21:22:19.777 DEBUG 36900 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 32(Long)
2021-02-02 21:22:19.778 DEBUG 36900 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 21:22:19.779 DEBUG 36900 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 21:22:19.780 DEBUG 36900 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 32(Long), 32(Long), 32(Long)
2021-02-02 21:22:19.784 DEBUG 36900 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 21:22:19.791 DEBUG 36900 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 21:22:19.792 DEBUG 36900 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 32(Long), -1(Long)
2021-02-02 21:22:19.794 DEBUG 36900 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 21:22:19.797  INFO 36900 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 21:22:30.216  INFO 36900 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 21:22:30.220 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 21:22:30.220 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 21:22:30.221 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 21:22:30.222 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 21:22:30.223 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 21:22:30.228 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 21:22:30.230 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 21:22:30.230 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 21:22:30.231 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 21:22:30.233 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 21:22:30.234 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 21:22:30.235 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 21:22:30.236 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 21:22:30.237 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 21:22:30.237 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 21:22:30.238  INFO 36900 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 21:23:53.275  INFO 36900 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/message', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.message', args=[]}
2021-02-02 21:23:53.281  INFO 36900 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : message
2021-02-02 21:23:53.901  INFO 36900 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/messagecomment', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.messages', args=[{}]}
2021-02-02 21:23:53.905 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.d.MessageMapper.findByParentIdNull   : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 21:23:53.906 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.d.MessageMapper.findByParentIdNull   : ==> Parameters: -1(Long)
2021-02-02 21:23:53.908 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.d.MessageMapper.findByParentIdNull   : <==      Total: 0
2021-02-02 21:23:53.909  INFO 36900 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : message::messageList
2021-02-02 21:23:55.495  INFO 36900 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 21:23:55.501 DEBUG 36900 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 21:23:55.502 DEBUG 36900 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 21:23:55.504 DEBUG 36900 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 21:23:55.505 DEBUG 36900 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 21:23:55.505 DEBUG 36900 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 21:23:55.508 DEBUG 36900 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 21:23:55.510 DEBUG 36900 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 21:23:55.510 DEBUG 36900 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 21:23:55.511 DEBUG 36900 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 21:23:55.515 DEBUG 36900 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 21:23:55.515 DEBUG 36900 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 21:23:55.518 DEBUG 36900 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 21:23:55.519 DEBUG 36900 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 21:23:55.520 DEBUG 36900 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 21:23:55.521 DEBUG 36900 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 21:23:55.522  INFO 36900 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 21:25:12.306 DEBUG 36900 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 21:25:12.306 DEBUG 36900 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 32(Long)
2021-02-02 21:25:12.308 DEBUG 36900 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 21:25:12.309 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:25:12.310 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:25:12.310 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:25:12.312 DEBUG 36900 --- [http-nio-8080-exec-8] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:25:12.312 DEBUG 36900 --- [http-nio-8080-exec-8] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:25:12.312 DEBUG 36900 --- [http-nio-8080-exec-8] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:25:16.711 DEBUG 36900 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 21:25:16.711 DEBUG 36900 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 32(Long)
2021-02-02 21:25:16.712 DEBUG 36900 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 21:25:16.713 DEBUG 36900 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:25:16.713 DEBUG 36900 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:25:16.713 DEBUG 36900 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:25:16.714 DEBUG 36900 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:25:16.714 DEBUG 36900 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:25:16.715 DEBUG 36900 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:25:20.858  WARN 36900 --- [http-nio-8080-exec-1] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 21:25:20.860 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 21:25:20.861 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 21:25:20.862 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 21:25:20.864 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 21:25:20.864 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 21:25:20.865 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 21:25:20.866 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 21:25:20.866 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 32(Long)
2021-02-02 21:25:20.869 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 1
2021-02-02 21:25:20.871 DEBUG 36900 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.updateBlog   : ==>  Preparing: update t_blog set published = ?,flag = ? , title = ?, content = ?, type_id = ?, tag_ids = ?, first_picture = ? , description = ? , recommend = ? , share_statement = ?, appreciation = ?, commentabled = ? ,update_time = ? where id = ?
2021-02-02 21:25:20.873 DEBUG 36900 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.updateBlog   : ==> Parameters: true(Boolean), 原创(String), 库里故事汇(3):当年一哥和库里的那件事(String), hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,(String), 25(Long), 16(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), dsds(String), false(Boolean), true(Boolean), false(Boolean), false(Boolean), 2021-02-02 21:25:20.866(Timestamp), 32(Long)
2021-02-02 21:25:20.876 DEBUG 36900 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.updateBlog   : <==    Updates: 1
2021-02-02 21:25:20.876 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 21:25:20.877 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 32(Long)
2021-02-02 21:25:20.878 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 21:25:20.889 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 21:25:20.889 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 21:25:20.890 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 21:25:20.891 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 21:25:20.892 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 21:25:20.893 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 21:25:20.894 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:25:20.894 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:25:20.895 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:25:22.588 DEBUG 36900 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 21:25:22.589 DEBUG 36900 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 32(Long)
2021-02-02 21:25:22.590 DEBUG 36900 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 21:25:22.592 DEBUG 36900 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:25:22.592 DEBUG 36900 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:25:22.592 DEBUG 36900 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:25:22.594 DEBUG 36900 --- [http-nio-8080-exec-4] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:25:22.594 DEBUG 36900 --- [http-nio-8080-exec-4] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:25:22.594 DEBUG 36900 --- [http-nio-8080-exec-4] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:25:26.852  WARN 36900 --- [http-nio-8080-exec-2] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 21:25:26.855 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 21:25:26.855 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 21:25:26.857 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 21:25:26.860 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 21:25:26.860 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 21:25:26.860 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 21:25:26.862 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 21:25:26.862 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 32(Long)
2021-02-02 21:25:26.862 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 1
2021-02-02 21:25:26.863 DEBUG 36900 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.updateBlog   : ==>  Preparing: update t_blog set published = ?,flag = ? , title = ?, content = ?, type_id = ?, tag_ids = ?, first_picture = ? , description = ? , recommend = ? , share_statement = ?, appreciation = ?, commentabled = ? ,update_time = ? where id = ?
2021-02-02 21:25:26.863 DEBUG 36900 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.updateBlog   : ==> Parameters: true(Boolean), 原创(String), 库里故事汇(3):当年一哥和库里的那件事(String), hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,(String), 25(Long), 16(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), dsds(String), false(Boolean), true(Boolean), false(Boolean), false(Boolean), 2021-02-02 21:25:26.861(Timestamp), 32(Long)
2021-02-02 21:25:26.864 DEBUG 36900 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.updateBlog   : <==    Updates: 1
2021-02-02 21:25:26.864 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 21:25:26.865 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 32(Long)
2021-02-02 21:25:26.865 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 21:25:26.873 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 21:25:26.874 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 21:25:26.874 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 21:25:26.875 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 21:25:26.875 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 21:25:26.876 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 21:25:26.877 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:25:26.877 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:25:26.877 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:25:28.617 DEBUG 36900 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 21:25:28.618 DEBUG 36900 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 32(Long)
2021-02-02 21:25:28.619 DEBUG 36900 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 21:25:28.622 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:25:28.623 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:25:28.623 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:25:28.624 DEBUG 36900 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:25:28.624 DEBUG 36900 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:25:28.625 DEBUG 36900 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:25:35.842  WARN 36900 --- [http-nio-8080-exec-3] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 21:25:35.844 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 21:25:35.844 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 21:25:35.845 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 21:25:35.847 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 21:25:35.847 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 21:25:35.848 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 21:25:35.850 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 21:25:35.850 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 32(Long)
2021-02-02 21:25:35.852 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 1
2021-02-02 21:25:35.853 DEBUG 36900 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.updateBlog   : ==>  Preparing: update t_blog set published = ?,flag = ? , title = ?, content = ?, type_id = ?, tag_ids = ?, first_picture = ? , description = ? , recommend = ? , share_statement = ?, appreciation = ?, commentabled = ? ,update_time = ? where id = ?
2021-02-02 21:25:35.854 DEBUG 36900 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.updateBlog   : ==> Parameters: true(Boolean), 原创(String), 库里故事汇(3):当年一哥和库里的那件事(String), hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,(String), 25(Long), 16(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), dsds(String), false(Boolean), true(Boolean), false(Boolean), false(Boolean), 2021-02-02 21:25:35.849(Timestamp), 32(Long)
2021-02-02 21:25:35.858 DEBUG 36900 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.updateBlog   : <==    Updates: 1
2021-02-02 21:25:35.858 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 21:25:35.858 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 32(Long)
2021-02-02 21:25:35.859 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 21:25:35.867 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 21:25:35.867 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 21:25:35.869 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 21:25:35.871 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 21:25:35.871 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 21:25:35.872 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 21:25:35.873 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:25:35.873 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:25:35.874 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:25:37.436 DEBUG 36900 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 21:25:37.436 DEBUG 36900 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 32(Long)
2021-02-02 21:25:37.438 DEBUG 36900 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 21:25:37.439 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:25:37.439 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:25:37.440 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:25:37.441 DEBUG 36900 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:25:37.441 DEBUG 36900 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:25:37.441 DEBUG 36900 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:25:47.774  WARN 36900 --- [http-nio-8080-exec-9] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 21:25:47.776 DEBUG 36900 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 21:25:47.776 DEBUG 36900 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 21:25:47.777 DEBUG 36900 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 21:25:47.778 DEBUG 36900 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 21:25:47.779 DEBUG 36900 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 21:25:47.779 DEBUG 36900 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 21:25:47.781 DEBUG 36900 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 21:25:47.782 DEBUG 36900 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 32(Long)
2021-02-02 21:25:47.784 DEBUG 36900 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 1
2021-02-02 21:25:47.785 DEBUG 36900 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.updateBlog   : ==>  Preparing: update t_blog set published = ?,flag = ? , title = ?, content = ?, type_id = ?, tag_ids = ?, first_picture = ? , description = ? , recommend = ? , share_statement = ?, appreciation = ?, commentabled = ? ,update_time = ? where id = ?
2021-02-02 21:25:47.785 DEBUG 36900 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.updateBlog   : ==> Parameters: true(Boolean), 原创(String), 库里故事汇(3):当年一哥和库里的那件事(String), 1,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,,hjhj,fdsfds,hjhj,(String), 25(Long), 16(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), dsds(String), false(Boolean), true(Boolean), false(Boolean), false(Boolean), 2021-02-02 21:25:47.78(Timestamp), 32(Long)
2021-02-02 21:25:47.788 DEBUG 36900 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.updateBlog   : <==    Updates: 1
2021-02-02 21:25:47.789 DEBUG 36900 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 21:25:47.789 DEBUG 36900 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 32(Long)
2021-02-02 21:25:47.790 DEBUG 36900 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 21:25:47.796 DEBUG 36900 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 21:25:47.797 DEBUG 36900 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 21:25:47.799 DEBUG 36900 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 21:25:47.801 DEBUG 36900 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 21:25:47.802 DEBUG 36900 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 21:25:47.803 DEBUG 36900 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 21:25:47.804 DEBUG 36900 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:25:47.804 DEBUG 36900 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:25:47.805 DEBUG 36900 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:25:51.049 DEBUG 36900 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 21:25:51.049 DEBUG 36900 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 32(Long)
2021-02-02 21:25:51.050 DEBUG 36900 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 21:25:51.052 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:25:51.052 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:25:51.053 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:25:51.054 DEBUG 36900 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:25:51.054 DEBUG 36900 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:25:51.055 DEBUG 36900 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:26:10.734 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 21:26:10.734 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 32(Long)
2021-02-02 21:26:10.735 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 1
2021-02-02 21:26:10.736 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.dao.CommentMapper.findIdsByBlogId    : ==>  Preparing: select id from t_comment where blog_id=?
2021-02-02 21:26:10.736 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.dao.CommentMapper.findIdsByBlogId    : ==> Parameters: 32(Long)
2021-02-02 21:26:10.736 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.dao.CommentMapper.findIdsByBlogId    : <==      Total: 0
2021-02-02 21:26:10.737 DEBUG 36900 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.deleteBlog   : ==>  Preparing: delete from t_blog where id = ?
2021-02-02 21:26:10.737 DEBUG 36900 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.deleteBlog   : ==> Parameters: 32(Long)
2021-02-02 21:26:10.747 DEBUG 36900 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.deleteBlog   : <==    Updates: 1
2021-02-02 21:26:10.754 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 21:26:10.754 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 21:26:10.754 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 21:26:10.755 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:26:10.755 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:26:10.756 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:26:12.427 DEBUG 36900 --- [http-nio-8080-exec-4] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:26:12.427 DEBUG 36900 --- [http-nio-8080-exec-4] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:26:12.428 DEBUG 36900 --- [http-nio-8080-exec-4] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:26:12.431 DEBUG 36900 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:26:12.431 DEBUG 36900 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:26:12.431 DEBUG 36900 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:26:28.907 DEBUG 36900 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 21:26:28.908 DEBUG 36900 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 21:26:28.908 DEBUG 36900 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 21:26:28.912 DEBUG 36900 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 21:26:28.912 DEBUG 36900 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 21:26:28.913 DEBUG 36900 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 21:26:28.915 DEBUG 36900 --- [http-nio-8080-exec-9] com.personblog.dao.BlogMapper.saveBlog   : ==>  Preparing: insert into t_blog (title, content, first_picture, flag, views, comment_count, appreciation, share_statement, commentabled, published, recommend, create_time, update_time, type_id, user_id, description, tag_ids) values (?,?,?,?,?,?,?, ?,?,?,?,?, ?,?,?,?,?)
2021-02-02 21:26:28.916 DEBUG 36900 --- [http-nio-8080-exec-9] com.personblog.dao.BlogMapper.saveBlog   : ==> Parameters: 库里故事汇(3):当年一哥和库里的那件事(String), 12,(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), 原创(String), 0(Integer), 0(Integer), false(Boolean), false(Boolean), false(Boolean), true(Boolean), false(Boolean), 2021-02-02 21:26:28.914(Timestamp), 2021-02-02 21:26:28.914(Timestamp), 25(Long), 0(Long), hj(String), 16(String)
2021-02-02 21:26:28.917 DEBUG 36900 --- [http-nio-8080-exec-9] com.personblog.dao.BlogMapper.saveBlog   : <==    Updates: 1
2021-02-02 21:26:28.918 DEBUG 36900 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlog!selectKey    : ==>  Preparing: SELECT LAST_INSERT_ID()
2021-02-02 21:26:28.918 DEBUG 36900 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlog!selectKey    : ==> Parameters: 
2021-02-02 21:26:28.918 DEBUG 36900 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlog!selectKey    : <==      Total: 1
2021-02-02 21:26:28.919 DEBUG 36900 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 21:26:28.919 DEBUG 36900 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 33(Long)
2021-02-02 21:26:28.920 DEBUG 36900 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 21:26:28.933 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 21:26:28.933 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 21:26:28.934 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 21:26:28.935 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 21:26:28.935 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 21:26:28.937 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 21:26:28.937 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:26:28.938 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:26:28.938 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:26:32.264  INFO 36900 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 21:26:32.267 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 21:26:32.267 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 21:26:32.269 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 21:26:32.270 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 21:26:32.270 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 21:26:32.271 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 21:26:32.272 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 21:26:32.272 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 21:26:32.273 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 21:26:32.274 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 21:26:32.274 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 21:26:32.275 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 21:26:32.278 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 21:26:32.278 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 21:26:32.279 DEBUG 36900 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 21:26:32.280  INFO 36900 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 21:26:33.774  INFO 36900 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/33', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[33, {}]}
2021-02-02 21:26:33.776 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 21:26:33.777 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 33(Long)
2021-02-02 21:26:33.780 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 21:26:33.787 DEBUG 36900 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 21:26:33.787 DEBUG 36900 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 33(Long)
2021-02-02 21:26:33.789 DEBUG 36900 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 21:26:33.789 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 21:26:33.789 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 33(Long), 33(Long), 33(Long)
2021-02-02 21:26:33.790 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 21:26:33.793 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 21:26:33.794 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 33(Long), -1(Long)
2021-02-02 21:26:33.795 DEBUG 36900 --- [http-nio-8080-exec-3] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 21:26:33.795  INFO 36900 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 21:26:42.020 DEBUG 36900 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 21:26:42.020 DEBUG 36900 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 33(Long)
2021-02-02 21:26:42.021 DEBUG 36900 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 21:26:42.022 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:26:42.023 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:26:42.023 DEBUG 36900 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:26:42.026 DEBUG 36900 --- [http-nio-8080-exec-7] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:26:42.027 DEBUG 36900 --- [http-nio-8080-exec-7] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:26:42.027 DEBUG 36900 --- [http-nio-8080-exec-7] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:26:46.701  WARN 36900 --- [http-nio-8080-exec-2] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 21:26:46.702 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 21:26:46.702 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 21:26:46.703 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 21:26:46.705 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 21:26:46.705 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 21:26:46.706 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 21:26:46.707 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 21:26:46.708 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 33(Long)
2021-02-02 21:26:46.710 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 1
2021-02-02 21:26:46.711 DEBUG 36900 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.updateBlog   : ==>  Preparing: update t_blog set published = ?,flag = ? , title = ?, content = ?, type_id = ?, tag_ids = ?, first_picture = ? , description = ? , recommend = ? , share_statement = ?, appreciation = ?, commentabled = ? ,update_time = ? where id = ?
2021-02-02 21:26:46.712 DEBUG 36900 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.updateBlog   : ==> Parameters: true(Boolean), 原创(String), 库里故事汇(3):当年一哥和库里的那件事(String), 12,,12,(String), 25(Long), 16(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), hj(String), false(Boolean), false(Boolean), false(Boolean), false(Boolean), 2021-02-02 21:26:46.706(Timestamp), 33(Long)
2021-02-02 21:26:46.713 DEBUG 36900 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.updateBlog   : <==    Updates: 1
2021-02-02 21:26:46.713 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 21:26:46.713 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 33(Long)
2021-02-02 21:26:46.714 DEBUG 36900 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 21:26:46.720 DEBUG 36900 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 21:26:46.720 DEBUG 36900 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 21:26:46.721 DEBUG 36900 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 21:26:46.721 DEBUG 36900 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 21:26:46.722 DEBUG 36900 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 21:26:46.722 DEBUG 36900 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 21:26:46.723 DEBUG 36900 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:26:46.723 DEBUG 36900 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:26:46.726 DEBUG 36900 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:26:52.701  INFO 36900 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 21:26:52.702 DEBUG 36900 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 21:26:52.703 DEBUG 36900 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 21:26:52.703 DEBUG 36900 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 21:26:52.703 DEBUG 36900 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 21:26:52.704 DEBUG 36900 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 21:26:52.705 DEBUG 36900 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 21:26:52.706 DEBUG 36900 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 21:26:52.707 DEBUG 36900 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 21:26:52.709 DEBUG 36900 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 21:26:52.712 DEBUG 36900 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 21:26:52.712 DEBUG 36900 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 21:26:52.714 DEBUG 36900 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 21:26:52.715 DEBUG 36900 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 21:26:52.716 DEBUG 36900 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 21:26:52.716 DEBUG 36900 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 21:26:52.717  INFO 36900 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 21:26:55.349  INFO 36900 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/32', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[32, {}]}
2021-02-02 21:26:55.350 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 21:26:55.350 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 32(Long)
2021-02-02 21:26:55.350 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 0
2021-02-02 21:26:55.357 ERROR 36900 --- [http-nio-8080-exec-8] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/blog/32, Exception : {}

com.personblog.exception.NotFoundException: 该博客不存在
	at com.personblog.service.impl.BlogServiceImpl.getDetailedBlog(BlogServiceImpl.java:131)
	at com.personblog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$edbaedc8.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:367)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.personblog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$2c5c8eea.getDetailedBlog(<generated>)
	at com.personblog.controller.IndexController.blog(IndexController.java:62)
	at com.personblog.controller.IndexController$$FastClassBySpringCGLIB$$7f9820c6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.personblog.controller.IndexController$$EnhancerBySpringCGLIB$$77102450.blog(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-02-02 21:26:55.363  WARN 36900 --- [http-nio-8080-exec-8] .w.s.m.a.ResponseStatusExceptionResolver : Resolved [com.personblog.exception.NotFoundException: 该博客不存在]
2021-02-02 21:27:00.578  INFO 36900 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/33', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[33, {}]}
2021-02-02 21:27:00.579 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 21:27:00.579 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 33(Long)
2021-02-02 21:27:00.581 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 21:27:00.581 DEBUG 36900 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 21:27:00.581 DEBUG 36900 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 33(Long)
2021-02-02 21:27:00.582 DEBUG 36900 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 21:27:00.583 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 21:27:00.583 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 33(Long), 33(Long), 33(Long)
2021-02-02 21:27:00.584 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 21:27:00.590 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 21:27:00.590 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 33(Long), -1(Long)
2021-02-02 21:27:00.591 DEBUG 36900 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 21:27:00.592  INFO 36900 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 21:27:07.821 DEBUG 36900 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 21:27:07.822 DEBUG 36900 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 33(Long)
2021-02-02 21:27:07.824 DEBUG 36900 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 21:27:07.826 DEBUG 36900 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:27:07.826 DEBUG 36900 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:27:07.827 DEBUG 36900 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:27:07.828 DEBUG 36900 --- [http-nio-8080-exec-5] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:27:07.828 DEBUG 36900 --- [http-nio-8080-exec-5] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:27:07.829 DEBUG 36900 --- [http-nio-8080-exec-5] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:30:20.224  INFO 11496 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 11496 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 21:30:20.227 DEBUG 11496 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 21:30:20.228  INFO 11496 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 21:30:20.317  INFO 11496 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 21:30:20.317  INFO 11496 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 21:30:22.242  INFO 11496 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 21:30:22.253  INFO 11496 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 21:30:22.253  INFO 11496 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 21:30:22.354  INFO 11496 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 21:30:22.355  INFO 11496 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2038 ms
2021-02-02 21:30:23.152  INFO 11496 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 21:30:23.267  INFO 11496 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 21:30:23.645  INFO 11496 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 21:30:23.706  INFO 11496 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 21:30:23.720  INFO 11496 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 4.389 seconds (JVM running for 6.176)
2021-02-02 21:30:48.840  INFO 11496 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 21:30:48.840  INFO 11496 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 21:30:48.853  INFO 11496 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 13 ms
2021-02-02 21:30:51.873  INFO 11496 --- [http-nio-8080-exec-4] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 21:30:52.082  INFO 11496 --- [http-nio-8080-exec-4] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 21:30:52.090 DEBUG 11496 --- [http-nio-8080-exec-4] com.personblog.dao.UserMapper.login      : ==>  Preparing: select * from t_user where username = ? and password = ?;
2021-02-02 21:30:52.110 DEBUG 11496 --- [http-nio-8080-exec-4] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 21:30:52.125 DEBUG 11496 --- [http-nio-8080-exec-4] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 21:30:53.928 DEBUG 11496 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 21:30:53.929 DEBUG 11496 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 21:30:53.934 DEBUG 11496 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 21:30:53.940 DEBUG 11496 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:30:53.941 DEBUG 11496 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:30:53.943 DEBUG 11496 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:30:55.828 DEBUG 11496 --- [http-nio-8080-exec-7] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:30:55.829 DEBUG 11496 --- [http-nio-8080-exec-7] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:30:55.838 DEBUG 11496 --- [http-nio-8080-exec-7] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:30:55.840 DEBUG 11496 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:30:55.840 DEBUG 11496 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:30:55.841 DEBUG 11496 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:31:10.231 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 21:31:10.232 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 21:31:10.233 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 21:31:10.234 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 21:31:10.234 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 21:31:10.236 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 21:31:10.238 DEBUG 11496 --- [http-nio-8080-exec-6] com.personblog.dao.BlogMapper.saveBlog   : ==>  Preparing: insert into t_blog (title, content, first_picture, flag, views, comment_count, appreciation, share_statement, commentabled, published, recommend, create_time, update_time, type_id, user_id, description, tag_ids) values (?,?,?,?,?,?,?, ?,?,?,?,?, ?,?,?,?,?)
2021-02-02 21:31:10.239 DEBUG 11496 --- [http-nio-8080-exec-6] com.personblog.dao.BlogMapper.saveBlog   : ==> Parameters: 库里故事汇(3):当年一哥和库里的那件事(String), 123,(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), 原创(String), 0(Integer), 0(Integer), false(Boolean), false(Boolean), false(Boolean), true(Boolean), false(Boolean), 2021-02-02 21:31:10.237(Timestamp), 2021-02-02 21:31:10.237(Timestamp), 25(Long), 0(Long), 123(String), 16(String)
2021-02-02 21:31:10.243 DEBUG 11496 --- [http-nio-8080-exec-6] com.personblog.dao.BlogMapper.saveBlog   : <==    Updates: 1
2021-02-02 21:31:10.244 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.saveBlog!selectKey    : ==>  Preparing: SELECT LAST_INSERT_ID()
2021-02-02 21:31:10.245 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.saveBlog!selectKey    : ==> Parameters: 
2021-02-02 21:31:10.245 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.saveBlog!selectKey    : <==      Total: 1
2021-02-02 21:31:10.246 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 21:31:10.247 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 34(Long)
2021-02-02 21:31:10.248 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 21:31:10.278 DEBUG 11496 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 21:31:10.278 DEBUG 11496 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 21:31:10.279 DEBUG 11496 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 21:31:10.282 DEBUG 11496 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 21:31:10.282 DEBUG 11496 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 21:31:10.284 DEBUG 11496 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 21:31:10.285 DEBUG 11496 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:31:10.285 DEBUG 11496 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:31:10.286 DEBUG 11496 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:31:42.183 DEBUG 11496 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 21:31:42.184 DEBUG 11496 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 34(Long)
2021-02-02 21:31:42.191 DEBUG 11496 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 21:31:42.193 DEBUG 11496 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:31:42.194 DEBUG 11496 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:31:42.195 DEBUG 11496 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:31:42.197 DEBUG 11496 --- [http-nio-8080-exec-8] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:31:42.198 DEBUG 11496 --- [http-nio-8080-exec-8] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:31:42.200 DEBUG 11496 --- [http-nio-8080-exec-8] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:31:59.528  WARN 11496 --- [http-nio-8080-exec-1] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 21:31:59.530 DEBUG 11496 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 21:31:59.530 DEBUG 11496 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 21:31:59.531 DEBUG 11496 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 21:31:59.534 DEBUG 11496 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 21:31:59.536 DEBUG 11496 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 21:31:59.538 DEBUG 11496 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 21:31:59.540 DEBUG 11496 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 21:31:59.541 DEBUG 11496 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 34(Long)
2021-02-02 21:31:59.545 DEBUG 11496 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 1
2021-02-02 21:31:59.545 DEBUG 11496 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.updateBlog   : ==>  Preparing: update t_blog set published = ?,flag = ? , title = ?, content = ?, type_id = ?, tag_ids = ?, first_picture = ? , description = ? , recommend = ? , share_statement = ?, appreciation = ?, commentabled = ? ,update_time = ? where id = ?
2021-02-02 21:31:59.546 DEBUG 11496 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.updateBlog   : ==> Parameters: true(Boolean), 原创(String), 库里故事汇(3):当年一哥和库里的那件事(String), 123,,123,(String), 25(Long), 16(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), 123(String), false(Boolean), false(Boolean), false(Boolean), false(Boolean), 2021-02-02 21:31:59.54(Timestamp), 34(Long)
2021-02-02 21:31:59.549 DEBUG 11496 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.updateBlog   : <==    Updates: 1
2021-02-02 21:31:59.551 DEBUG 11496 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 21:31:59.552 DEBUG 11496 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 34(Long)
2021-02-02 21:31:59.553 DEBUG 11496 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 21:31:59.564 DEBUG 11496 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 21:31:59.564 DEBUG 11496 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 21:31:59.564 DEBUG 11496 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 21:31:59.565 DEBUG 11496 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 21:31:59.565 DEBUG 11496 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 21:31:59.567 DEBUG 11496 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 21:31:59.570 DEBUG 11496 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:31:59.570 DEBUG 11496 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:31:59.571 DEBUG 11496 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:36:01.990 DEBUG 11496 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 21:36:01.991 DEBUG 11496 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 34(Long)
2021-02-02 21:36:01.992 DEBUG 11496 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 21:36:01.993 DEBUG 11496 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:36:01.994 DEBUG 11496 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:36:01.994 DEBUG 11496 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:36:01.996 DEBUG 11496 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:36:01.996 DEBUG 11496 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:36:01.997 DEBUG 11496 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:36:07.884  WARN 11496 --- [http-nio-8080-exec-6] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 21:36:07.886 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 21:36:07.887 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 21:36:07.890 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 21:36:07.892 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 21:36:07.893 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 21:36:07.893 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 21:36:07.894 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 21:36:07.895 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 34(Long)
2021-02-02 21:36:07.898 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 1
2021-02-02 21:36:07.898 DEBUG 11496 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.updateBlog   : ==>  Preparing: update t_blog set published = ?,flag = ? , title = ?, content = ?, type_id = ?, tag_ids = ?, first_picture = ? , description = ? , recommend = ? , share_statement = ?, appreciation = ?, commentabled = ? ,update_time = ? where id = ?
2021-02-02 21:36:07.899 DEBUG 11496 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.updateBlog   : ==> Parameters: true(Boolean), 原创(String), 库里故事汇(3):当年一哥和库里的那件事(String), 123,,123,,123,,123,(String), 25(Long), 16(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), 123(String), false(Boolean), false(Boolean), false(Boolean), false(Boolean), 2021-02-02 21:36:07.894(Timestamp), 34(Long)
2021-02-02 21:36:07.902 DEBUG 11496 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.updateBlog   : <==    Updates: 1
2021-02-02 21:36:07.903 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 21:36:07.903 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 34(Long)
2021-02-02 21:36:07.907 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 21:36:07.916 DEBUG 11496 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 21:36:07.916 DEBUG 11496 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 21:36:07.917 DEBUG 11496 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 21:36:07.924 DEBUG 11496 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 21:36:07.925 DEBUG 11496 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 21:36:07.926 DEBUG 11496 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 21:36:07.927 DEBUG 11496 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:36:07.927 DEBUG 11496 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:36:07.928 DEBUG 11496 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:36:11.279  INFO 11496 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 21:36:11.289 DEBUG 11496 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 21:36:11.289 DEBUG 11496 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 21:36:11.294 DEBUG 11496 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 21:36:11.294 DEBUG 11496 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 21:36:11.295 DEBUG 11496 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 21:36:11.296 DEBUG 11496 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 21:36:11.298 DEBUG 11496 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 21:36:11.298 DEBUG 11496 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 21:36:11.299 DEBUG 11496 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 21:36:11.300 DEBUG 11496 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 21:36:11.300 DEBUG 11496 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 21:36:11.304 DEBUG 11496 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 21:36:11.309 DEBUG 11496 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 21:36:11.310 DEBUG 11496 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 21:36:11.310 DEBUG 11496 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 21:36:11.311  INFO 11496 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 21:36:15.607  INFO 11496 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/33', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[33, {}]}
2021-02-02 21:36:15.608 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 21:36:15.608 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 33(Long)
2021-02-02 21:36:15.609 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 0
2021-02-02 21:36:15.613 ERROR 11496 --- [http-nio-8080-exec-6] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/blog/33, Exception : {}

com.personblog.exception.NotFoundException: 该博客不存在
	at com.personblog.service.impl.BlogServiceImpl.getDetailedBlog(BlogServiceImpl.java:131)
	at com.personblog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$edbaedc8.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:367)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.personblog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$8bf0eaad.getDetailedBlog(<generated>)
	at com.personblog.controller.IndexController.blog(IndexController.java:62)
	at com.personblog.controller.IndexController$$FastClassBySpringCGLIB$$7f9820c6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.personblog.controller.IndexController$$EnhancerBySpringCGLIB$$8a360b20.blog(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-02-02 21:36:15.615  WARN 11496 --- [http-nio-8080-exec-6] .w.s.m.a.ResponseStatusExceptionResolver : Resolved [com.personblog.exception.NotFoundException: 该博客不存在]
2021-02-02 21:36:18.236  INFO 11496 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/33', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[33, {}]}
2021-02-02 21:36:18.237 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 21:36:18.237 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 33(Long)
2021-02-02 21:36:18.238 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 0
2021-02-02 21:36:18.240 ERROR 11496 --- [http-nio-8080-exec-6] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/blog/33, Exception : {}

com.personblog.exception.NotFoundException: 该博客不存在
	at com.personblog.service.impl.BlogServiceImpl.getDetailedBlog(BlogServiceImpl.java:131)
	at com.personblog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$edbaedc8.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:367)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.personblog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$8bf0eaad.getDetailedBlog(<generated>)
	at com.personblog.controller.IndexController.blog(IndexController.java:62)
	at com.personblog.controller.IndexController$$FastClassBySpringCGLIB$$7f9820c6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.personblog.controller.IndexController$$EnhancerBySpringCGLIB$$8a360b20.blog(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-02-02 21:36:18.241  WARN 11496 --- [http-nio-8080-exec-6] .w.s.m.a.ResponseStatusExceptionResolver : Resolved [com.personblog.exception.NotFoundException: 该博客不存在]
2021-02-02 21:36:32.039  INFO 11496 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/34', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[34, {}]}
2021-02-02 21:36:32.040 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 21:36:32.041 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 34(Long)
2021-02-02 21:36:32.044 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 21:36:32.093 DEBUG 11496 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 21:36:32.093 DEBUG 11496 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 34(Long)
2021-02-02 21:36:32.099 DEBUG 11496 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 21:36:32.100 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 21:36:32.100 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 34(Long), 34(Long), 34(Long)
2021-02-02 21:36:32.103 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 21:36:32.107 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 21:36:32.108 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 34(Long), -1(Long)
2021-02-02 21:36:32.108 DEBUG 11496 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 21:36:32.109  INFO 11496 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 21:36:35.495 DEBUG 11496 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 21:36:35.495 DEBUG 11496 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 34(Long)
2021-02-02 21:36:35.496 DEBUG 11496 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 21:36:35.501 DEBUG 11496 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:36:35.501 DEBUG 11496 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:36:35.502 DEBUG 11496 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:36:35.505 DEBUG 11496 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:36:35.505 DEBUG 11496 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:36:35.517 DEBUG 11496 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:36:39.068  WARN 11496 --- [http-nio-8080-exec-10] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 21:36:39.072 DEBUG 11496 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 21:36:39.072 DEBUG 11496 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 21:36:39.073 DEBUG 11496 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 21:36:39.075 DEBUG 11496 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 21:36:39.075 DEBUG 11496 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 21:36:39.076 DEBUG 11496 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 21:36:39.077 DEBUG 11496 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 21:36:39.078 DEBUG 11496 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 34(Long)
2021-02-02 21:36:39.078 DEBUG 11496 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 1
2021-02-02 21:36:39.079 DEBUG 11496 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.updateBlog   : ==>  Preparing: update t_blog set published = ?,flag = ? , title = ?, content = ?, type_id = ?, tag_ids = ?, first_picture = ? , description = ? , recommend = ? , share_statement = ?, appreciation = ?, commentabled = ? ,update_time = ? where id = ?
2021-02-02 21:36:39.081 DEBUG 11496 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.updateBlog   : ==> Parameters: true(Boolean), 原创(String), 库里故事汇(3):当年一哥和库里的那件事(String), 123,,123,,123,,123,,123,,123,,123,,123,(String), 25(Long), 16(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), 123(String), false(Boolean), false(Boolean), false(Boolean), false(Boolean), 2021-02-02 21:36:39.077(Timestamp), 34(Long)
2021-02-02 21:36:39.087 DEBUG 11496 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.updateBlog   : <==    Updates: 1
2021-02-02 21:36:39.088 DEBUG 11496 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 21:36:39.089 DEBUG 11496 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 34(Long)
2021-02-02 21:36:39.090 DEBUG 11496 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 21:36:39.096 DEBUG 11496 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 21:36:39.096 DEBUG 11496 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 21:36:39.096 DEBUG 11496 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 21:36:39.100 DEBUG 11496 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 21:36:39.101 DEBUG 11496 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 21:36:39.103 DEBUG 11496 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 21:36:39.105 DEBUG 11496 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:36:39.105 DEBUG 11496 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:36:39.105 DEBUG 11496 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:36:47.375  INFO 11496 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/34', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[34, {}]}
2021-02-02 21:36:47.376 DEBUG 11496 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 21:36:47.376 DEBUG 11496 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 34(Long)
2021-02-02 21:36:47.377 DEBUG 11496 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 21:36:47.378 DEBUG 11496 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 21:36:47.378 DEBUG 11496 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 34(Long)
2021-02-02 21:36:47.379 DEBUG 11496 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 21:36:47.380 DEBUG 11496 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 21:36:47.380 DEBUG 11496 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 34(Long), 34(Long), 34(Long)
2021-02-02 21:36:47.382 DEBUG 11496 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 21:36:47.393 DEBUG 11496 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 21:36:47.393 DEBUG 11496 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 34(Long), -1(Long)
2021-02-02 21:36:47.393 DEBUG 11496 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 21:36:47.394  INFO 11496 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 21:39:36.974  INFO 11496 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 21:39:36.980 DEBUG 11496 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 21:39:36.981 DEBUG 11496 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 21:39:36.982 DEBUG 11496 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 21:39:36.982 DEBUG 11496 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 21:39:36.982 DEBUG 11496 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 21:39:36.983 DEBUG 11496 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 21:39:36.985 DEBUG 11496 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 21:39:36.985 DEBUG 11496 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 21:39:36.986 DEBUG 11496 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 21:39:36.987 DEBUG 11496 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 21:39:36.987 DEBUG 11496 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 21:39:36.987 DEBUG 11496 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 21:39:36.988 DEBUG 11496 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 21:39:36.989 DEBUG 11496 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 21:39:36.998 DEBUG 11496 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 21:39:37.000  INFO 11496 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 21:43:21.005  INFO 16996 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 16996 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 21:43:21.057 DEBUG 16996 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 21:43:21.057  INFO 16996 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 21:43:21.134  INFO 16996 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 21:43:21.134  INFO 16996 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 21:43:22.900  INFO 16996 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 21:43:22.914  INFO 16996 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 21:43:22.916  INFO 16996 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 21:43:23.125  INFO 16996 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 21:43:23.125  INFO 16996 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1991 ms
2021-02-02 21:43:24.021  INFO 16996 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 21:43:24.125  INFO 16996 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 21:43:24.487  INFO 16996 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 21:43:24.538  INFO 16996 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 21:43:24.548  INFO 16996 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 4.246 seconds (JVM running for 5.646)
2021-02-02 21:43:32.591  INFO 16996 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 21:43:32.592  INFO 16996 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 21:43:32.604  INFO 16996 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 12 ms
2021-02-02 21:43:34.706  INFO 16996 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 21:43:34.879  INFO 16996 --- [http-nio-8080-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 21:43:34.887 DEBUG 16996 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : ==>  Preparing: select * from t_user where username = ? and password = ?;
2021-02-02 21:43:34.904 DEBUG 16996 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 21:43:34.919 DEBUG 16996 --- [http-nio-8080-exec-2] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 21:43:36.547 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 21:43:36.548 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 21:43:36.551 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 21:43:36.553 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 21:43:36.554 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 21:43:36.556 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 21:43:36.562 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:43:36.563 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:43:36.566 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:43:40.986 DEBUG 16996 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.searchByTitleOrType   : ==>  Preparing: select b.id, b.title, b.update_time, b.type_id, t.id , t.name from t_blog b left join t_type t on b.type_id = t.id WHERE b.type_id=? and b.title like ? order by b.create_time desc
2021-02-02 21:43:40.987 DEBUG 16996 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.searchByTitleOrType   : ==> Parameters: 25(Long), %%(String)
2021-02-02 21:43:40.989 DEBUG 16996 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.searchByTitleOrType   : <==      Total: 1
2021-02-02 21:43:43.002 DEBUG 16996 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.searchByTitleOrType   : ==>  Preparing: select b.id, b.title, b.update_time, b.type_id, t.id , t.name from t_blog b left join t_type t on b.type_id = t.id WHERE b.title like ? order by b.create_time desc
2021-02-02 21:43:43.002 DEBUG 16996 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.searchByTitleOrType   : ==> Parameters: %%(String)
2021-02-02 21:43:43.004 DEBUG 16996 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.searchByTitleOrType   : <==      Total: 1
2021-02-02 21:43:43.594 DEBUG 16996 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.searchByTitleOrType   : ==>  Preparing: select b.id, b.title, b.update_time, b.type_id, t.id , t.name from t_blog b left join t_type t on b.type_id = t.id WHERE b.title like ? order by b.create_time desc
2021-02-02 21:43:43.596 DEBUG 16996 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.searchByTitleOrType   : ==> Parameters: %%(String)
2021-02-02 21:43:43.598 DEBUG 16996 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.searchByTitleOrType   : <==      Total: 1
2021-02-02 21:43:44.654 DEBUG 16996 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 21:43:44.655 DEBUG 16996 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 34(Long)
2021-02-02 21:43:44.661 DEBUG 16996 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 21:43:44.664 DEBUG 16996 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:43:44.664 DEBUG 16996 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:43:44.666 DEBUG 16996 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:43:44.685 DEBUG 16996 --- [http-nio-8080-exec-7] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:43:44.685 DEBUG 16996 --- [http-nio-8080-exec-7] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:43:44.686 DEBUG 16996 --- [http-nio-8080-exec-7] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:43:48.401  WARN 16996 --- [http-nio-8080-exec-6] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 21:43:48.418 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 21:43:48.419 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 21:43:48.419 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 21:43:48.421 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 21:43:48.421 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 21:43:48.422 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 21:43:48.424 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 21:43:48.425 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 34(Long)
2021-02-02 21:43:48.426 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 1
2021-02-02 21:43:48.430 DEBUG 16996 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.updateBlog   : ==>  Preparing: update t_blog set published = ?,flag = ? , title = ?, content = ?, type_id = ?, tag_ids = ?, first_picture = ? , description = ? , recommend = ? , share_statement = ?, appreciation = ?, commentabled = ? ,update_time = ? where id = ?
2021-02-02 21:43:48.432 DEBUG 16996 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.updateBlog   : ==> Parameters: true(Boolean), 原创(String), 库里故事汇(3):当年一哥和库里的那件事(String), 123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,(String), 25(Long), 16(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), 123(String), false(Boolean), false(Boolean), false(Boolean), false(Boolean), 2021-02-02 21:43:48.424(Timestamp), 34(Long)
2021-02-02 21:43:48.433 DEBUG 16996 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.updateBlog   : <==    Updates: 1
2021-02-02 21:43:48.434 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 21:43:48.435 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 34(Long)
2021-02-02 21:43:48.436 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 21:43:48.454 DEBUG 16996 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 21:43:48.455 DEBUG 16996 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 21:43:48.456 DEBUG 16996 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 21:43:48.457 DEBUG 16996 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 21:43:48.458 DEBUG 16996 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 21:43:48.459 DEBUG 16996 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 21:43:48.463 DEBUG 16996 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:43:48.463 DEBUG 16996 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:43:48.464 DEBUG 16996 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:44:07.588 DEBUG 16996 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getBlogById_COUNT     : ==>  Preparing: SELECT count(0) FROM t_blog b WHERE b.id = ?
2021-02-02 21:44:07.588 DEBUG 16996 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getBlogById_COUNT     : ==> Parameters: 34(Long)
2021-02-02 21:44:07.589 DEBUG 16996 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getBlogById_COUNT     : <==      Total: 1
2021-02-02 21:44:07.593 DEBUG 16996 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ? LIMIT ?
2021-02-02 21:44:07.593 DEBUG 16996 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 34(Long), 5(Integer)
2021-02-02 21:44:07.595 DEBUG 16996 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 21:44:07.596 DEBUG 16996 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:44:07.597 DEBUG 16996 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:44:07.597 DEBUG 16996 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:44:07.599 DEBUG 16996 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:44:07.599 DEBUG 16996 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:44:07.600 DEBUG 16996 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:49:06.493  INFO 16996 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/message', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.message', args=[]}
2021-02-02 21:49:06.502  INFO 16996 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : message
2021-02-02 21:49:07.168  INFO 16996 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/messagecomment', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.messages', args=[{}]}
2021-02-02 21:49:07.175 DEBUG 16996 --- [http-nio-8080-exec-8] c.p.d.MessageMapper.findByParentIdNull   : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 21:49:07.175 DEBUG 16996 --- [http-nio-8080-exec-8] c.p.d.MessageMapper.findByParentIdNull   : ==> Parameters: -1(Long)
2021-02-02 21:49:07.177 DEBUG 16996 --- [http-nio-8080-exec-8] c.p.d.MessageMapper.findByParentIdNull   : <==      Total: 0
2021-02-02 21:49:07.178  INFO 16996 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : message::messageList
2021-02-02 21:49:12.881  INFO 16996 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/message', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.post', args=[Message(id=null, nickname=tml, email=tang_mengliang@163.com, content=1, avatar=null, createTime=null, parentMessageId=null, adminMessage=false, replyMessages=[], parentMessage=Message(id=-1, nickname=null, email=null, content=null, avatar=null, createTime=null, parentMessageId=null, adminMessage=false, replyMessages=[], parentMessage=null, parentNickname=null), parentNickname=null), org.apache.catalina.session.StandardSessionFacade@464e70fe, {message=Message(id=null, nickname=tml, email=tang_mengliang@163.com, content=1, avatar=null, createTime=null, parentMessageId=null, adminMessage=false, replyMessages=[], parentMessage=Message(id=-1, nickname=null, email=null, content=null, avatar=null, createTime=null, parentMessageId=null, adminMessage=false, replyMessages=[], parentMessage=null, parentNickname=null), parentNickname=null), org.springframework.validation.BindingResult.message=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2021-02-02 21:49:12.882 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.dao.MessageMapper.saveMessage        : ==>  Preparing: insert into t_message (nickname,email,content,avatar,create_time,parent_message_id,admin_message) values (?,?,?,?,?,?,?);
2021-02-02 21:49:12.883 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.dao.MessageMapper.saveMessage        : ==> Parameters: tml(String), tang_mengliang@163.com(String), 1(String), /images/huge.jpg(String), 2021-02-02 21:49:12.882(Timestamp), -1(Long), true(Boolean)
2021-02-02 21:49:12.885 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.dao.MessageMapper.saveMessage        : <==    Updates: 1
2021-02-02 21:49:12.891 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.d.MessageMapper.findByParentIdNull   : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 21:49:12.891 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.d.MessageMapper.findByParentIdNull   : ==> Parameters: -1(Long)
2021-02-02 21:49:12.893 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.d.MessageMapper.findByParentIdNull   : <==      Total: 1
2021-02-02 21:49:12.893 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 21:49:12.893 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 121(Long)
2021-02-02 21:49:12.894 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.d.M.findByParentIdNotNull            : <==      Total: 0
2021-02-02 21:49:12.895  INFO 16996 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : message::messageList
2021-02-02 21:49:20.745  INFO 16996 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/message', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.message', args=[]}
2021-02-02 21:49:20.745  INFO 16996 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : message
2021-02-02 21:49:21.192  INFO 16996 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/messagecomment', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.messages', args=[{}]}
2021-02-02 21:49:21.195 DEBUG 16996 --- [http-nio-8080-exec-4] c.p.d.M.findByParentIdNull_COUNT         : ==>  Preparing: SELECT count(0) FROM t_message c WHERE c.parent_message_id = ?
2021-02-02 21:49:21.196 DEBUG 16996 --- [http-nio-8080-exec-4] c.p.d.M.findByParentIdNull_COUNT         : ==> Parameters: -1(Long)
2021-02-02 21:49:21.196 DEBUG 16996 --- [http-nio-8080-exec-4] c.p.d.M.findByParentIdNull_COUNT         : <==      Total: 1
2021-02-02 21:49:21.197 DEBUG 16996 --- [http-nio-8080-exec-4] c.p.d.MessageMapper.findByParentIdNull   : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc LIMIT ?
2021-02-02 21:49:21.197 DEBUG 16996 --- [http-nio-8080-exec-4] c.p.d.MessageMapper.findByParentIdNull   : ==> Parameters: -1(Long), 5(Integer)
2021-02-02 21:49:21.200 DEBUG 16996 --- [http-nio-8080-exec-4] c.p.d.MessageMapper.findByParentIdNull   : <==      Total: 1
2021-02-02 21:49:21.204 DEBUG 16996 --- [http-nio-8080-exec-4] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 21:49:21.205 DEBUG 16996 --- [http-nio-8080-exec-4] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 121(Long)
2021-02-02 21:49:21.207 DEBUG 16996 --- [http-nio-8080-exec-4] c.p.d.M.findByParentIdNotNull            : <==      Total: 0
2021-02-02 21:49:21.209  INFO 16996 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : message::messageList
2021-02-02 21:49:24.060  INFO 16996 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/message', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.message', args=[]}
2021-02-02 21:49:24.060  INFO 16996 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : message
2021-02-02 21:49:24.483  INFO 16996 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/messagecomment', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.messages', args=[{}]}
2021-02-02 21:49:24.487 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.d.MessageMapper.findByParentIdNull   : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 21:49:24.487 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.d.MessageMapper.findByParentIdNull   : ==> Parameters: -1(Long)
2021-02-02 21:49:24.489 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.d.MessageMapper.findByParentIdNull   : <==      Total: 1
2021-02-02 21:49:24.490 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 21:49:24.490 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 121(Long)
2021-02-02 21:49:24.490 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.d.M.findByParentIdNotNull            : <==      Total: 0
2021-02-02 21:49:24.491  INFO 16996 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : message::messageList
2021-02-02 21:49:33.539  INFO 16996 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 21:49:33.557 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 21:49:33.558 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 21:49:33.558 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 21:49:33.559 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 21:49:33.559 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 21:49:33.561 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 21:49:33.563 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 21:49:33.563 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 21:49:33.564 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 21:49:33.566 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 21:49:33.567 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 21:49:33.572 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 21:49:33.578 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 21:49:33.578 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 21:49:33.580 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 21:49:33.581  INFO 16996 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 21:49:35.712  INFO 16996 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/message', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.message', args=[]}
2021-02-02 21:49:35.712  INFO 16996 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : message
2021-02-02 21:49:36.165  INFO 16996 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/messagecomment', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.messages', args=[{}]}
2021-02-02 21:49:36.166 DEBUG 16996 --- [http-nio-8080-exec-10] c.p.d.MessageMapper.findByParentIdNull   : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 21:49:36.167 DEBUG 16996 --- [http-nio-8080-exec-10] c.p.d.MessageMapper.findByParentIdNull   : ==> Parameters: -1(Long)
2021-02-02 21:49:36.169 DEBUG 16996 --- [http-nio-8080-exec-10] c.p.d.MessageMapper.findByParentIdNull   : <==      Total: 1
2021-02-02 21:49:36.170 DEBUG 16996 --- [http-nio-8080-exec-10] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 21:49:36.170 DEBUG 16996 --- [http-nio-8080-exec-10] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 121(Long)
2021-02-02 21:49:36.171 DEBUG 16996 --- [http-nio-8080-exec-10] c.p.d.M.findByParentIdNotNull            : <==      Total: 0
2021-02-02 21:49:36.172  INFO 16996 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Result : message::messageList
2021-02-02 21:49:51.720 DEBUG 16996 --- [http-nio-8080-exec-8] com.personblog.dao.UserMapper.login      : ==>  Preparing: select * from t_user where username = ? and password = ?;
2021-02-02 21:49:51.721 DEBUG 16996 --- [http-nio-8080-exec-8] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 21:49:51.722 DEBUG 16996 --- [http-nio-8080-exec-8] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 21:49:54.323  INFO 16996 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/message', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.message', args=[]}
2021-02-02 21:49:54.324  INFO 16996 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Result : message
2021-02-02 21:49:54.796  INFO 16996 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/messagecomment', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.messages', args=[{}]}
2021-02-02 21:49:54.798 DEBUG 16996 --- [http-nio-8080-exec-7] c.p.d.MessageMapper.findByParentIdNull   : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 21:49:54.799 DEBUG 16996 --- [http-nio-8080-exec-7] c.p.d.MessageMapper.findByParentIdNull   : ==> Parameters: -1(Long)
2021-02-02 21:49:54.800 DEBUG 16996 --- [http-nio-8080-exec-7] c.p.d.MessageMapper.findByParentIdNull   : <==      Total: 1
2021-02-02 21:49:54.801 DEBUG 16996 --- [http-nio-8080-exec-7] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 21:49:54.802 DEBUG 16996 --- [http-nio-8080-exec-7] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 121(Long)
2021-02-02 21:49:54.803 DEBUG 16996 --- [http-nio-8080-exec-7] c.p.d.M.findByParentIdNotNull            : <==      Total: 0
2021-02-02 21:49:54.804  INFO 16996 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : message::messageList
2021-02-02 21:50:05.371  INFO 16996 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/message', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.message', args=[]}
2021-02-02 21:50:05.372  INFO 16996 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : message
2021-02-02 21:50:05.783  INFO 16996 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/messagecomment', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.messages', args=[{}]}
2021-02-02 21:50:05.784 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.d.MessageMapper.findByParentIdNull   : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 21:50:05.785 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.d.MessageMapper.findByParentIdNull   : ==> Parameters: -1(Long)
2021-02-02 21:50:05.787 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.d.MessageMapper.findByParentIdNull   : <==      Total: 1
2021-02-02 21:50:05.787 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 21:50:05.788 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 121(Long)
2021-02-02 21:50:05.788 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.d.M.findByParentIdNotNull            : <==      Total: 0
2021-02-02 21:50:05.789  INFO 16996 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : message::messageList
2021-02-02 21:50:12.773 DEBUG 16996 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 21:50:12.773 DEBUG 16996 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 21:50:12.774 DEBUG 16996 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 21:50:12.775 DEBUG 16996 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 21:50:12.775 DEBUG 16996 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 21:50:12.776 DEBUG 16996 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 21:50:12.777 DEBUG 16996 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:50:12.778 DEBUG 16996 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:50:12.780 DEBUG 16996 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:50:14.854 DEBUG 16996 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 21:50:14.854 DEBUG 16996 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 34(Long)
2021-02-02 21:50:14.857 DEBUG 16996 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 21:50:14.858 DEBUG 16996 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:50:14.859 DEBUG 16996 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:50:14.860 DEBUG 16996 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:50:14.864 DEBUG 16996 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:50:14.865 DEBUG 16996 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:50:14.866 DEBUG 16996 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:50:20.094  WARN 16996 --- [http-nio-8080-exec-8] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 21:50:20.098 DEBUG 16996 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 21:50:20.099 DEBUG 16996 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 21:50:20.101 DEBUG 16996 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 21:50:20.103 DEBUG 16996 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 21:50:20.103 DEBUG 16996 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 21:50:20.104 DEBUG 16996 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 21:50:20.106 DEBUG 16996 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 21:50:20.106 DEBUG 16996 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 34(Long)
2021-02-02 21:50:20.107 DEBUG 16996 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 1
2021-02-02 21:50:20.107 DEBUG 16996 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.updateBlog   : ==>  Preparing: update t_blog set published = ?,flag = ? , title = ?, content = ?, type_id = ?, tag_ids = ?, first_picture = ? , description = ? , recommend = ? , share_statement = ?, appreciation = ?, commentabled = ? ,update_time = ? where id = ?
2021-02-02 21:50:20.108 DEBUG 16996 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.updateBlog   : ==> Parameters: true(Boolean), 原创(String), 库里故事汇(3):当年一哥和库里的那件事(String), 123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,123,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,(String), 25(Long), 16(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), 123(String), false(Boolean), false(Boolean), false(Boolean), false(Boolean), 2021-02-02 21:50:20.106(Timestamp), 34(Long)
2021-02-02 21:50:20.112 DEBUG 16996 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.updateBlog   : <==    Updates: 1
2021-02-02 21:50:20.114 DEBUG 16996 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 21:50:20.115 DEBUG 16996 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 34(Long)
2021-02-02 21:50:20.116 DEBUG 16996 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 21:50:20.124 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 21:50:20.124 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 21:50:20.125 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 21:50:20.129 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 21:50:20.130 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 21:50:20.133 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 21:50:20.136 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:50:20.136 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:50:20.137 DEBUG 16996 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:50:31.189  INFO 16996 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/34', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[34, {}]}
2021-02-02 21:50:31.191 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 21:50:31.191 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 34(Long)
2021-02-02 21:50:31.195 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 21:50:31.236 DEBUG 16996 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 21:50:31.237 DEBUG 16996 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 34(Long)
2021-02-02 21:50:31.237 DEBUG 16996 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 21:50:31.238 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 21:50:31.238 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 34(Long), 34(Long), 34(Long)
2021-02-02 21:50:31.240 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 21:50:31.247 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 21:50:31.247 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 34(Long), -1(Long)
2021-02-02 21:50:31.249 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 21:50:31.250  INFO 16996 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 21:50:37.428  INFO 16996 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/34', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[34, {}]}
2021-02-02 21:50:37.430 DEBUG 16996 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 21:50:37.431 DEBUG 16996 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 34(Long)
2021-02-02 21:50:37.432 DEBUG 16996 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 21:50:37.434 DEBUG 16996 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 21:50:37.434 DEBUG 16996 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 34(Long)
2021-02-02 21:50:37.435 DEBUG 16996 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 21:50:37.436 DEBUG 16996 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 21:50:37.436 DEBUG 16996 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 34(Long), 34(Long), 34(Long)
2021-02-02 21:50:37.437 DEBUG 16996 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 21:50:37.443 DEBUG 16996 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 21:50:37.443 DEBUG 16996 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 34(Long), -1(Long)
2021-02-02 21:50:37.444 DEBUG 16996 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 21:50:37.446  INFO 16996 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 21:50:47.671 DEBUG 16996 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 21:50:47.672 DEBUG 16996 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 34(Long)
2021-02-02 21:50:47.674 DEBUG 16996 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 21:50:47.679 DEBUG 16996 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:50:47.679 DEBUG 16996 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:50:47.679 DEBUG 16996 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:50:47.681 DEBUG 16996 --- [http-nio-8080-exec-8] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:50:47.681 DEBUG 16996 --- [http-nio-8080-exec-8] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:50:47.682 DEBUG 16996 --- [http-nio-8080-exec-8] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:50:55.053  WARN 16996 --- [http-nio-8080-exec-10] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 21:50:55.057 DEBUG 16996 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 21:50:55.059 DEBUG 16996 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 21:50:55.061 DEBUG 16996 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 21:50:55.063 DEBUG 16996 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 21:50:55.063 DEBUG 16996 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 21:50:55.064 DEBUG 16996 --- [http-nio-8080-exec-10] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 21:50:55.066 DEBUG 16996 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 21:50:55.066 DEBUG 16996 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 34(Long)
2021-02-02 21:50:55.067 DEBUG 16996 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 1
2021-02-02 21:50:55.067 DEBUG 16996 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.updateBlog   : ==>  Preparing: update t_blog set published = ?,flag = ? , title = ?, content = ?, type_id = ?, tag_ids = ?, first_picture = ? , description = ? , recommend = ? , share_statement = ?, appreciation = ?, commentabled = ? ,update_time = ? where id = ?
2021-02-02 21:50:55.068 DEBUG 16996 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.updateBlog   : ==> Parameters: true(Boolean), 原创(String), 库里故事汇(3):当年一哥和库里的那件事(String), 12,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,123,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,(String), 25(Long), 16(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), 123(String), false(Boolean), false(Boolean), false(Boolean), false(Boolean), 2021-02-02 21:50:55.065(Timestamp), 34(Long)
2021-02-02 21:50:55.071 DEBUG 16996 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.updateBlog   : <==    Updates: 1
2021-02-02 21:50:55.073 DEBUG 16996 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 21:50:55.074 DEBUG 16996 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 34(Long)
2021-02-02 21:50:55.076 DEBUG 16996 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 21:50:55.084 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 21:50:55.084 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 21:50:55.085 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 21:50:55.086 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 21:50:55.086 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 21:50:55.087 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 21:50:55.090 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:50:55.091 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:50:55.093 DEBUG 16996 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:51:01.650  INFO 16996 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/34', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[34, {}]}
2021-02-02 21:51:01.651 DEBUG 16996 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 21:51:01.652 DEBUG 16996 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 34(Long)
2021-02-02 21:51:01.653 DEBUG 16996 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 21:51:01.653 DEBUG 16996 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 21:51:01.653 DEBUG 16996 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 34(Long)
2021-02-02 21:51:01.656 DEBUG 16996 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 21:51:01.658 DEBUG 16996 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 21:51:01.659 DEBUG 16996 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 34(Long), 34(Long), 34(Long)
2021-02-02 21:51:01.660 DEBUG 16996 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 21:51:01.673 DEBUG 16996 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 21:51:01.674 DEBUG 16996 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 34(Long), -1(Long)
2021-02-02 21:51:01.674 DEBUG 16996 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 21:51:01.676  INFO 16996 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 21:51:58.309 DEBUG 16996 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 21:51:58.309 DEBUG 16996 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 34(Long)
2021-02-02 21:51:58.311 DEBUG 16996 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 21:51:58.312 DEBUG 16996 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:51:58.313 DEBUG 16996 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:51:58.314 DEBUG 16996 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:51:58.318 DEBUG 16996 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:51:58.319 DEBUG 16996 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:51:58.321 DEBUG 16996 --- [http-nio-8080-exec-2] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:55:25.381  INFO 28616 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 28616 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 21:55:25.384 DEBUG 28616 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 21:55:25.385  INFO 28616 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 21:55:25.445  INFO 28616 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 21:55:25.446  INFO 28616 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 21:55:26.951  INFO 28616 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 21:55:26.959  INFO 28616 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 21:55:26.959  INFO 28616 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 21:55:27.060  INFO 28616 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 21:55:27.060  INFO 28616 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1614 ms
2021-02-02 21:55:27.714  INFO 28616 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 21:55:27.795  INFO 28616 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 21:55:28.102  INFO 28616 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 21:55:28.137  INFO 28616 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 21:55:28.147  INFO 28616 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 3.388 seconds (JVM running for 4.621)
2021-02-02 21:55:31.600  INFO 28616 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 21:55:31.600  INFO 28616 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 21:55:31.624  INFO 28616 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 23 ms
2021-02-02 21:55:31.693  INFO 28616 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/34', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[34, {}]}
2021-02-02 21:55:31.712  INFO 28616 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 21:55:31.966  INFO 28616 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 21:55:31.999 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 21:55:32.017 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 34(Long)
2021-02-02 21:55:32.038 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 21:55:32.098 DEBUG 28616 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 21:55:32.099 DEBUG 28616 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 34(Long)
2021-02-02 21:55:32.100 DEBUG 28616 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 21:55:32.101 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 21:55:32.101 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 34(Long), 34(Long), 34(Long)
2021-02-02 21:55:32.106 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 21:55:32.116 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 21:55:32.116 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 34(Long), -1(Long)
2021-02-02 21:55:32.117 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 21:55:32.118  INFO 28616 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 21:56:04.613 DEBUG 28616 --- [http-nio-8080-exec-5] com.personblog.dao.UserMapper.login      : ==>  Preparing: select * from t_user where username = ? and password = ?;
2021-02-02 21:56:04.614 DEBUG 28616 --- [http-nio-8080-exec-5] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 21:56:04.618 DEBUG 28616 --- [http-nio-8080-exec-5] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 21:56:06.057 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 21:56:06.057 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 21:56:06.059 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 21:56:06.062 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 21:56:06.063 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 21:56:06.064 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 21:56:06.075 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:56:06.075 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:56:06.076 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:56:07.803 DEBUG 28616 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 21:56:07.803 DEBUG 28616 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 34(Long)
2021-02-02 21:56:07.805 DEBUG 28616 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 21:56:07.808 DEBUG 28616 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:56:07.809 DEBUG 28616 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:56:07.810 DEBUG 28616 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:56:07.814 DEBUG 28616 --- [http-nio-8080-exec-7] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:56:07.814 DEBUG 28616 --- [http-nio-8080-exec-7] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:56:07.818 DEBUG 28616 --- [http-nio-8080-exec-7] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:56:11.774  WARN 28616 --- [http-nio-8080-exec-4] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 21:56:11.793 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 21:56:11.794 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 21:56:11.795 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 21:56:11.796 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 21:56:11.796 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 21:56:11.800 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 21:56:11.804 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 21:56:11.804 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 34(Long)
2021-02-02 21:56:11.805 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 1
2021-02-02 21:56:11.807 DEBUG 28616 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.updateBlog   : ==>  Preparing: update t_blog set published = ?,flag = ? , title = ?, content = ?, type_id = ?, tag_ids = ?, first_picture = ? , description = ? , recommend = ? , share_statement = ?, appreciation = ?, commentabled = ? ,update_time = ? where id = ?
2021-02-02 21:56:11.810 DEBUG 28616 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.updateBlog   : ==> Parameters: true(Boolean), 原创(String), 库里故事汇(3):当年一哥和库里的那件事(String), 12,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,123,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,12,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,123,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,,123,(String), 25(Long), 16(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), 123(String), false(Boolean), false(Boolean), false(Boolean), false(Boolean), 2021-02-02 21:56:11.803(Timestamp), 34(Long)
2021-02-02 21:56:11.817 DEBUG 28616 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.updateBlog   : <==    Updates: 1
2021-02-02 21:56:11.819 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 21:56:11.821 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 34(Long)
2021-02-02 21:56:11.822 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 21:56:11.845 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 21:56:11.845 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 21:56:11.846 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 21:56:11.849 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 21:56:11.851 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 21:56:11.854 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 21:56:11.856 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:56:11.856 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:56:11.857 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:56:20.854  INFO 28616 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/34', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[34, {}]}
2021-02-02 21:56:20.856 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 21:56:20.856 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 34(Long)
2021-02-02 21:56:20.858 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 21:56:20.858 DEBUG 28616 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 21:56:20.858 DEBUG 28616 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 34(Long)
2021-02-02 21:56:20.869 DEBUG 28616 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 21:56:20.870 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 21:56:20.870 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 34(Long), 34(Long), 34(Long)
2021-02-02 21:56:20.871 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 21:56:20.874 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 21:56:20.874 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 34(Long), -1(Long)
2021-02-02 21:56:20.875 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 21:56:20.876  INFO 28616 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 21:56:40.135 DEBUG 28616 --- [http-nio-8080-exec-4] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:56:40.135 DEBUG 28616 --- [http-nio-8080-exec-4] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:56:40.136 DEBUG 28616 --- [http-nio-8080-exec-4] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:56:40.139 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:56:40.139 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:56:40.139 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:56:56.963 DEBUG 28616 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 21:56:56.964 DEBUG 28616 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 21:56:56.965 DEBUG 28616 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 21:56:56.967 DEBUG 28616 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 21:56:56.968 DEBUG 28616 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 21:56:56.970 DEBUG 28616 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 21:56:56.972 DEBUG 28616 --- [http-nio-8080-exec-6] com.personblog.dao.BlogMapper.saveBlog   : ==>  Preparing: insert into t_blog (title, content, first_picture, flag, views, comment_count, appreciation, share_statement, commentabled, published, recommend, create_time, update_time, type_id, user_id, description, tag_ids) values (?,?,?,?,?,?,?, ?,?,?,?,?, ?,?,?,?,?)
2021-02-02 21:56:56.973 DEBUG 28616 --- [http-nio-8080-exec-6] com.personblog.dao.BlogMapper.saveBlog   : ==> Parameters: cd_laotang的博客(String), 12,(String), /images/kobe.jpg(String), 原创(String), 0(Integer), 0(Integer), false(Boolean), false(Boolean), false(Boolean), true(Boolean), false(Boolean), 2021-02-02 21:56:56.972(Timestamp), 2021-02-02 21:56:56.972(Timestamp), 25(Long), 0(Long), jk(String), 16(String)
2021-02-02 21:56:56.975 DEBUG 28616 --- [http-nio-8080-exec-6] com.personblog.dao.BlogMapper.saveBlog   : <==    Updates: 1
2021-02-02 21:56:56.978 DEBUG 28616 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.saveBlog!selectKey    : ==>  Preparing: SELECT LAST_INSERT_ID()
2021-02-02 21:56:56.979 DEBUG 28616 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.saveBlog!selectKey    : ==> Parameters: 
2021-02-02 21:56:56.982 DEBUG 28616 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.saveBlog!selectKey    : <==      Total: 1
2021-02-02 21:56:56.984 DEBUG 28616 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 21:56:56.984 DEBUG 28616 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 35(Long)
2021-02-02 21:56:56.985 DEBUG 28616 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 21:56:57.000 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 21:56:57.000 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 21:56:57.001 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 21:56:57.003 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 21:56:57.003 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 21:56:57.005 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 2
2021-02-02 21:56:57.006 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:56:57.006 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:56:57.007 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:57:02.873  INFO 28616 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/34', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[34, {}]}
2021-02-02 21:57:02.874 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 21:57:02.874 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 34(Long)
2021-02-02 21:57:02.879 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 21:57:02.881 DEBUG 28616 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 21:57:02.881 DEBUG 28616 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 34(Long)
2021-02-02 21:57:02.882 DEBUG 28616 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 21:57:02.883 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 21:57:02.883 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 34(Long), 34(Long), 34(Long)
2021-02-02 21:57:02.884 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 21:57:02.895 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 21:57:02.896 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 34(Long), -1(Long)
2021-02-02 21:57:02.897 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 21:57:02.898  INFO 28616 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 21:57:05.684  INFO 28616 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 21:57:05.693 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 21:57:05.694 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 21:57:05.696 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 21:57:05.696 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 21:57:05.696 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 21:57:05.699 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 2
2021-02-02 21:57:05.700 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 21:57:05.700 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 21:57:05.701 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 21:57:05.702 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 21:57:05.702 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 21:57:05.704 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 2
2021-02-02 21:57:05.710 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 21:57:05.710 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 21:57:05.711 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 21:57:05.712  INFO 28616 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 21:57:18.363  INFO 28616 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/35', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[35, {}]}
2021-02-02 21:57:18.364 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 21:57:18.365 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 35(Long)
2021-02-02 21:57:18.367 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 21:57:18.368 DEBUG 28616 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 21:57:18.369 DEBUG 28616 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 35(Long)
2021-02-02 21:57:18.371 DEBUG 28616 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 21:57:18.372 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 21:57:18.373 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 35(Long), 35(Long), 35(Long)
2021-02-02 21:57:18.377 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 21:57:18.384 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 21:57:18.384 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 35(Long), -1(Long)
2021-02-02 21:57:18.385 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 21:57:18.386  INFO 28616 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 21:57:25.411 DEBUG 28616 --- [http-nio-8080-exec-8] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:57:25.411 DEBUG 28616 --- [http-nio-8080-exec-8] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:57:25.413 DEBUG 28616 --- [http-nio-8080-exec-8] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:57:25.416 DEBUG 28616 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:57:25.416 DEBUG 28616 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:57:25.417 DEBUG 28616 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:57:41.894 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 21:57:41.895 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 21:57:41.896 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 21:57:41.898 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 21:57:41.899 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 21:57:41.900 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 21:57:41.901 DEBUG 28616 --- [http-nio-8080-exec-1] com.personblog.dao.BlogMapper.saveBlog   : ==>  Preparing: insert into t_blog (title, content, first_picture, flag, views, comment_count, appreciation, share_statement, commentabled, published, recommend, create_time, update_time, type_id, user_id, description, tag_ids) values (?,?,?,?,?,?,?, ?,?,?,?,?, ?,?,?,?,?)
2021-02-02 21:57:41.902 DEBUG 28616 --- [http-nio-8080-exec-1] com.personblog.dao.BlogMapper.saveBlog   : ==> Parameters: test(String), 12,(String), /images/kobe.jpg(String), 原创(String), 0(Integer), 0(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-02-02 21:57:41.901(Timestamp), 2021-02-02 21:57:41.901(Timestamp), 25(Long), 0(Long), ty(String), 16(String)
2021-02-02 21:57:41.904 DEBUG 28616 --- [http-nio-8080-exec-1] com.personblog.dao.BlogMapper.saveBlog   : <==    Updates: 1
2021-02-02 21:57:41.906 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.saveBlog!selectKey    : ==>  Preparing: SELECT LAST_INSERT_ID()
2021-02-02 21:57:41.906 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.saveBlog!selectKey    : ==> Parameters: 
2021-02-02 21:57:41.908 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.saveBlog!selectKey    : <==      Total: 1
2021-02-02 21:57:41.908 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 21:57:41.909 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 36(Long)
2021-02-02 21:57:41.910 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 21:57:41.918 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 21:57:41.918 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 21:57:41.919 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 21:57:41.922 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 21:57:41.923 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 21:57:41.927 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 3
2021-02-02 21:57:41.928 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:57:41.928 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:57:41.929 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:57:47.000  INFO 28616 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 21:57:47.006 DEBUG 28616 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 21:57:47.006 DEBUG 28616 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 21:57:47.018 DEBUG 28616 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 21:57:47.021 DEBUG 28616 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 21:57:47.022 DEBUG 28616 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 21:57:47.026 DEBUG 28616 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 3
2021-02-02 21:57:47.028 DEBUG 28616 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 21:57:47.028 DEBUG 28616 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 21:57:47.029 DEBUG 28616 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 21:57:47.030 DEBUG 28616 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 21:57:47.031 DEBUG 28616 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 21:57:47.032 DEBUG 28616 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 3
2021-02-02 21:57:47.033 DEBUG 28616 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 21:57:47.033 DEBUG 28616 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 21:57:47.034 DEBUG 28616 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 21:57:47.035  INFO 28616 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 21:57:58.966 DEBUG 28616 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:57:58.966 DEBUG 28616 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:57:58.969 DEBUG 28616 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:57:58.974 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:57:58.975 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:57:58.976 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:58:14.176 DEBUG 28616 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 21:58:14.176 DEBUG 28616 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 21:58:14.177 DEBUG 28616 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 21:58:14.179 DEBUG 28616 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 21:58:14.179 DEBUG 28616 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 21:58:14.182 DEBUG 28616 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 21:58:14.184 DEBUG 28616 --- [http-nio-8080-exec-7] com.personblog.dao.BlogMapper.saveBlog   : ==>  Preparing: insert into t_blog (title, content, first_picture, flag, views, comment_count, appreciation, share_statement, commentabled, published, recommend, create_time, update_time, type_id, user_id, description, tag_ids) values (?,?,?,?,?,?,?, ?,?,?,?,?, ?,?,?,?,?)
2021-02-02 21:58:14.186 DEBUG 28616 --- [http-nio-8080-exec-7] com.personblog.dao.BlogMapper.saveBlog   : ==> Parameters: sdada(String), 12,(String), /images/kobe.jpg(String), 原创(String), 0(Integer), 0(Integer), true(Boolean), false(Boolean), true(Boolean), true(Boolean), false(Boolean), 2021-02-02 21:58:14.184(Timestamp), 2021-02-02 21:58:14.184(Timestamp), 25(Long), 0(Long), 12(String), 16(String)
2021-02-02 21:58:14.188 DEBUG 28616 --- [http-nio-8080-exec-7] com.personblog.dao.BlogMapper.saveBlog   : <==    Updates: 1
2021-02-02 21:58:14.188 DEBUG 28616 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.saveBlog!selectKey    : ==>  Preparing: SELECT LAST_INSERT_ID()
2021-02-02 21:58:14.188 DEBUG 28616 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.saveBlog!selectKey    : ==> Parameters: 
2021-02-02 21:58:14.189 DEBUG 28616 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.saveBlog!selectKey    : <==      Total: 1
2021-02-02 21:58:14.189 DEBUG 28616 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 21:58:14.189 DEBUG 28616 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 37(Long)
2021-02-02 21:58:14.190 DEBUG 28616 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 21:58:14.196 DEBUG 28616 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 21:58:14.197 DEBUG 28616 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 21:58:14.197 DEBUG 28616 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 21:58:14.200 DEBUG 28616 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 21:58:14.201 DEBUG 28616 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 21:58:14.206 DEBUG 28616 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 4
2021-02-02 21:58:14.207 DEBUG 28616 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:58:14.207 DEBUG 28616 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:58:14.208 DEBUG 28616 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:58:18.391  INFO 28616 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 21:58:18.392 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 21:58:18.393 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 21:58:18.393 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 21:58:18.394 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 21:58:18.394 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 21:58:18.396 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 21:58:18.398 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 21:58:18.399 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 21:58:18.402 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 21:58:18.405 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 21:58:18.405 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 21:58:18.407 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 4
2021-02-02 21:58:18.408 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 21:58:18.408 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 21:58:18.409 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 21:58:18.409  INFO 28616 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 21:58:26.375 DEBUG 28616 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:58:26.375 DEBUG 28616 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:58:26.376 DEBUG 28616 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:58:26.377 DEBUG 28616 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:58:26.377 DEBUG 28616 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:58:26.378 DEBUG 28616 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:58:43.074 DEBUG 28616 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 21:58:43.075 DEBUG 28616 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 21:58:43.076 DEBUG 28616 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 21:58:43.079 DEBUG 28616 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 21:58:43.079 DEBUG 28616 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 21:58:43.080 DEBUG 28616 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 21:58:43.083 DEBUG 28616 --- [http-nio-8080-exec-7] com.personblog.dao.BlogMapper.saveBlog   : ==>  Preparing: insert into t_blog (title, content, first_picture, flag, views, comment_count, appreciation, share_statement, commentabled, published, recommend, create_time, update_time, type_id, user_id, description, tag_ids) values (?,?,?,?,?,?,?, ?,?,?,?,?, ?,?,?,?,?)
2021-02-02 21:58:43.084 DEBUG 28616 --- [http-nio-8080-exec-7] com.personblog.dao.BlogMapper.saveBlog   : ==> Parameters: cd_laotang的博客(String), hj,(String), /images/kobe.jpg(String), 转载(String), 0(Integer), 0(Integer), false(Boolean), false(Boolean), false(Boolean), true(Boolean), true(Boolean), 2021-02-02 21:58:43.083(Timestamp), 2021-02-02 21:58:43.083(Timestamp), 25(Long), 0(Long), jk(String), 16(String)
2021-02-02 21:58:43.086 DEBUG 28616 --- [http-nio-8080-exec-7] com.personblog.dao.BlogMapper.saveBlog   : <==    Updates: 1
2021-02-02 21:58:43.086 DEBUG 28616 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.saveBlog!selectKey    : ==>  Preparing: SELECT LAST_INSERT_ID()
2021-02-02 21:58:43.086 DEBUG 28616 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.saveBlog!selectKey    : ==> Parameters: 
2021-02-02 21:58:43.087 DEBUG 28616 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.saveBlog!selectKey    : <==      Total: 1
2021-02-02 21:58:43.087 DEBUG 28616 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 21:58:43.087 DEBUG 28616 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 38(Long)
2021-02-02 21:58:43.088 DEBUG 28616 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 21:58:43.096 DEBUG 28616 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 21:58:43.096 DEBUG 28616 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 21:58:43.098 DEBUG 28616 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 21:58:43.101 DEBUG 28616 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 21:58:43.101 DEBUG 28616 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 21:58:43.106 DEBUG 28616 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 5
2021-02-02 21:58:43.107 DEBUG 28616 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:58:43.107 DEBUG 28616 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:58:43.107 DEBUG 28616 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:58:52.017  INFO 28616 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 21:58:52.019 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 21:58:52.020 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 21:58:52.021 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 21:58:52.021 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 21:58:52.021 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 21:58:52.024 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 21:58:52.025 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 21:58:52.025 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 21:58:52.026 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 21:58:52.031 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 21:58:52.032 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 21:58:52.035 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 4
2021-02-02 21:58:52.036 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 21:58:52.036 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 21:58:52.037 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 21:58:52.038  INFO 28616 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 21:59:03.253  INFO 28616 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 2]}
2021-02-02 21:59:03.256 DEBUG 28616 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 21:59:03.256 DEBUG 28616 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 21:59:03.257 DEBUG 28616 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 21:59:03.257 DEBUG 28616 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?, ?
2021-02-02 21:59:03.258 DEBUG 28616 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer), 4(Integer)
2021-02-02 21:59:03.259 DEBUG 28616 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 21:59:03.262 DEBUG 28616 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 21:59:03.262 DEBUG 28616 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 21:59:03.263 DEBUG 28616 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 21:59:03.264 DEBUG 28616 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 21:59:03.265 DEBUG 28616 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 21:59:03.266 DEBUG 28616 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 4
2021-02-02 21:59:03.268 DEBUG 28616 --- [http-nio-8080-exec-2] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 21:59:03.269 DEBUG 28616 --- [http-nio-8080-exec-2] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 21:59:03.269 DEBUG 28616 --- [http-nio-8080-exec-2] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 21:59:03.270  INFO 28616 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 21:59:10.374  INFO 28616 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 21:59:10.378 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 21:59:10.378 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 21:59:10.379 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 21:59:10.380 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 21:59:10.380 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 21:59:10.384 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 21:59:10.385 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 21:59:10.385 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 21:59:10.386 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 21:59:10.387 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 21:59:10.387 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 21:59:10.388 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 4
2021-02-02 21:59:10.389 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 21:59:10.389 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 21:59:10.389 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 21:59:10.390  INFO 28616 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 21:59:15.537  INFO 28616 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/38', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[38, {}]}
2021-02-02 21:59:15.539 DEBUG 28616 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 21:59:15.540 DEBUG 28616 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 38(Long)
2021-02-02 21:59:15.543 DEBUG 28616 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 21:59:15.544 DEBUG 28616 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 21:59:15.544 DEBUG 28616 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 38(Long)
2021-02-02 21:59:15.553 DEBUG 28616 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 21:59:15.554 DEBUG 28616 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 21:59:15.555 DEBUG 28616 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 38(Long), 38(Long), 38(Long)
2021-02-02 21:59:15.556 DEBUG 28616 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 21:59:15.561 DEBUG 28616 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 21:59:15.562 DEBUG 28616 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 38(Long), -1(Long)
2021-02-02 21:59:15.563 DEBUG 28616 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 21:59:15.564  INFO 28616 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 21:59:22.477 DEBUG 28616 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 21:59:22.479 DEBUG 28616 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 38(Long)
2021-02-02 21:59:22.482 DEBUG 28616 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 21:59:22.483 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:59:22.484 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:59:22.484 DEBUG 28616 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:59:22.485 DEBUG 28616 --- [http-nio-8080-exec-4] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 21:59:22.486 DEBUG 28616 --- [http-nio-8080-exec-4] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 21:59:22.486 DEBUG 28616 --- [http-nio-8080-exec-4] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 21:59:26.481  WARN 28616 --- [http-nio-8080-exec-5] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 21:59:26.486 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 21:59:26.487 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 21:59:26.488 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 21:59:26.490 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 21:59:26.491 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 21:59:26.494 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 21:59:26.497 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 21:59:26.497 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 38(Long)
2021-02-02 21:59:26.501 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 1
2021-02-02 21:59:26.501 DEBUG 28616 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateBlog   : ==>  Preparing: update t_blog set published = ?,flag = ? , title = ?, content = ?, type_id = ?, tag_ids = ?, first_picture = ? , description = ? , recommend = ? , share_statement = ?, appreciation = ?, commentabled = ? ,update_time = ? where id = ?
2021-02-02 21:59:26.502 DEBUG 28616 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateBlog   : ==> Parameters: true(Boolean), 转载(String), cd_laotang的博客(String), hj,,hj,(String), 25(Long), 16(String), /images/kobe.jpg(String), jk(String), true(Boolean), false(Boolean), false(Boolean), false(Boolean), 2021-02-02 21:59:26.496(Timestamp), 38(Long)
2021-02-02 21:59:26.505 DEBUG 28616 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateBlog   : <==    Updates: 1
2021-02-02 21:59:26.505 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 21:59:26.506 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 38(Long)
2021-02-02 21:59:26.509 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 21:59:26.520 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 21:59:26.520 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 21:59:26.521 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 21:59:26.522 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 21:59:26.523 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 21:59:26.529 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 5
2021-02-02 21:59:26.531 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 21:59:26.531 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 21:59:26.531 DEBUG 28616 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 21:59:30.814  INFO 28616 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/38', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[38, {}]}
2021-02-02 21:59:30.815 DEBUG 28616 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 21:59:30.815 DEBUG 28616 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 38(Long)
2021-02-02 21:59:30.816 DEBUG 28616 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 21:59:30.817 DEBUG 28616 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 21:59:30.817 DEBUG 28616 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 38(Long)
2021-02-02 21:59:30.819 DEBUG 28616 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 21:59:30.819 DEBUG 28616 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 21:59:30.819 DEBUG 28616 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 38(Long), 38(Long), 38(Long)
2021-02-02 21:59:30.820 DEBUG 28616 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 21:59:30.824 DEBUG 28616 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 21:59:30.824 DEBUG 28616 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 38(Long), -1(Long)
2021-02-02 21:59:30.826 DEBUG 28616 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 21:59:30.827  INFO 28616 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 21:59:57.935  INFO 28616 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/archives', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.ArchiveShowController.archive', args=[{count=Count(id=null, count=null, createTime=null), org.springframework.validation.BindingResult.count=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, Count(id=null, count=null, createTime=null)]}
2021-02-02 21:59:57.942 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.findGroupYear         : ==>  Preparing: select date_format(b.create_time,'%Y') year from t_blog b group by year order by year desc
2021-02-02 21:59:57.943 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.findGroupYear         : ==> Parameters: 
2021-02-02 21:59:57.945 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.findGroupYear         : <==      Total: 1
2021-02-02 21:59:57.946 DEBUG 28616 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.findByYear   : ==>  Preparing: select b.id bid, b.title, b.create_time, b.flag,t.name from t_blog b, t_type t where date_format(b.create_time,'%Y')=? and b.type_id=t.id order by b.create_time desc
2021-02-02 21:59:57.946 DEBUG 28616 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.findByYear   : ==> Parameters: 2021(String)
2021-02-02 21:59:57.948 DEBUG 28616 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.findByYear   : <==      Total: 5
2021-02-02 21:59:57.949 DEBUG 28616 --- [http-nio-8080-exec-1] com.personblog.dao.BlogMapper.count      : ==>  Preparing: select count(*) from t_blog
2021-02-02 21:59:57.949 DEBUG 28616 --- [http-nio-8080-exec-1] com.personblog.dao.BlogMapper.count      : ==> Parameters: 
2021-02-02 21:59:57.949 DEBUG 28616 --- [http-nio-8080-exec-1] com.personblog.dao.BlogMapper.count      : <==      Total: 1
2021-02-02 21:59:57.951 DEBUG 28616 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.deleteCount  : ==>  Preparing: delete from t_count
2021-02-02 21:59:57.951 DEBUG 28616 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.deleteCount  : ==> Parameters: 
2021-02-02 21:59:57.954 DEBUG 28616 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.deleteCount  : <==    Updates: 1
2021-02-02 21:59:57.955 DEBUG 28616 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.insertCount  : ==>  Preparing: insert into t_count(count,create_time) (select count(*) count, create_time from t_blog GROUP BY year(create_time),month(create_time) order by create_time desc)
2021-02-02 21:59:57.955 DEBUG 28616 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.insertCount  : ==> Parameters: 
2021-02-02 21:59:57.958 DEBUG 28616 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.insertCount  : <==    Updates: 1
2021-02-02 21:59:57.959 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.findGroupYear2        : ==>  Preparing: select date_format(t_count.create_time,'%Y年%m月') year1 from t_count GROUP BY year1 order by year1 desc
2021-02-02 21:59:57.959 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.findGroupYear2        : ==> Parameters: 
2021-02-02 21:59:57.961 DEBUG 28616 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.findGroupYear2        : <==      Total: 1
2021-02-02 21:59:57.962 DEBUG 28616 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.findByYear2  : ==>  Preparing: select c.id,c.count,c.create_time from t_count c where date_format(c.create_time,'%Y年%m月')=? order by c.create_time desc
2021-02-02 21:59:57.962 DEBUG 28616 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.findByYear2  : ==> Parameters: 2021年02月(String)
2021-02-02 21:59:57.964 DEBUG 28616 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.findByYear2  : <==      Total: 1
2021-02-02 21:59:57.967  INFO 28616 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : archives
2021-02-02 22:01:11.847  INFO 28616 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/message', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.message', args=[]}
2021-02-02 22:01:11.851  INFO 28616 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Result : message
2021-02-02 22:01:12.255  INFO 28616 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/messagecomment', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.messages', args=[{}]}
2021-02-02 22:01:12.260 DEBUG 28616 --- [http-nio-8080-exec-6] c.p.d.MessageMapper.findByParentIdNull   : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 22:01:12.260 DEBUG 28616 --- [http-nio-8080-exec-6] c.p.d.MessageMapper.findByParentIdNull   : ==> Parameters: -1(Long)
2021-02-02 22:01:12.264 DEBUG 28616 --- [http-nio-8080-exec-6] c.p.d.MessageMapper.findByParentIdNull   : <==      Total: 1
2021-02-02 22:01:12.265 DEBUG 28616 --- [http-nio-8080-exec-6] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 22:01:12.265 DEBUG 28616 --- [http-nio-8080-exec-6] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 121(Long)
2021-02-02 22:01:12.266 DEBUG 28616 --- [http-nio-8080-exec-6] c.p.d.M.findByParentIdNotNull            : <==      Total: 0
2021-02-02 22:01:12.267  INFO 28616 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : message::messageList
2021-02-02 22:01:14.563  INFO 28616 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/about', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.AboutShowController.about', args=[]}
2021-02-02 22:01:14.566  INFO 28616 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : about
2021-02-02 22:01:17.053  INFO 28616 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 22:01:17.055 DEBUG 28616 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 22:01:17.055 DEBUG 28616 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 22:01:17.056 DEBUG 28616 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 22:01:17.056 DEBUG 28616 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 22:01:17.056 DEBUG 28616 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 22:01:17.058 DEBUG 28616 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 22:01:17.060 DEBUG 28616 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 22:01:17.061 DEBUG 28616 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 22:01:17.062 DEBUG 28616 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 2
2021-02-02 22:01:17.064 DEBUG 28616 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 22:01:17.064 DEBUG 28616 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 22:01:17.065 DEBUG 28616 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 4
2021-02-02 22:01:17.067 DEBUG 28616 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 22:01:17.067 DEBUG 28616 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 22:01:17.067 DEBUG 28616 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 22:01:17.068  INFO 28616 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 22:01:23.423  INFO 28616 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/38', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[38, {}]}
2021-02-02 22:01:23.424 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 22:01:23.424 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 38(Long)
2021-02-02 22:01:23.427 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 22:01:23.428 DEBUG 28616 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 22:01:23.428 DEBUG 28616 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 38(Long)
2021-02-02 22:01:23.431 DEBUG 28616 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 22:01:23.432 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 22:01:23.433 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 38(Long), 38(Long), 38(Long)
2021-02-02 22:01:23.437 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 22:01:23.442 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 22:01:23.443 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 38(Long), -1(Long)
2021-02-02 22:01:23.446 DEBUG 28616 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 22:01:23.448  INFO 28616 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 22:04:00.952  INFO 28616 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/archives', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.ArchiveShowController.archive', args=[{count=Count(id=null, count=null, createTime=null), org.springframework.validation.BindingResult.count=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, Count(id=null, count=null, createTime=null)]}
2021-02-02 22:04:00.954 DEBUG 28616 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.findGroupYear         : ==>  Preparing: select date_format(b.create_time,'%Y') year from t_blog b group by year order by year desc
2021-02-02 22:04:00.954 DEBUG 28616 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.findGroupYear         : ==> Parameters: 
2021-02-02 22:04:00.957 DEBUG 28616 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.findGroupYear         : <==      Total: 1
2021-02-02 22:04:00.959 DEBUG 28616 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.findByYear   : ==>  Preparing: select b.id bid, b.title, b.create_time, b.flag,t.name from t_blog b, t_type t where date_format(b.create_time,'%Y')=? and b.type_id=t.id order by b.create_time desc
2021-02-02 22:04:00.960 DEBUG 28616 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.findByYear   : ==> Parameters: 2021(String)
2021-02-02 22:04:00.963 DEBUG 28616 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.findByYear   : <==      Total: 5
2021-02-02 22:04:00.965 DEBUG 28616 --- [http-nio-8080-exec-7] com.personblog.dao.BlogMapper.count      : ==>  Preparing: select count(*) from t_blog
2021-02-02 22:04:00.965 DEBUG 28616 --- [http-nio-8080-exec-7] com.personblog.dao.BlogMapper.count      : ==> Parameters: 
2021-02-02 22:04:00.966 DEBUG 28616 --- [http-nio-8080-exec-7] com.personblog.dao.BlogMapper.count      : <==      Total: 1
2021-02-02 22:04:00.967 DEBUG 28616 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.deleteCount  : ==>  Preparing: delete from t_count
2021-02-02 22:04:00.968 DEBUG 28616 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.deleteCount  : ==> Parameters: 
2021-02-02 22:04:00.972 DEBUG 28616 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.deleteCount  : <==    Updates: 1
2021-02-02 22:04:00.974 DEBUG 28616 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.insertCount  : ==>  Preparing: insert into t_count(count,create_time) (select count(*) count, create_time from t_blog GROUP BY year(create_time),month(create_time) order by create_time desc)
2021-02-02 22:04:00.975 DEBUG 28616 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.insertCount  : ==> Parameters: 
2021-02-02 22:04:00.979 DEBUG 28616 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.insertCount  : <==    Updates: 1
2021-02-02 22:04:00.979 DEBUG 28616 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.findGroupYear2        : ==>  Preparing: select date_format(t_count.create_time,'%Y年%m月') year1 from t_count GROUP BY year1 order by year1 desc
2021-02-02 22:04:00.980 DEBUG 28616 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.findGroupYear2        : ==> Parameters: 
2021-02-02 22:04:00.981 DEBUG 28616 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.findGroupYear2        : <==      Total: 1
2021-02-02 22:04:00.981 DEBUG 28616 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.findByYear2  : ==>  Preparing: select c.id,c.count,c.create_time from t_count c where date_format(c.create_time,'%Y年%m月')=? order by c.create_time desc
2021-02-02 22:04:00.982 DEBUG 28616 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.findByYear2  : ==> Parameters: 2021年02月(String)
2021-02-02 22:04:00.983 DEBUG 28616 --- [http-nio-8080-exec-7] c.personblog.dao.BlogMapper.findByYear2  : <==      Total: 1
2021-02-02 22:04:00.985  INFO 28616 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : archives
2021-02-02 22:23:51.030  INFO 840 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 840 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 22:23:51.079 DEBUG 840 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 22:23:51.079  INFO 840 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 22:23:51.137  INFO 840 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 22:23:51.138  INFO 840 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 22:23:52.441  INFO 840 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 22:23:52.449  INFO 840 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 22:23:52.449  INFO 840 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 22:23:52.530  INFO 840 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 22:23:52.531  INFO 840 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1393 ms
2021-02-02 22:23:53.183  INFO 840 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 22:23:53.265  INFO 840 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 22:23:53.558  INFO 840 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 22:23:53.589  INFO 840 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 22:23:53.599  INFO 840 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 3.424 seconds (JVM running for 4.615)
2021-02-02 22:24:21.361  INFO 840 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 22:24:21.363  INFO 840 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 22:24:21.393  INFO 840 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 30 ms
2021-02-02 22:24:21.455  INFO 840 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 22:24:21.476  INFO 840 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 22:24:21.875  INFO 840 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 22:24:22.016 DEBUG 840 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 22:24:22.055 DEBUG 840 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 22:24:22.073 DEBUG 840 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 22:24:22.076 DEBUG 840 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 22:24:22.077 DEBUG 840 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 22:24:22.081 DEBUG 840 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 2
2021-02-02 22:24:22.089 DEBUG 840 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 22:24:22.090 DEBUG 840 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 22:24:22.092 DEBUG 840 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 22:24:22.096 DEBUG 840 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 22:24:22.097 DEBUG 840 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 22:24:22.102 DEBUG 840 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 2
2021-02-02 22:24:22.110 DEBUG 840 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 22:24:22.110 DEBUG 840 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 22:24:22.112 DEBUG 840 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 22:24:22.113  INFO 840 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 22:24:47.444  INFO 840 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 22:24:47.451 DEBUG 840 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 22:24:47.451 DEBUG 840 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 22:24:47.452 DEBUG 840 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 22:24:47.453 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 22:24:47.453 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 22:24:47.454 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 22:24:47.456 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 22:24:47.456 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 22:24:47.457 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 0
2021-02-02 22:24:47.458 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 22:24:47.459 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 22:24:47.460 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 22:24:47.461  INFO 840 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 22:25:46.944  INFO 840 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 22:25:46.958 DEBUG 840 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 22:25:46.958 DEBUG 840 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 22:25:46.960 DEBUG 840 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 22:25:46.962 DEBUG 840 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 22:25:46.962 DEBUG 840 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 22:25:46.963 DEBUG 840 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 22:25:46.964 DEBUG 840 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 22:25:46.964 DEBUG 840 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 22:25:46.965 DEBUG 840 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 0
2021-02-02 22:25:46.966 DEBUG 840 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 22:25:46.966 DEBUG 840 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 22:25:46.967 DEBUG 840 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 22:25:46.968  INFO 840 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 22:25:50.378  INFO 840 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/types/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TypeShowController.typeShow', args=[{}, -1, 1]}
2021-02-02 22:25:50.380 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 22:25:50.381 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 22:25:50.381 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 0
2021-02-02 22:25:50.385 ERROR 840 --- [http-nio-8080-exec-8] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/types/-1, Exception : {}

java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657)
	at java.util.ArrayList.get(ArrayList.java:433)
	at com.personblog.controller.TypeShowController.typeShow(TypeShowController.java:32)
	at com.personblog.controller.TypeShowController$$FastClassBySpringCGLIB$$9fdf3e9b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.personblog.controller.TypeShowController$$EnhancerBySpringCGLIB$$e4c7adc0.typeShow(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-02-02 22:25:50.386  WARN 840 --- [http-nio-8080-exec-8] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.IndexOutOfBoundsException: Index: 0, Size: 0]
2021-02-02 22:26:08.244  INFO 840 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 22:26:08.255 DEBUG 840 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 22:26:08.255 DEBUG 840 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 22:26:08.256 DEBUG 840 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 22:26:08.258 DEBUG 840 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 22:26:08.259 DEBUG 840 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 22:26:08.261 DEBUG 840 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 0
2021-02-02 22:26:08.264 DEBUG 840 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 22:26:08.264 DEBUG 840 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 22:26:08.265 DEBUG 840 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 0
2021-02-02 22:26:08.268 DEBUG 840 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 22:26:08.268 DEBUG 840 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 22:26:08.270 DEBUG 840 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 22:26:08.271  INFO 840 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 22:26:19.864 DEBUG 840 --- [http-nio-8080-exec-1] com.personblog.dao.UserMapper.login      : ==>  Preparing: select * from t_user where username = ? and password = ?;
2021-02-02 22:26:19.864 DEBUG 840 --- [http-nio-8080-exec-1] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 22:26:19.866 DEBUG 840 --- [http-nio-8080-exec-1] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 22:26:21.326 DEBUG 840 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 22:26:21.327 DEBUG 840 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 22:26:21.327 DEBUG 840 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 22:26:21.329 DEBUG 840 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 22:26:21.329 DEBUG 840 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 22:26:21.330 DEBUG 840 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 22:26:23.193 DEBUG 840 --- [http-nio-8080-exec-8] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 22:26:23.193 DEBUG 840 --- [http-nio-8080-exec-8] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 22:26:23.195 DEBUG 840 --- [http-nio-8080-exec-8] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 22:26:23.196 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 22:26:23.196 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 22:26:23.197 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 22:27:40.203 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 22:27:40.203 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 22:27:40.204 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 22:27:40.205 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 22:27:40.205 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 22:27:40.206 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 22:27:40.209 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 22:27:40.210 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 17(Long)
2021-02-02 22:27:40.211 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 22:27:40.212 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 22:27:40.212 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 18(Long)
2021-02-02 22:27:40.213 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 22:27:40.215 DEBUG 840 --- [http-nio-8080-exec-8] com.personblog.dao.BlogMapper.saveBlog   : ==>  Preparing: insert into t_blog (title, content, first_picture, flag, views, comment_count, appreciation, share_statement, commentabled, published, recommend, create_time, update_time, type_id, user_id, description, tag_ids) values (?,?,?,?,?,?,?, ?,?,?,?,?, ?,?,?,?,?)
2021-02-02 22:27:40.216 DEBUG 840 --- [http-nio-8080-exec-8] com.personblog.dao.BlogMapper.saveBlog   : ==> Parameters: 记录一次线上部署个人项目的流程以及遇到的坑(String), # 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), 原创(String), 0(Integer), 0(Integer), false(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-02-02 22:27:40.214(Timestamp), 2021-02-02 22:27:40.214(Timestamp), 25(Long), 0(Long), 主要记录一下线上部署个人项目的流程以及遇到的坑...(String), 16,17,18(String)
2021-02-02 22:27:40.220 DEBUG 840 --- [http-nio-8080-exec-8] com.personblog.dao.BlogMapper.saveBlog   : <==    Updates: 1
2021-02-02 22:27:40.220 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.saveBlog!selectKey    : ==>  Preparing: SELECT LAST_INSERT_ID()
2021-02-02 22:27:40.220 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.saveBlog!selectKey    : ==> Parameters: 
2021-02-02 22:27:40.221 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.saveBlog!selectKey    : <==      Total: 1
2021-02-02 22:27:40.221 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 22:27:40.221 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 39(Long)
2021-02-02 22:27:40.225 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 22:27:40.226 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 22:27:40.227 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 17(Long), 39(Long)
2021-02-02 22:27:40.228 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 22:27:40.229 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 22:27:40.229 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 18(Long), 39(Long)
2021-02-02 22:27:40.230 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 22:27:40.254 DEBUG 840 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 22:27:40.254 DEBUG 840 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 22:27:40.255 DEBUG 840 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 22:27:40.259 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 22:27:40.259 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 22:27:40.261 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 22:27:40.263 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 22:27:40.263 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 22:27:40.263 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 22:27:46.118  INFO 840 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 22:27:46.119 DEBUG 840 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 22:27:46.120 DEBUG 840 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 22:27:46.121 DEBUG 840 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 22:27:46.121 DEBUG 840 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 22:27:46.121 DEBUG 840 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 22:27:46.126 DEBUG 840 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 22:27:46.128 DEBUG 840 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 22:27:46.128 DEBUG 840 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 22:27:46.129 DEBUG 840 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 22:27:46.132 DEBUG 840 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 22:27:46.132 DEBUG 840 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 22:27:46.133 DEBUG 840 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 22:27:46.134 DEBUG 840 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 22:27:46.134 DEBUG 840 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 22:27:46.135 DEBUG 840 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 22:27:46.136  INFO 840 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 22:27:56.097  INFO 840 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/39', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[39, {}]}
2021-02-02 22:27:56.099 DEBUG 840 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 22:27:56.099 DEBUG 840 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 39(Long)
2021-02-02 22:27:56.111 DEBUG 840 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 22:27:56.165 DEBUG 840 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 22:27:56.166 DEBUG 840 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 39(Long)
2021-02-02 22:27:56.167 DEBUG 840 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 22:27:56.167 DEBUG 840 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 22:27:56.168 DEBUG 840 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 39(Long), 39(Long), 39(Long)
2021-02-02 22:27:56.168 DEBUG 840 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 22:27:56.173 DEBUG 840 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 22:27:56.174 DEBUG 840 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 39(Long), -1(Long)
2021-02-02 22:27:56.174 DEBUG 840 --- [http-nio-8080-exec-1] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 22:27:56.175  INFO 840 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 22:27:57.018  INFO 840 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/39', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[39, {}]}
2021-02-02 22:27:57.024 DEBUG 840 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 22:27:57.025 DEBUG 840 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 39(Long), -1(Long)
2021-02-02 22:27:57.026 DEBUG 840 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 22:27:57.028  INFO 840 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 22:28:23.653 DEBUG 840 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 22:28:23.654 DEBUG 840 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 39(Long)
2021-02-02 22:28:23.657 DEBUG 840 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 22:28:23.659 DEBUG 840 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 22:28:23.659 DEBUG 840 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 22:28:23.660 DEBUG 840 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 22:28:23.661 DEBUG 840 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 22:28:23.661 DEBUG 840 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 22:28:23.662 DEBUG 840 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 22:28:26.344  WARN 840 --- [http-nio-8080-exec-5] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 22:28:26.345 DEBUG 840 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 22:28:26.346 DEBUG 840 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 25(Long)
2021-02-02 22:28:26.346 DEBUG 840 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 22:28:26.347 DEBUG 840 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 22:28:26.347 DEBUG 840 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 16(Long)
2021-02-02 22:28:26.348 DEBUG 840 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 22:28:26.348 DEBUG 840 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 22:28:26.348 DEBUG 840 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 17(Long)
2021-02-02 22:28:26.348 DEBUG 840 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 22:28:26.349 DEBUG 840 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 22:28:26.349 DEBUG 840 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 18(Long)
2021-02-02 22:28:26.349 DEBUG 840 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 22:28:26.351 DEBUG 840 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 22:28:26.352 DEBUG 840 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 39(Long)
2021-02-02 22:28:26.363 DEBUG 840 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 3
2021-02-02 22:28:26.363 DEBUG 840 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateBlog   : ==>  Preparing: update t_blog set published = ?,flag = ? , title = ?, content = ?, type_id = ?, tag_ids = ?, first_picture = ? , description = ? , recommend = ? , share_statement = ?, appreciation = ?, commentabled = ? ,update_time = ? where id = ?
2021-02-02 22:28:26.364 DEBUG 840 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateBlog   : ==> Parameters: true(Boolean), 原创(String), 记录一次线上部署个人项目的流程以及遇到的坑(String), # 1、购买服务器和域名

网上各种文章就不一一细说了。本人是在阿里云购买的，很便宜，还有学生机之类的。然后买域名，备案（一般需要三四天即可完成）

这里就贴一个阿里云的地址：[阿里云服务器购买地址](https://www.aliyun.com/1111/home?userCode=kye7if43)

# 2、下载安装Xshell
远程连接服务器用的，具体安装过程其他博主也写了很多。这里还可以再装一个 **Xftp**，配套使用
用于文件传输。

#  3、搭建环境
我的项目就单是一个SpringBoot项目，所以只需要安装 jdk 和 MySQL 数据库，为了保证开发环境和部署环境一致，这里安装jdk1.8，MySQL5.7。

由于SpringBoot内置 tomcat , 所以不用装 tomcat

另外这里先说明一下：我的项目打的是 jar 包

jar包自带tomcat容器,适用于单个项目,但是如果你想要把多个项目部署到一个tomcat容器上,就需要打成war包了,多个war包部署到同一个tomcat容器上,节省资源

## 3.1 安装 jdk
官网下载解压，基本不会出啥问题。不知道怎么安装的，建议去找个视频（推荐b站狂神）把基本 Linux 命令学下，不会花很多时间。

## 3.2 安装 mysql
由于在这之前就已经装了 mysql，当时也是遇到了很多问题，也没有记录下来，不过网上都找的到。
不过这次又遇到问题了，记录一下

**下载安装**完之后，**启动** mysql，然后**登录**：
```bash
mysql -uroot -p
```
点回车输入密码，注意这里输入密码是不会显示出来的。

由于之前设置密码很简单，所以这里我**修改**了下密码：
```bash
ALTER user 'root'@'localhost' identified by '123456';
```
所有的修改操作完成之后，记得**重启**数据库

注意有些命令会报错，下面两种都试试或者找其他人写的
```bash
systemctl restart mysqld
```
```bash
service mysql restart
```
**授权**

为了方便对数据库进行操作，一般都是使用可视化软件对数据库进行远程连接，但如果任何一台机子都可以对你的服务器数据库进行远程连接，那就不安全了，这里就需要对数据库进行授权，指定可以远程连接的数据库，没有授权就只能支持localhost本地访问了。

不授权会报错： Access denied for user  ‘root’ ×××
```bash
# 登陆数据库
mysql -uroot -p

# 使用数据库
use mysql;

# 设置权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# 刷新权限
flush privileges;

#退出，重启服务器
service mysqld restart
```
设置权限那一句：
```
*. *：表示 所有库.所有表
'root'@'%' identified by 'root'：
前一个root：表示用户名，
%：是指所有访问ip
后一个root：表示数据库密码
```

通过这一句可以配置远程访问的数据库和访问的IP，我一般是直接配置'%'所有IP都能访问，因为有时候开发需求会改变IP，如果指定IP的话就不方便，所以配置了'%'，一般情况下是将3306端口给关闭，需要远程连接的时候再把3306端口打开，用完就关闭，这样安全些

## 3.3 配置安全组规则
为了方便操作，这里可以将服务器的安全组进行修改，咱们打开**服务器的实例控制台**，找到安全组规则，点开编辑入站规则，打开需要配置的端口

22端口是SSH远程连接用的，3306是数据库远程连接用的，添加22端口和3306端口

# 4、项目部署
服务器环境搭建好后，就可以将项目打包部署到服务器了，这里采用jar包的方式部署，使用idea打成jar包，然后将jar包上传到服务器在后台运行，就可以用IP进行访问了

**打包之前**

	1、把配置文件里的连接数据库的 url 和 密码改成服务器里对应的；
	2、在服务器上创建对应的数据库，以及表（可以用命令或者操作数据库的软件）

如果在后面服务器上运行项目的时候报了这个错：`No main manifest attribute`
我是在 pom 文件加上下面这个解决的，当然网上还有很多解决办法，可自行搜索
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <!-- 没有该配置，devtools 不生效 -->
        <fork>true</fork>
    </configuration>
</plugin>
```

**打包**

1、点击idea右边的Maven Projects，双击clean，执行完后再双击package

2、不出意外，控制台会显示BUILD SUCCESS，并有jar包文件的大小，在target文件夹下面会生成一个xxx-1.0.jar 的jar包，这个就是要上传到服务器进行部署的jar包。

**把 jar 包扔到服务器上**

可以先建一个文件夹用来放 jar 包，然后通过 xftp , 把 jar 直接复制到这个文件里

**关闭防火墙，开放项目端口**

服务器需要将防火墙关闭才能访问；我的项目配置的是8080端口，在之前将所有端口都关闭了，所以这里要将8080端口开放

```bash
# 查看防火墙状态
systemctl status firewalld

# 打开防火墙
systemctl start firewalld

# 关闭防火墙
systemctl stop firewalld
```

进入服务器控制台安全组规则，添加规则，开放8080端口

**运行 jar 包**

```bash
# 进入jar包文件夹
cd xxxx

# 后台运行jar包
nohup java -jar xxx.jar &
```
浏览器中访问服务器的8080端口

服务器公网 ip + 端口号

# 5、实现域名访问
一般来说，一个服务器不止跑一个服务（看自己需求，当然也可以只跑一个），每个服务都是使用一个二级域名来进行访问，所以这里配置二级域名进行访问

注：如果只是要配置自己的网站能够通过域名访问，那就只需要配置下满截图中的第三条二级域名就可以了，但是一般来说，一个服务器不只是通过二级域名访问，还会有直接访问和
```bash
@：表示直接解析域名
www：解析域名通过www访问
xxxx（二级域名）：解析通过二级域名访问，我这里配置的是onestar二级域名
```
添加完成后就可以使用域名进行访问了，But，这样直接访问的话，访问的是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，这里就要用到反向代理的技术了。
## Nginx
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。这里使用NGINX反向代理，将80端口转发到8080端口，需要对NGINX进行配置，所以要先下载NGINX

这里没有接触 nginx 的 小伙伴，也可以去 b 站上找狂神的视频了解一下，半个小时就入门了
[Nginx入门](https://www.bilibili.com/video/BV1F5411J7vK?from=search&seid=17092305154670818759)

所以安装就不写了，直接讲如何配置

**配置**

下载后需要对NGINX进行配置，这里的配置文件是nginx.conf，可以使用命令 find / -name "nginx.conf" 进行查找，默认是在 `/etc/nginx/nginx.conf`

**注意**千万别去别的目录，我一开始就找的原来自己自定义安装的 nginx 的配置目录下修改，结果导致不起作用。

1、**打开nginx.conf配置文件**

`vim /etc/nginx/nginx.conf`

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210201214055319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkX2xhb3Rhbmc=,size_16,color_FFFFFF,t_70#pic_center)


2、在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为onestar.conf


添加如下配置
```xml
server {
    listen       80;
    server_name  onestar.newstar.net.cn;
    location / {
        proxy_pass   http://81.68.734.422:8080;
        index  index.html index.htm;
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log /var/log/onestar.newstar.net.cn.access.log;
}
```
注意：上面的 access_log 这里的路径一定要根据自己改，不报错即可
```
listen：监听80端口
server_name：转发到哪个地址，也就是前面配置的二级域名地址
proxy_pass：代理到哪个地址，也就是要访问的服务器端口地址
access_log：表示记录日志信息，会在根目录下创建onestar.newstar.net.cn.access.log日志文件，打印项目的日志信息
```
3、**重启 nginx**：

```
nginx -s reload
```
访问之前，再检查配置文件是否正确：
```bash
nginx -t
```
nginx -s stop	这是停止的命令

如果访问页面一直是默认页面welcome to nginx

1、检查 nginx 的配置文件是否正确，如不正确，修改之后记得重启nginx生效
2、不要修改错了 nginx.conf 文件，是在默认的那里

大功告成，可以去用域名访问项目了

Linux 下查看进程占用情况：
```
netstat -ntlp | grep [port]
```
杀死它
```
kill -9 PID
```
根据PID可以查询进程名称
```
ll /proc/PID
```

最后，此篇博文是跟着[SpringBoot搭建个人博客-线上部署](https://onestar.newstar.net.cn/blog/52)和自己遇到的坑一起记录的，如有不清楚的地方欢迎留言或查看原文章。(String), 25(Long), 16,17,18(String), https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584368822685&di=19855856bbd158b52926a49b51e876c0&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Fcrop.0.4.1280.711%2F70745653ly1fvuflwe10zj20zk0k0n06.jpg(String), 主要记录一下线上部署个人项目的流程以及遇到的坑...(String), true(Boolean), true(Boolean), false(Boolean), true(Boolean), 2021-02-02 22:28:26.35(Timestamp), 39(Long)
2021-02-02 22:28:26.368 DEBUG 840 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateBlog   : <==    Updates: 1
2021-02-02 22:28:26.370 DEBUG 840 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 22:28:26.371 DEBUG 840 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 16(Long), 39(Long)
2021-02-02 22:28:26.372 DEBUG 840 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 22:28:26.373 DEBUG 840 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 22:28:26.373 DEBUG 840 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 17(Long), 39(Long)
2021-02-02 22:28:26.374 DEBUG 840 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 22:28:26.374 DEBUG 840 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 22:28:26.374 DEBUG 840 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 18(Long), 39(Long)
2021-02-02 22:28:26.375 DEBUG 840 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 22:28:26.382 DEBUG 840 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 22:28:26.382 DEBUG 840 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 22:28:26.382 DEBUG 840 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 22:28:26.383 DEBUG 840 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 22:28:26.383 DEBUG 840 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 22:28:26.385 DEBUG 840 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 22:28:26.388 DEBUG 840 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 22:28:26.388 DEBUG 840 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 22:28:26.389 DEBUG 840 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 22:28:29.904  INFO 840 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/39', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[39, {}]}
2021-02-02 22:28:29.905 DEBUG 840 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 22:28:29.905 DEBUG 840 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 39(Long)
2021-02-02 22:28:29.908 DEBUG 840 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 22:28:29.913 DEBUG 840 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 22:28:29.913 DEBUG 840 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 39(Long)
2021-02-02 22:28:29.914 DEBUG 840 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 22:28:29.914 DEBUG 840 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 22:28:29.915 DEBUG 840 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 39(Long), 39(Long), 39(Long)
2021-02-02 22:28:29.915 DEBUG 840 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 22:28:29.926 DEBUG 840 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 22:28:29.926 DEBUG 840 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 39(Long), -1(Long)
2021-02-02 22:28:29.927 DEBUG 840 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 22:28:29.927  INFO 840 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 22:28:30.456  INFO 840 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/39', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[39, {}]}
2021-02-02 22:28:30.457 DEBUG 840 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 22:28:30.458 DEBUG 840 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 39(Long), -1(Long)
2021-02-02 22:28:30.459 DEBUG 840 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 22:28:30.460  INFO 840 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 22:28:45.256  INFO 840 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 22:28:45.260 DEBUG 840 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 22:28:45.260 DEBUG 840 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 22:28:45.261 DEBUG 840 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 22:28:45.261 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 22:28:45.261 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 22:28:45.263 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 22:28:45.266 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 22:28:45.267 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 22:28:45.269 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 22:28:45.271 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 22:28:45.271 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 22:28:45.274 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 22:28:45.276 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 22:28:45.276 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 22:28:45.277 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 22:28:45.278  INFO 840 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 22:29:56.570  INFO 840 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 22:29:56.574 DEBUG 840 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 22:29:56.575 DEBUG 840 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 22:29:56.578 DEBUG 840 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 22:29:56.578 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 22:29:56.579 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 22:29:56.580 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 22:29:56.582 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 22:29:56.582 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 22:29:56.582 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 22:29:56.584 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 22:29:56.584 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 22:29:56.585 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 22:29:56.586 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 22:29:56.586 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 22:29:56.586 DEBUG 840 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 22:29:56.587  INFO 840 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 22:30:02.286  INFO 840 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/39', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[39, {}]}
2021-02-02 22:30:02.289 DEBUG 840 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 22:30:02.289 DEBUG 840 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 39(Long)
2021-02-02 22:30:02.292 DEBUG 840 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 22:30:02.297 DEBUG 840 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 22:30:02.297 DEBUG 840 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 39(Long)
2021-02-02 22:30:02.298 DEBUG 840 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 22:30:02.298 DEBUG 840 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 22:30:02.299 DEBUG 840 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 39(Long), 39(Long), 39(Long)
2021-02-02 22:30:02.300 DEBUG 840 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 22:30:02.302 DEBUG 840 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 22:30:02.302 DEBUG 840 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 39(Long), -1(Long)
2021-02-02 22:30:02.303 DEBUG 840 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 22:30:02.303  INFO 840 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 22:30:03.072  INFO 840 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/39', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[39, {}]}
2021-02-02 22:30:03.073 DEBUG 840 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 22:30:03.075 DEBUG 840 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 39(Long), -1(Long)
2021-02-02 22:30:03.075 DEBUG 840 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 22:30:03.076  INFO 840 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 22:30:25.897  INFO 840 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 22:30:25.901 DEBUG 840 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 22:30:25.902 DEBUG 840 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 22:30:25.905 DEBUG 840 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 22:30:25.905 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 22:30:25.906 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 22:30:25.908 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 22:30:25.909 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 22:30:25.910 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 22:30:25.911 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 22:30:25.912 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 22:30:25.912 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 22:30:25.913 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 22:30:25.914 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 22:30:25.914 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 22:30:25.915 DEBUG 840 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 22:30:25.916  INFO 840 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 22:30:28.984  INFO 840 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/39', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[39, {}]}
2021-02-02 22:30:28.989 DEBUG 840 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 22:30:28.990 DEBUG 840 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 39(Long)
2021-02-02 22:30:28.993 DEBUG 840 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 22:30:28.999 DEBUG 840 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 22:30:28.999 DEBUG 840 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 39(Long)
2021-02-02 22:30:29.000 DEBUG 840 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 22:30:29.000 DEBUG 840 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 22:30:29.000 DEBUG 840 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 39(Long), 39(Long), 39(Long)
2021-02-02 22:30:29.001 DEBUG 840 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 22:30:29.013 DEBUG 840 --- [http-nio-8080-exec-10] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 22:30:29.013 DEBUG 840 --- [http-nio-8080-exec-10] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 39(Long), -1(Long)
2021-02-02 22:30:29.014 DEBUG 840 --- [http-nio-8080-exec-10] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 22:30:29.015  INFO 840 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 22:30:29.813  INFO 840 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/39', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[39, {}]}
2021-02-02 22:30:29.814 DEBUG 840 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 22:30:29.814 DEBUG 840 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 39(Long), -1(Long)
2021-02-02 22:30:29.815 DEBUG 840 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 22:30:29.818  INFO 840 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 22:33:45.667  INFO 32784 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 32784 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 22:33:45.670 DEBUG 32784 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 22:33:45.670  INFO 32784 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 22:33:45.756  INFO 32784 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 22:33:45.757  INFO 32784 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 22:33:50.595  INFO 32784 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 22:33:50.603  INFO 32784 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 22:33:50.604  INFO 32784 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 22:33:50.691  INFO 32784 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 22:33:50.691  INFO 32784 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 4934 ms
2021-02-02 22:33:51.414  INFO 32784 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 22:33:51.501  INFO 32784 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 22:33:51.825  INFO 32784 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 22:33:51.860  INFO 32784 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 22:33:51.870  INFO 32784 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 7.011 seconds (JVM running for 9.31)
2021-02-02 22:34:00.721  INFO 32784 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 22:34:00.721  INFO 32784 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 22:34:00.738  INFO 32784 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 17 ms
2021-02-02 22:34:00.786  INFO 32784 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 22:34:00.801  INFO 32784 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 22:34:01.003  INFO 32784 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 22:34:01.085 DEBUG 32784 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 22:34:01.102 DEBUG 32784 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 22:34:01.119 DEBUG 32784 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 22:34:01.122 DEBUG 32784 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.create_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 22:34:01.122 DEBUG 32784 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 22:34:01.138 ERROR 32784 --- [http-nio-8080-exec-1] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/, Exception : {}

org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: Could not set property 'createTime' of 'class com.personblog.vo.FirstPageBlog' with value '2021-02-01 22:05:39.0' Cause: org.apache.ibatis.reflection.ReflectionException: There is no setter for property named 'createTime' in 'class com.personblog.vo.FirstPageBlog'
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440)
	at com.sun.proxy.$Proxy77.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:152)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85)
	at com.sun.proxy.$Proxy78.getFirstPageBlog(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy79.getFirstPageBlog(Unknown Source)
	at com.personblog.service.impl.BlogServiceImpl.getAllFirstPageBlog(BlogServiceImpl.java:104)
	at com.personblog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$edbaedc8.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:367)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.personblog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$7cf5385a.getAllFirstPageBlog(<generated>)
	at com.personblog.controller.IndexController.index(IndexController.java:43)
	at com.personblog.controller.IndexController$$FastClassBySpringCGLIB$$7f9820c6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.personblog.controller.IndexController$$EnhancerBySpringCGLIB$$e883d9c7.index(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.ibatis.reflection.ReflectionException: Could not set property 'createTime' of 'class com.personblog.vo.FirstPageBlog' with value '2021-02-01 22:05:39.0' Cause: org.apache.ibatis.reflection.ReflectionException: There is no setter for property named 'createTime' in 'class com.personblog.vo.FirstPageBlog'
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.setBeanProperty(BeanWrapper.java:185)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.set(BeanWrapper.java:59)
	at org.apache.ibatis.reflection.MetaObject.setValue(MetaObject.java:140)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.applyPropertyMappings(DefaultResultSetHandler.java:494)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.getRowValue(DefaultResultSetHandler.java:432)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValuesForNestedResultMap(DefaultResultSetHandler.java:909)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValues(DefaultResultSetHandler.java:326)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSet(DefaultResultSetHandler.java:301)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSets(DefaultResultSetHandler.java:194)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:325)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at com.github.pagehelper.util.ExecutorUtil.pageQuery(ExecutorUtil.java:177)
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:104)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)
	at com.sun.proxy.$Proxy110.query(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	... 97 common frames omitted
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no setter for property named 'createTime' in 'class com.personblog.vo.FirstPageBlog'
	at org.apache.ibatis.reflection.Reflector.getSetInvoker(Reflector.java:366)
	at org.apache.ibatis.reflection.MetaClass.getSetInvoker(MetaClass.java:168)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.setBeanProperty(BeanWrapper.java:177)
	... 122 common frames omitted

2021-02-02 22:34:01.145  WARN 32784 --- [http-nio-8080-exec-1] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: Could not set property 'createTime' of 'class com.personblog.vo.FirstPageBlog' with value '2021-02-01 22:05:39.0' Cause: org.apache.ibatis.reflection.ReflectionException: There is no setter for property named 'createTime' in 'class com.personblog.vo.FirstPageBlog']
2021-02-02 22:35:06.205  INFO 32808 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 32808 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 22:35:06.207 DEBUG 32808 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 22:35:06.207  INFO 32808 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 22:35:06.254  INFO 32808 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 22:35:06.255  INFO 32808 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 22:35:07.491  INFO 32808 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 22:35:07.499  INFO 32808 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 22:35:07.499  INFO 32808 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 22:35:07.614  INFO 32808 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 22:35:07.615  INFO 32808 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1360 ms
2021-02-02 22:35:08.223  INFO 32808 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 22:35:08.300  INFO 32808 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 22:35:08.618  INFO 32808 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 22:35:08.652  INFO 32808 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 22:35:08.662  INFO 32808 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 3.129 seconds (JVM running for 4.354)
2021-02-02 22:35:11.562  INFO 32808 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 22:35:11.563  INFO 32808 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 22:35:11.577  INFO 32808 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 14 ms
2021-02-02 22:35:11.615  INFO 32808 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 22:35:11.625  INFO 32808 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 22:35:11.873  INFO 32808 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 22:35:11.957 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 22:35:11.975 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 22:35:11.995 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 22:35:12.002 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.create_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 22:35:12.003 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 22:35:12.006 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 22:35:12.010 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 22:35:12.010 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 22:35:12.011 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 22:35:12.019 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 22:35:12.019 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 22:35:12.021 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 22:35:12.027 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 22:35:12.027 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 22:35:12.029 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 22:35:12.029  INFO 32808 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 22:35:15.955  INFO 32808 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/39', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[39, {}]}
2021-02-02 22:35:15.960 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.create_time, b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 22:35:15.961 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 39(Long)
2021-02-02 22:35:15.965 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 22:35:16.027 DEBUG 32808 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 22:35:16.027 DEBUG 32808 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 39(Long)
2021-02-02 22:35:16.029 DEBUG 32808 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 22:35:16.030 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 22:35:16.030 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 39(Long), 39(Long), 39(Long)
2021-02-02 22:35:16.033 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 22:35:16.042 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 22:35:16.042 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 39(Long), -1(Long)
2021-02-02 22:35:16.043 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 22:35:16.044  INFO 32808 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 22:35:16.955  INFO 32808 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/39', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[39, {}]}
2021-02-02 22:35:16.958 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 22:35:16.959 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 39(Long), -1(Long)
2021-02-02 22:35:16.960 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 22:35:16.961  INFO 32808 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 22:35:43.209  INFO 32808 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 22:35:43.222 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 22:35:43.222 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 22:35:43.224 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 22:35:43.224 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.create_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 22:35:43.224 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 22:35:43.226 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 22:35:43.227 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 22:35:43.230 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 22:35:43.232 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 22:35:43.234 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 22:35:43.234 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 22:35:43.235 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 22:35:43.237 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 22:35:43.237 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 22:35:43.238 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 22:35:43.239  INFO 32808 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 22:35:45.977  INFO 32808 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/39', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[39, {}]}
2021-02-02 22:35:45.980 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.create_time, b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 22:35:45.983 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 39(Long)
2021-02-02 22:35:45.987 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 22:35:45.994 DEBUG 32808 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 22:35:45.996 DEBUG 32808 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 39(Long)
2021-02-02 22:35:45.999 DEBUG 32808 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 22:35:45.999 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 22:35:46.000 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 39(Long), 39(Long), 39(Long)
2021-02-02 22:35:46.003 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 22:35:46.014 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 22:35:46.015 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 39(Long), -1(Long)
2021-02-02 22:35:46.016 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 22:35:46.017  INFO 32808 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 22:35:46.825  INFO 32808 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/39', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[39, {}]}
2021-02-02 22:35:46.826 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 22:35:46.826 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 39(Long), -1(Long)
2021-02-02 22:35:46.828 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 22:35:46.829  INFO 32808 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 22:36:00.154  INFO 32808 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/types/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TypeShowController.typeShow', args=[{}, -1, 1]}
2021-02-02 22:36:00.156 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 22:36:00.157 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 22:36:00.158 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 22:36:00.162 DEBUG 32808 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.getByTypeId  : ==>  Preparing: select b.id,b.title,b.flag,b.first_picture,b.published,b.views,b.update_time,b.description, t.id tid,t.name, b.comment_count, b.type_id, u.nickname, u.avatar from t_blog b join t_user u on b.user_id=u.id join t_type t on t.id=b.type_id and b.type_id = ? order by b.update_time desc
2021-02-02 22:36:00.162 DEBUG 32808 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.getByTypeId  : ==> Parameters: 25(Long)
2021-02-02 22:36:00.166 DEBUG 32808 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.getByTypeId  : <==      Total: 1
2021-02-02 22:36:00.167  INFO 32808 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : types
2021-02-02 22:36:06.797  INFO 32808 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/tags/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TagShowController.tag', args=[1, -1, {}]}
2021-02-02 22:36:06.803 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 22:36:06.803 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 22:36:06.809 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 22:36:06.813 DEBUG 32808 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.getByTagId   : ==>  Preparing: select b.id,b.title,b.first_picture,b.flag,b.views,b.update_time,b.description, t.id,t.name, u.nickname, u.avatar, b.comment_count from t_blog b, t_type t,t_blog_tag tb ,t_user u,t_tag tt where b.type_id = t.id and u.id = b.user_id and tb.blog_id = b.id and tb.tag_id = tt.id and tb.tag_id = ? order by b.update_time desc
2021-02-02 22:36:06.814 DEBUG 32808 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.getByTagId   : ==> Parameters: 16(Long)
2021-02-02 22:36:06.816 DEBUG 32808 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.getByTagId   : <==      Total: 1
2021-02-02 22:36:06.817  INFO 32808 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : tags
2021-02-02 22:36:12.192  INFO 32808 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/tags/17', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TagShowController.tag', args=[1, 17, {}]}
2021-02-02 22:36:12.195 DEBUG 32808 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 22:36:12.196 DEBUG 32808 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 22:36:12.199 DEBUG 32808 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 22:36:12.201 DEBUG 32808 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getByTagId   : ==>  Preparing: select b.id,b.title,b.first_picture,b.flag,b.views,b.update_time,b.description, t.id,t.name, u.nickname, u.avatar, b.comment_count from t_blog b, t_type t,t_blog_tag tb ,t_user u,t_tag tt where b.type_id = t.id and u.id = b.user_id and tb.blog_id = b.id and tb.tag_id = tt.id and tb.tag_id = ? order by b.update_time desc
2021-02-02 22:36:12.202 DEBUG 32808 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getByTagId   : ==> Parameters: 17(Long)
2021-02-02 22:36:12.204 DEBUG 32808 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getByTagId   : <==      Total: 1
2021-02-02 22:36:12.205  INFO 32808 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : tags
2021-02-02 22:36:13.790  INFO 32808 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/tags/18', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TagShowController.tag', args=[1, 18, {}]}
2021-02-02 22:36:13.792 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 22:36:13.792 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 22:36:13.795 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 22:36:13.798 DEBUG 32808 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.getByTagId   : ==>  Preparing: select b.id,b.title,b.first_picture,b.flag,b.views,b.update_time,b.description, t.id,t.name, u.nickname, u.avatar, b.comment_count from t_blog b, t_type t,t_blog_tag tb ,t_user u,t_tag tt where b.type_id = t.id and u.id = b.user_id and tb.blog_id = b.id and tb.tag_id = tt.id and tb.tag_id = ? order by b.update_time desc
2021-02-02 22:36:13.798 DEBUG 32808 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.getByTagId   : ==> Parameters: 18(Long)
2021-02-02 22:36:13.799 DEBUG 32808 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.getByTagId   : <==      Total: 1
2021-02-02 22:36:13.800  INFO 32808 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : tags
2021-02-02 22:36:16.148  INFO 32808 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/message', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.message', args=[]}
2021-02-02 22:36:16.152  INFO 32808 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : message
2021-02-02 22:36:16.550  INFO 32808 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/messagecomment', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.messages', args=[{}]}
2021-02-02 22:36:16.554 DEBUG 32808 --- [http-nio-8080-exec-2] c.p.d.MessageMapper.findByParentIdNull   : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 22:36:16.554 DEBUG 32808 --- [http-nio-8080-exec-2] c.p.d.MessageMapper.findByParentIdNull   : ==> Parameters: -1(Long)
2021-02-02 22:36:16.556 DEBUG 32808 --- [http-nio-8080-exec-2] c.p.d.MessageMapper.findByParentIdNull   : <==      Total: 1
2021-02-02 22:36:16.557 DEBUG 32808 --- [http-nio-8080-exec-2] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 22:36:16.557 DEBUG 32808 --- [http-nio-8080-exec-2] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 121(Long)
2021-02-02 22:36:16.558 DEBUG 32808 --- [http-nio-8080-exec-2] c.p.d.M.findByParentIdNotNull            : <==      Total: 0
2021-02-02 22:36:16.559  INFO 32808 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Result : message::messageList
2021-02-02 22:36:37.159  INFO 32808 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/archives', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.ArchiveShowController.archive', args=[{count=Count(id=null, count=null, createTime=null), org.springframework.validation.BindingResult.count=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, Count(id=null, count=null, createTime=null)]}
2021-02-02 22:36:37.164 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.findGroupYear         : ==>  Preparing: select date_format(b.create_time,'%Y') year from t_blog b group by year order by year desc
2021-02-02 22:36:37.164 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.findGroupYear         : ==> Parameters: 
2021-02-02 22:36:37.165 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.findGroupYear         : <==      Total: 1
2021-02-02 22:36:37.166 DEBUG 32808 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.findByYear   : ==>  Preparing: select b.id bid, b.title, b.create_time, b.flag,t.name from t_blog b, t_type t where date_format(b.create_time,'%Y')=? and b.type_id=t.id order by b.create_time desc
2021-02-02 22:36:37.166 DEBUG 32808 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.findByYear   : ==> Parameters: 2021(String)
2021-02-02 22:36:37.167 DEBUG 32808 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.findByYear   : <==      Total: 1
2021-02-02 22:36:37.168 DEBUG 32808 --- [http-nio-8080-exec-9] com.personblog.dao.BlogMapper.count      : ==>  Preparing: select count(*) from t_blog
2021-02-02 22:36:37.169 DEBUG 32808 --- [http-nio-8080-exec-9] com.personblog.dao.BlogMapper.count      : ==> Parameters: 
2021-02-02 22:36:37.169 DEBUG 32808 --- [http-nio-8080-exec-9] com.personblog.dao.BlogMapper.count      : <==      Total: 1
2021-02-02 22:36:37.170 DEBUG 32808 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.deleteCount  : ==>  Preparing: delete from t_count
2021-02-02 22:36:37.171 DEBUG 32808 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.deleteCount  : ==> Parameters: 
2021-02-02 22:36:37.174 DEBUG 32808 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.deleteCount  : <==    Updates: 1
2021-02-02 22:36:37.174 DEBUG 32808 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.insertCount  : ==>  Preparing: insert into t_count(count,create_time) (select count(*) count, create_time from t_blog GROUP BY year(create_time),month(create_time) order by create_time desc)
2021-02-02 22:36:37.175 DEBUG 32808 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.insertCount  : ==> Parameters: 
2021-02-02 22:36:37.177 DEBUG 32808 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.insertCount  : <==    Updates: 1
2021-02-02 22:36:37.178 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.findGroupYear2        : ==>  Preparing: select date_format(t_count.create_time,'%Y年%m月') year1 from t_count GROUP BY year1 order by year1 desc
2021-02-02 22:36:37.178 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.findGroupYear2        : ==> Parameters: 
2021-02-02 22:36:37.180 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.findGroupYear2        : <==      Total: 1
2021-02-02 22:36:37.181 DEBUG 32808 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.findByYear2  : ==>  Preparing: select c.id,c.count,c.create_time from t_count c where date_format(c.create_time,'%Y年%m月')=? order by c.create_time desc
2021-02-02 22:36:37.182 DEBUG 32808 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.findByYear2  : ==> Parameters: 2021年02月(String)
2021-02-02 22:36:37.184 DEBUG 32808 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.findByYear2  : <==      Total: 1
2021-02-02 22:36:37.186  INFO 32808 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : archives
2021-02-02 22:36:42.349  INFO 32808 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/about', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.AboutShowController.about', args=[]}
2021-02-02 22:36:42.351  INFO 32808 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : about
2021-02-02 22:36:46.900  INFO 32808 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 22:36:46.905 DEBUG 32808 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 22:36:46.906 DEBUG 32808 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 22:36:46.909 DEBUG 32808 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 22:36:46.910 DEBUG 32808 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.create_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 22:36:46.910 DEBUG 32808 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 22:36:46.912 DEBUG 32808 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 22:36:46.913 DEBUG 32808 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 22:36:46.914 DEBUG 32808 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 22:36:46.915 DEBUG 32808 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 22:36:46.916 DEBUG 32808 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 22:36:46.916 DEBUG 32808 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 22:36:46.917 DEBUG 32808 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 22:36:46.919 DEBUG 32808 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 22:36:46.921 DEBUG 32808 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 22:36:46.923 DEBUG 32808 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 22:36:46.925  INFO 32808 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 22:38:07.520  INFO 32808 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 22:38:07.530 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 22:38:07.531 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 22:38:07.532 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 22:38:07.534 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.create_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 22:38:07.535 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 22:38:07.537 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 22:38:07.538 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 22:38:07.539 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 22:38:07.539 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 22:38:07.540 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 22:38:07.541 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 22:38:07.542 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 22:38:07.546 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 22:38:07.547 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 22:38:07.548 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 22:38:07.550  INFO 32808 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 22:38:33.051  INFO 32808 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 22:38:33.054 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 22:38:33.054 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 22:38:33.055 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 22:38:33.055 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.create_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 22:38:33.056 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 22:38:33.061 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 22:38:33.063 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 22:38:33.063 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 22:38:33.064 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 22:38:33.065 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 22:38:33.066 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 22:38:33.067 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 22:38:33.068 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 22:38:33.069 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 22:38:33.069 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 22:38:33.071  INFO 32808 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 22:39:04.343  INFO 32808 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 22:39:04.347 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 22:39:04.347 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 22:39:04.348 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 22:39:04.349 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.create_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 22:39:04.349 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 22:39:04.352 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 22:39:04.359 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 22:39:04.360 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 22:39:04.361 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 22:39:04.363 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 22:39:04.363 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 22:39:04.367 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 22:39:04.368 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 22:39:04.369 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 22:39:04.373 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 22:39:04.376  INFO 32808 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 22:40:07.461  INFO 32808 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 22:40:07.468 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 22:40:07.469 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 22:40:07.470 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 22:40:07.470 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.create_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 22:40:07.471 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 22:40:07.472 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 22:40:07.473 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 22:40:07.474 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 22:40:07.474 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 22:40:07.475 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 22:40:07.475 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 22:40:07.476 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 22:40:07.480 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 22:40:07.481 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 22:40:07.484 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 22:40:07.485  INFO 32808 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 22:40:19.454  INFO 32808 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/types/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TypeShowController.typeShow', args=[{}, -1, 1]}
2021-02-02 22:40:19.455 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 22:40:19.456 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 22:40:19.457 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 22:40:19.458 DEBUG 32808 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.getByTypeId  : ==>  Preparing: select b.id,b.title,b.flag,b.first_picture,b.published,b.views,b.update_time,b.description, t.id tid,t.name, b.comment_count, b.type_id, u.nickname, u.avatar from t_blog b join t_user u on b.user_id=u.id join t_type t on t.id=b.type_id and b.type_id = ? order by b.update_time desc
2021-02-02 22:40:19.458 DEBUG 32808 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.getByTypeId  : ==> Parameters: 25(Long)
2021-02-02 22:40:19.460 DEBUG 32808 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.getByTypeId  : <==      Total: 1
2021-02-02 22:40:19.463  INFO 32808 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : types
2021-02-02 22:40:20.522  INFO 32808 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/tags/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TagShowController.tag', args=[1, -1, {}]}
2021-02-02 22:40:20.523 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 22:40:20.523 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 22:40:20.524 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 3
2021-02-02 22:40:20.525 DEBUG 32808 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.getByTagId   : ==>  Preparing: select b.id,b.title,b.first_picture,b.flag,b.views,b.update_time,b.description, t.id,t.name, u.nickname, u.avatar, b.comment_count from t_blog b, t_type t,t_blog_tag tb ,t_user u,t_tag tt where b.type_id = t.id and u.id = b.user_id and tb.blog_id = b.id and tb.tag_id = tt.id and tb.tag_id = ? order by b.update_time desc
2021-02-02 22:40:20.526 DEBUG 32808 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.getByTagId   : ==> Parameters: 16(Long)
2021-02-02 22:40:20.529 DEBUG 32808 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.getByTagId   : <==      Total: 1
2021-02-02 22:40:20.531  INFO 32808 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : tags
2021-02-02 22:40:21.289  INFO 32808 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/message', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.message', args=[]}
2021-02-02 22:40:21.289  INFO 32808 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Result : message
2021-02-02 22:40:21.695  INFO 32808 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/messagecomment', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.messages', args=[{}]}
2021-02-02 22:40:21.698 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.d.MessageMapper.findByParentIdNull   : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 22:40:21.698 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.d.MessageMapper.findByParentIdNull   : ==> Parameters: -1(Long)
2021-02-02 22:40:21.700 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.d.MessageMapper.findByParentIdNull   : <==      Total: 1
2021-02-02 22:40:21.701 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 22:40:21.702 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 121(Long)
2021-02-02 22:40:21.703 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.d.M.findByParentIdNotNull            : <==      Total: 0
2021-02-02 22:40:21.704  INFO 32808 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : message::messageList
2021-02-02 22:40:21.765  INFO 32808 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/archives', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.ArchiveShowController.archive', args=[{count=Count(id=null, count=null, createTime=null), org.springframework.validation.BindingResult.count=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, Count(id=null, count=null, createTime=null)]}
2021-02-02 22:40:21.765 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.findGroupYear         : ==>  Preparing: select date_format(b.create_time,'%Y') year from t_blog b group by year order by year desc
2021-02-02 22:40:21.766 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.findGroupYear         : ==> Parameters: 
2021-02-02 22:40:21.767 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.findGroupYear         : <==      Total: 1
2021-02-02 22:40:21.767 DEBUG 32808 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.findByYear   : ==>  Preparing: select b.id bid, b.title, b.create_time, b.flag,t.name from t_blog b, t_type t where date_format(b.create_time,'%Y')=? and b.type_id=t.id order by b.create_time desc
2021-02-02 22:40:21.768 DEBUG 32808 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.findByYear   : ==> Parameters: 2021(String)
2021-02-02 22:40:21.769 DEBUG 32808 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.findByYear   : <==      Total: 1
2021-02-02 22:40:21.770 DEBUG 32808 --- [http-nio-8080-exec-6] com.personblog.dao.BlogMapper.count      : ==>  Preparing: select count(*) from t_blog
2021-02-02 22:40:21.771 DEBUG 32808 --- [http-nio-8080-exec-6] com.personblog.dao.BlogMapper.count      : ==> Parameters: 
2021-02-02 22:40:21.771 DEBUG 32808 --- [http-nio-8080-exec-6] com.personblog.dao.BlogMapper.count      : <==      Total: 1
2021-02-02 22:40:21.772 DEBUG 32808 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.deleteCount  : ==>  Preparing: delete from t_count
2021-02-02 22:40:21.772 DEBUG 32808 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.deleteCount  : ==> Parameters: 
2021-02-02 22:40:21.773 DEBUG 32808 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.deleteCount  : <==    Updates: 1
2021-02-02 22:40:21.773 DEBUG 32808 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.insertCount  : ==>  Preparing: insert into t_count(count,create_time) (select count(*) count, create_time from t_blog GROUP BY year(create_time),month(create_time) order by create_time desc)
2021-02-02 22:40:21.773 DEBUG 32808 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.insertCount  : ==> Parameters: 
2021-02-02 22:40:21.774 DEBUG 32808 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.insertCount  : <==    Updates: 1
2021-02-02 22:40:21.775 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.findGroupYear2        : ==>  Preparing: select date_format(t_count.create_time,'%Y年%m月') year1 from t_count GROUP BY year1 order by year1 desc
2021-02-02 22:40:21.775 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.findGroupYear2        : ==> Parameters: 
2021-02-02 22:40:21.777 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.findGroupYear2        : <==      Total: 1
2021-02-02 22:40:21.778 DEBUG 32808 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.findByYear2  : ==>  Preparing: select c.id,c.count,c.create_time from t_count c where date_format(c.create_time,'%Y年%m月')=? order by c.create_time desc
2021-02-02 22:40:21.778 DEBUG 32808 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.findByYear2  : ==> Parameters: 2021年02月(String)
2021-02-02 22:40:21.780 DEBUG 32808 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.findByYear2  : <==      Total: 1
2021-02-02 22:40:21.782  INFO 32808 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : archives
2021-02-02 22:40:22.948  INFO 32808 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/about', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.AboutShowController.about', args=[]}
2021-02-02 22:40:22.948  INFO 32808 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : about
2021-02-02 22:40:24.622  INFO 32808 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 22:40:24.624 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 22:40:24.624 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 22:40:24.625 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 22:40:24.627 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.create_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 22:40:24.628 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 22:40:24.630 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 22:40:24.632 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 22:40:24.632 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 22:40:24.633 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 22:40:24.634 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 22:40:24.634 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 22:40:24.635 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 1
2021-02-02 22:40:24.635 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 22:40:24.636 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 22:40:24.637 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 22:40:24.637  INFO 32808 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 22:41:10.598 DEBUG 32808 --- [http-nio-8080-exec-8] com.personblog.dao.UserMapper.login      : ==>  Preparing: select * from t_user where username = ? and password = ?;
2021-02-02 22:41:10.598 DEBUG 32808 --- [http-nio-8080-exec-8] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 22:41:10.599 DEBUG 32808 --- [http-nio-8080-exec-8] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 22:41:16.265 DEBUG 32808 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 22:41:16.266 DEBUG 32808 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 22:41:16.267 DEBUG 32808 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 22:41:16.271 DEBUG 32808 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 22:41:16.272 DEBUG 32808 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 22:41:16.274 DEBUG 32808 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 22:41:16.275 DEBUG 32808 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 22:41:16.275 DEBUG 32808 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 22:41:16.276 DEBUG 32808 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 22:41:22.565 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 22:41:22.565 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 22:41:22.566 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 22:41:22.567 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 22:41:22.569 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 22:41:22.570 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 22:41:25.459 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 22:41:25.460 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 22:41:25.460 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 22:41:25.462 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 22:41:25.462 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 22:41:25.463 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 22:41:25.464 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 22:41:25.464 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 22:41:25.465 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 22:42:02.371 DEBUG 32808 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 22:42:02.371 DEBUG 32808 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 22:42:02.372 DEBUG 32808 --- [http-nio-8080-exec-9] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 22:42:02.373 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 22:42:02.373 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 22:42:02.374 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 22:42:52.140 DEBUG 32808 --- [http-nio-8080-exec-5] com.personblog.dao.UserMapper.login      : ==>  Preparing: select * from t_user where username = ? and password = ?;
2021-02-02 22:42:52.141 DEBUG 32808 --- [http-nio-8080-exec-5] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 22:42:52.143 DEBUG 32808 --- [http-nio-8080-exec-5] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 22:42:54.561 DEBUG 32808 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 22:42:54.561 DEBUG 32808 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 22:42:54.561 DEBUG 32808 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 22:42:54.562 DEBUG 32808 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 22:42:54.562 DEBUG 32808 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 22:42:54.563 DEBUG 32808 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : <==      Total: 1
2021-02-02 22:43:21.827 DEBUG 32808 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectTypeByName      : ==>  Preparing: select id, name from t_type where name = ?
2021-02-02 22:43:21.827 DEBUG 32808 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectTypeByName      : ==> Parameters: MySQL(String)
2021-02-02 22:43:21.827 DEBUG 32808 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectTypeByName      : <==      Total: 0
2021-02-02 22:43:21.828 DEBUG 32808 --- [http-nio-8080-exec-3] c.personblog.dao.TypeMapper.insertType   : ==>  Preparing: insert into t_type(name) values (?);
2021-02-02 22:43:21.829 DEBUG 32808 --- [http-nio-8080-exec-3] c.personblog.dao.TypeMapper.insertType   : ==> Parameters: MySQL(String)
2021-02-02 22:43:21.830 DEBUG 32808 --- [http-nio-8080-exec-3] c.personblog.dao.TypeMapper.insertType   : <==    Updates: 1
2021-02-02 22:43:21.850 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType_COUNT   : ==>  Preparing: SELECT count(0) FROM t_type
2021-02-02 22:43:21.850 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType_COUNT   : ==> Parameters: 
2021-02-02 22:43:21.850 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType_COUNT   : <==      Total: 1
2021-02-02 22:43:21.851 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: SELECT id, name FROM t_type order by id desc LIMIT ?
2021-02-02 22:43:21.851 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 5(Integer)
2021-02-02 22:43:21.851 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllType         : <==      Total: 2
2021-02-02 22:43:24.838 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTag_COUNT     : ==>  Preparing: SELECT count(0) FROM t_tag
2021-02-02 22:43:24.839 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTag_COUNT     : ==> Parameters: 
2021-02-02 22:43:24.839 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTag_COUNT     : <==      Total: 1
2021-02-02 22:43:24.840 DEBUG 32808 --- [http-nio-8080-exec-6] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: SELECT id, name FROM t_tag order by id desc LIMIT ?
2021-02-02 22:43:24.840 DEBUG 32808 --- [http-nio-8080-exec-6] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 5(Integer)
2021-02-02 22:43:24.841 DEBUG 32808 --- [http-nio-8080-exec-6] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 3
2021-02-02 22:43:32.718 DEBUG 32808 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectTagByName        : ==>  Preparing: select id, name from t_tag where name = ?
2021-02-02 22:43:32.718 DEBUG 32808 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectTagByName        : ==> Parameters: sql(String)
2021-02-02 22:43:32.720 DEBUG 32808 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectTagByName        : <==      Total: 0
2021-02-02 22:43:32.722 DEBUG 32808 --- [http-nio-8080-exec-3] com.personblog.dao.TagMapper.insertTag   : ==>  Preparing: insert into t_tag(name) values (?)
2021-02-02 22:43:32.723 DEBUG 32808 --- [http-nio-8080-exec-3] com.personblog.dao.TagMapper.insertTag   : ==> Parameters: sql(String)
2021-02-02 22:43:32.725 DEBUG 32808 --- [http-nio-8080-exec-3] com.personblog.dao.TagMapper.insertTag   : <==    Updates: 1
2021-02-02 22:43:32.733 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTag_COUNT     : ==>  Preparing: SELECT count(0) FROM t_tag
2021-02-02 22:43:32.733 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTag_COUNT     : ==> Parameters: 
2021-02-02 22:43:32.734 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTag_COUNT     : <==      Total: 1
2021-02-02 22:43:32.735 DEBUG 32808 --- [http-nio-8080-exec-5] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: SELECT id, name FROM t_tag order by id desc LIMIT ?
2021-02-02 22:43:32.736 DEBUG 32808 --- [http-nio-8080-exec-5] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 5(Integer)
2021-02-02 22:43:32.737 DEBUG 32808 --- [http-nio-8080-exec-5] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 4
2021-02-02 22:43:43.062 DEBUG 32808 --- [http-nio-8080-exec-7] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 22:43:43.062 DEBUG 32808 --- [http-nio-8080-exec-7] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 22:43:43.063 DEBUG 32808 --- [http-nio-8080-exec-7] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 4
2021-02-02 22:43:43.064 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 22:43:43.064 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 22:43:43.064 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectAllType         : <==      Total: 2
2021-02-02 22:43:50.557 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 22:43:50.557 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 22:43:50.558 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 22:43:50.560 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 22:43:50.561 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 22:43:50.562 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 1
2021-02-02 22:43:50.563 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 22:43:50.564 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 22:43:50.564 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllType         : <==      Total: 2
2021-02-02 22:43:52.080 DEBUG 32808 --- [http-nio-8080-exec-6] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 22:43:52.080 DEBUG 32808 --- [http-nio-8080-exec-6] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 22:43:52.081 DEBUG 32808 --- [http-nio-8080-exec-6] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 4
2021-02-02 22:43:52.083 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 22:43:52.083 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 22:43:52.085 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllType         : <==      Total: 2
2021-02-02 22:48:19.425 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 22:48:19.425 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 26(Long)
2021-02-02 22:48:19.426 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 22:48:19.427 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 22:48:19.427 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 19(Long)
2021-02-02 22:48:19.428 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 22:48:19.429 DEBUG 32808 --- [http-nio-8080-exec-6] com.personblog.dao.BlogMapper.saveBlog   : ==>  Preparing: insert into t_blog (title, content, first_picture, flag, views, comment_count, appreciation, share_statement, commentabled, published, recommend, create_time, update_time, type_id, user_id, description, tag_ids) values (?,?,?,?,?,?,?, ?,?,?,?,?, ?,?,?,?,?)
2021-02-02 22:48:19.432 DEBUG 32808 --- [http-nio-8080-exec-6] com.personblog.dao.BlogMapper.saveBlog   : ==> Parameters: 牛客网-在线编程-sql实战76道-----1-10(String), [**牛客sql实战第1题**](https://www.nowcoder.com/practice/218ae58dfdcd4af195fff264e062138f?tpId=82&&tqId=29753&rp=1&ru=/ta/sql&qru=/ta/sql/question-ranking)

查找最晚入职员工的所有信息，为了减轻入门难度，目前所有的数据里员工入职的日期都不是同一天
```sql
CREATE TABLE `employees` (
`emp_no` int(11) NOT NULL,  -- '员工编号'
`birth_date` date NOT NULL,
`first_name` varchar(14) NOT NULL,
`last_name` varchar(16) NOT NULL,
`gender` char(1) NOT NULL,
`hire_date` date NOT NULL,
PRIMARY KEY (`emp_no`));
```
要找最晚入职的员工，这里有两种方式，第一种直接用 **max函数**，第二种**order by desc + limit**
由于题目说了入职日期不是同一天，所以我们这里两种都能用。如果有员工入职日期在同一天的话，自然 limit 就不能用了

```sql
select * from employees
where hire_date = (select max(hire_date) from employees)
```
```sql
SELECT * FROM employees ORDER BY hire_date DESC LIMIT 1;
```
这里再复习一波 max 和 limit

max 是分组函数其中之一，分组函数自动忽略NULL。分组函数不可直接使用在where子句当中，因为group by是在where执行之后才会执行的

limit 是mysql特有的，其他数据库中没有，不通用
limit 是sql语句最后执行的一个环节

limit startIndex, length
startIndex 表示起始位置，从0开始，0表示第一条数据。startIndex 如果为0可省略不写
length 表示取几个

[**牛客sql实战第2题**](https://www.nowcoder.com/practice/ec1ca44c62c14ceb990c3c40def1ec6c?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

查找入职员工时间排名倒数第三的员工所有信息，为了减轻入门难度，目前所有的数据里员工入职的日期都不是同一天
```sql
CREATE TABLE `employees` (
`emp_no` int(11) NOT NULL,
`birth_date` date NOT NULL,
`first_name` varchar(14) NOT NULL,
`last_name` varchar(16) NOT NULL,
`gender` char(1) NOT NULL,
`hire_date` date NOT NULL,
PRIMARY KEY (`emp_no`));
```
排名倒数第三，自然想到用 order by + limit 
同理，如果有同一天入职的员工则还要加一个 distinct 去重
```sql
select * from employees
order by hire_date desc limit 2,1
```
```sql
select * from employees
where hire_date = 
(select distinct hire_date from employees order by hire_date desc limit 2,1);
```

[**牛客sql实战第3题**](https://www.nowcoder.com/practice/c63c5b54d86e4c6d880e4834bfd70c3b?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

查找各个部门当前(dept_manager.to_date='9999-01-01')领导当前(salaries.to_date='9999-01-01')薪水详情以及其对应部门编号dept_no
(注:输出结果以salaries.emp_no升序排序，并且请注意输出结果里面dept_no列是最后一列)
```sql
CREATE TABLE `salaries` (
`emp_no` int(11) NOT NULL, -- '员工编号',
`salary` int(11) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`from_date`));
CREATE TABLE `dept_manager` (
`dept_no` char(4) NOT NULL, -- '部门编号'
`emp_no` int(11) NOT NULL, --  '员工编号'
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`dept_no`));
```
要查每个部门的领导的薪水，直接 join ，把当前条件带上
```sql
select s.*, d.dept_no from salaries s
join dept_manager d
on s.emp_no = d.emp_no
where s.to_date = '9999-01-01' and d.to_date='9999-01-01'
order by emp_no asc;
```
[**牛客sql实战第4题**](https://www.nowcoder.com/practice/6d35b1cd593545ab985a68cd86f28671?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

查找所有已经分配部门的员工的last_name和first_name以及dept_no(请注意输出描述里各个列的前后顺序)
```sql
CREATE TABLE `dept_emp` (
`emp_no` int(11) NOT NULL,
`dept_no` char(4) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`dept_no`));
CREATE TABLE `employees` (
`emp_no` int(11) NOT NULL,
`birth_date` date NOT NULL,
`first_name` varchar(14) NOT NULL,
`last_name` varchar(16) NOT NULL,
`gender` char(1) NOT NULL,
`hire_date` date NOT NULL,
PRIMARY KEY (`emp_no`));
```
**join**
```sql
select e.last_name, e.first_name, d.dept_no from employees e
join dept_emp d
on e.emp_no = d.emp_no
```
**left join** 注意要用 dept_emp 做主表
```sql
SELECT e.last_name,e.first_name,d.dept_no
FROM dept_emp d LEFT JOIN employees e ON d.emp_no = e.emp_no 
```
在讨论区看到有使用 **using** 函数的，记录一下(两表字段关联的条件可以用函数简化)
```sql
SELECT e.last_name,e.first_name,d.dept_no
FROM dept_emp d LEFT JOIN employees e USING(emp_no)
```
[**牛客sql实战第5题**](https://www.nowcoder.com/practice/dbfafafb2ee2482aa390645abd4463bf?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

查找所有员工的last_name和first_name以及对应部门编号dept_no，也包括暂时没有分配具体部门的员工(请注意输出描述里各个列的前后顺序)

```sql
CREATE TABLE `dept_emp` (
`emp_no` int(11) NOT NULL,
`dept_no` char(4) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`dept_no`));
CREATE TABLE `employees` (
`emp_no` int(11) NOT NULL,
`birth_date` date NOT NULL,
`first_name` varchar(14) NOT NULL,
`last_name` varchar(16) NOT NULL,
`gender` char(1) NOT NULL,
`hire_date` date NOT NULL,
PRIMARY KEY (`emp_no`));
```
包括没有分配部门的，所以 **employees** 做主表

```sql
select e.last_name, e.first_name, d.dept_no from employees e
left join dept_emp d
on e.emp_no = d.emp_no
```

[**牛客sql实战第6题**](https://www.nowcoder.com/practice/23142e7a23e4480781a3b978b5e0f33a?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

查找所有员工入职时候的薪水情况，给出emp_no以及salary， 并按照emp_no进行逆序(请注意，一个员工可能有多次涨薪的情况)
```sql
CREATE TABLE `employees` (
`emp_no` int(11) NOT NULL,
`birth_date` date NOT NULL,
`first_name` varchar(14) NOT NULL,
`last_name` varchar(16) NOT NULL,
`gender` char(1) NOT NULL,
`hire_date` date NOT NULL,
PRIMARY KEY (`emp_no`));
CREATE TABLE `salaries` (
`emp_no` int(11) NOT NULL,
`salary` int(11) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`from_date`));
```
```sql
select e.emp_no, s.salary from employees e
join salaries s on e.emp_no = s.emp_no and e.hire_date = s.from_date
order by emp_no desc
```
评论区还有一种并列查询 and
```sql
SELECT e.emp_no, s.salary FROM employees AS e, salaries AS s
WHERE e.emp_no = s.emp_no AND e.hire_date = s.from_date
ORDER BY e.emp_no DESC
```

内连接是按照on后面的条件来构建临时表，而From表则使用的是**广义笛卡尔积**。
如果两张表的数据量很大的话，那么广义笛卡尔积的结果记录数为M(第一张表的记录数)xN(第二张表的记录数),
前者是**根据条件过滤构建临时表**，后者是**先构建临时表**然后再使用where过滤,所以当数据量大的时候广义笛卡尔积肯定性能更差些

[**牛客sql实战第7题**](https://www.nowcoder.com/practice/6d4a4cff1d58495182f536c548fee1ae?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

查找薪水变动超过15次的员工号emp_no以及其对应的变动次数t
```sql
CREATE TABLE `salaries` (
`emp_no` int(11) NOT NULL,
`salary` int(11) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`from_date`));
```
变动次数，说明薪水变动一次，就有一条emp_no记录
```sql
select emp_no, count(emp_no) t from salaries
group by emp_no having t > 15
```
[**牛客sql实战第8题**](https://www.nowcoder.com/practice/ae51e6d057c94f6d891735a48d1c2397?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

找出所有员工当前(to_date='9999-01-01')具体的薪水salary情况，对于相同的薪水只显示一次,并按照逆序显示
```sql
CREATE TABLE `salaries` (
`emp_no` int(11) NOT NULL,
`salary` int(11) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`from_date`));
```
根据字面意思直接写即可
```sql
select distinct salary from salaries where to_date = '9999-01-01' 
order by salary desc;
```
摘自讨论区：

大表一般用distinct效率不高，大数据量的时候都禁止用distinct，建议用group by解决重复问题。
```sql
select salary from salaries where to_date='9999-01-01' 
group by salary order by salary desc
```
WHERE语句在GROUP BY语句之前，SQL会在分组之前计算WHERE语句。   
HAVING语句在GROUP BY语句之后，SQL会在分组之后计算HAVING语句。

[**牛客sql实战第9题**](https://www.nowcoder.com/practice/4c8b4a10ca5b44189e411107e1d8bec1?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

获取所有部门当前(dept_manager.to_date='9999-01-01')manager的当前(salaries.to_date='9999-01-01')薪水情况，给出dept_no, emp_no以及salary，输出结果按照dept_no升序排列(请注意，同一个人可能有多条薪水情况记录)
```sql
CREATE TABLE `dept_manager` (
`dept_no` char(4) NOT NULL,
`emp_no` int(11) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`dept_no`));
CREATE TABLE `salaries` (
`emp_no` int(11) NOT NULL,
`salary` int(11) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`from_date`));
```
直接 join 或者 where 都可以
```sql
select d.dept_no, d.emp_no, s.salary from dept_manager d
join salaries s on d.emp_no = s.emp_no
and d.to_date='9999-01-01' 
and.to_date='9999-01-01'
order by dept_no
```
[**牛客sql实战第10题**](https://www.nowcoder.com/practice/32c53d06443346f4a2f2ca733c19660c?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

获取所有非manager的员工emp_no
```sql
CREATE TABLE `dept_manager` (
`dept_no` char(4) NOT NULL,
`emp_no` int(11) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`dept_no`));
CREATE TABLE `employees` (
`emp_no` int(11) NOT NULL,
`birth_date` date NOT NULL,
`first_name` varchar(14) NOT NULL,
`last_name` varchar(16) NOT NULL,
`gender` char(1) NOT NULL,
`hire_date` date NOT NULL,
PRIMARY KEY (`emp_no`));
```
方法一：先用一个left join 把employees表的记录全部查出来，再用 where把 dept_no 为空的都过滤掉就是非manager的员工
```sql
select e.emp_no from employees e
left join dept_manager d
on e.emp_no = d.emp_no
where d.dept_no is null
```
方法二：not in
```sql
SELECT emp_no FROM employees
WHERE emp_no NOT IN (SELECT emp_no FROM dept_manager)
```(String), https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fbbsfiles.vivo.com.cn%2Fvivobbs%2Fattachment%2Fforum%2F201806%2F19%2F160132ham21bjr3mjer84h.jpeg&refer=http%3A%2F%2Fbbsfiles.vivo.com.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1614869258&t=a2935545d3b3ba121d44958b572fe0c2(String), 原创(String), 0(Integer), 0(Integer), false(Boolean), true(Boolean), true(Boolean), true(Boolean), false(Boolean), 2021-02-02 22:48:19.429(Timestamp), 2021-02-02 22:48:19.429(Timestamp), 26(Long), 0(Long), 牛客sql实战第1题，查找最晚入职员工的所有信息(String), 19(String)
2021-02-02 22:48:19.506 ERROR 32808 --- [http-nio-8080-exec-6] c.p.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/admin/blogs, Exception : {}

org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'first_picture' at row 1
### The error may exist in file [E:\PersonBlog\target\classes\mapper\BlogMapper.xml]
### The error may involve com.personblog.dao.BlogMapper.saveBlog-Inline
### The error occurred while setting parameters
### SQL: insert into t_blog (title, content, first_picture, flag,         views, comment_count, appreciation, share_statement, commentabled, published,         recommend, create_time, update_time, type_id, user_id, description, tag_ids)         values (?,?,?,?,?,?,?,         ?,?,?,?,?,         ?,?,?,?,?)
### Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'first_picture' at row 1
; Data truncation: Data too long for column 'first_picture' at row 1; nested exception is com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'first_picture' at row 1
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:104)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:88)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440)
	at com.sun.proxy.$Proxy77.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:271)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:152)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85)
	at com.sun.proxy.$Proxy78.saveBlog(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy79.saveBlog(Unknown Source)
	at com.personblog.service.impl.BlogServiceImpl.saveBlog(BlogServiceImpl.java:44)
	at com.personblog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$edbaedc8.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:367)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.personblog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$8eb7e462.saveBlog(<generated>)
	at com.personblog.controller.admin.BlogController.post(BlogController.java:88)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'first_picture' at row 1
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3914)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2495)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1903)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1242)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor62.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy112.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy110.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	... 80 common frames omitted

2021-02-02 22:48:19.507  WARN 32808 --- [http-nio-8080-exec-6] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'first_picture' at row 1
### The error may exist in file [E:\PersonBlog\target\classes\mapper\BlogMapper.xml]
### The error may involve com.personblog.dao.BlogMapper.saveBlog-Inline
### The error occurred while setting parameters
### SQL: insert into t_blog (title, content, first_picture, flag,         views, comment_count, appreciation, share_statement, commentabled, published,         recommend, create_time, update_time, type_id, user_id, description, tag_ids)         values (?,?,?,?,?,?,?,         ?,?,?,?,?,         ?,?,?,?,?)
### Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'first_picture' at row 1
; Data truncation: Data too long for column 'first_picture' at row 1; nested exception is com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'first_picture' at row 1]
2021-02-02 22:50:03.010 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 22:50:03.010 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 26(Long)
2021-02-02 22:50:03.011 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 22:50:03.012 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 22:50:03.012 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 19(Long)
2021-02-02 22:50:03.013 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 22:50:03.014 DEBUG 32808 --- [http-nio-8080-exec-4] com.personblog.dao.BlogMapper.saveBlog   : ==>  Preparing: insert into t_blog (title, content, first_picture, flag, views, comment_count, appreciation, share_statement, commentabled, published, recommend, create_time, update_time, type_id, user_id, description, tag_ids) values (?,?,?,?,?,?,?, ?,?,?,?,?, ?,?,?,?,?)
2021-02-02 22:50:03.015 DEBUG 32808 --- [http-nio-8080-exec-4] com.personblog.dao.BlogMapper.saveBlog   : ==> Parameters: 牛客网-在线编程-sql实战76道-----1-10(String), [**牛客sql实战第1题**](https://www.nowcoder.com/practice/218ae58dfdcd4af195fff264e062138f?tpId=82&&tqId=29753&rp=1&ru=/ta/sql&qru=/ta/sql/question-ranking)

查找最晚入职员工的所有信息，为了减轻入门难度，目前所有的数据里员工入职的日期都不是同一天
```sql
CREATE TABLE `employees` (
`emp_no` int(11) NOT NULL,  -- '员工编号'
`birth_date` date NOT NULL,
`first_name` varchar(14) NOT NULL,
`last_name` varchar(16) NOT NULL,
`gender` char(1) NOT NULL,
`hire_date` date NOT NULL,
PRIMARY KEY (`emp_no`));
```
要找最晚入职的员工，这里有两种方式，第一种直接用 **max函数**，第二种**order by desc + limit**
由于题目说了入职日期不是同一天，所以我们这里两种都能用。如果有员工入职日期在同一天的话，自然 limit 就不能用了

```sql
select * from employees
where hire_date = (select max(hire_date) from employees)
```
```sql
SELECT * FROM employees ORDER BY hire_date DESC LIMIT 1;
```
这里再复习一波 max 和 limit

max 是分组函数其中之一，分组函数自动忽略NULL。分组函数不可直接使用在where子句当中，因为group by是在where执行之后才会执行的

limit 是mysql特有的，其他数据库中没有，不通用
limit 是sql语句最后执行的一个环节

limit startIndex, length
startIndex 表示起始位置，从0开始，0表示第一条数据。startIndex 如果为0可省略不写
length 表示取几个

[**牛客sql实战第2题**](https://www.nowcoder.com/practice/ec1ca44c62c14ceb990c3c40def1ec6c?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

查找入职员工时间排名倒数第三的员工所有信息，为了减轻入门难度，目前所有的数据里员工入职的日期都不是同一天
```sql
CREATE TABLE `employees` (
`emp_no` int(11) NOT NULL,
`birth_date` date NOT NULL,
`first_name` varchar(14) NOT NULL,
`last_name` varchar(16) NOT NULL,
`gender` char(1) NOT NULL,
`hire_date` date NOT NULL,
PRIMARY KEY (`emp_no`));
```
排名倒数第三，自然想到用 order by + limit 
同理，如果有同一天入职的员工则还要加一个 distinct 去重
```sql
select * from employees
order by hire_date desc limit 2,1
```
```sql
select * from employees
where hire_date = 
(select distinct hire_date from employees order by hire_date desc limit 2,1);
```

[**牛客sql实战第3题**](https://www.nowcoder.com/practice/c63c5b54d86e4c6d880e4834bfd70c3b?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

查找各个部门当前(dept_manager.to_date='9999-01-01')领导当前(salaries.to_date='9999-01-01')薪水详情以及其对应部门编号dept_no
(注:输出结果以salaries.emp_no升序排序，并且请注意输出结果里面dept_no列是最后一列)
```sql
CREATE TABLE `salaries` (
`emp_no` int(11) NOT NULL, -- '员工编号',
`salary` int(11) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`from_date`));
CREATE TABLE `dept_manager` (
`dept_no` char(4) NOT NULL, -- '部门编号'
`emp_no` int(11) NOT NULL, --  '员工编号'
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`dept_no`));
```
要查每个部门的领导的薪水，直接 join ，把当前条件带上
```sql
select s.*, d.dept_no from salaries s
join dept_manager d
on s.emp_no = d.emp_no
where s.to_date = '9999-01-01' and d.to_date='9999-01-01'
order by emp_no asc;
```
[**牛客sql实战第4题**](https://www.nowcoder.com/practice/6d35b1cd593545ab985a68cd86f28671?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

查找所有已经分配部门的员工的last_name和first_name以及dept_no(请注意输出描述里各个列的前后顺序)
```sql
CREATE TABLE `dept_emp` (
`emp_no` int(11) NOT NULL,
`dept_no` char(4) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`dept_no`));
CREATE TABLE `employees` (
`emp_no` int(11) NOT NULL,
`birth_date` date NOT NULL,
`first_name` varchar(14) NOT NULL,
`last_name` varchar(16) NOT NULL,
`gender` char(1) NOT NULL,
`hire_date` date NOT NULL,
PRIMARY KEY (`emp_no`));
```
**join**
```sql
select e.last_name, e.first_name, d.dept_no from employees e
join dept_emp d
on e.emp_no = d.emp_no
```
**left join** 注意要用 dept_emp 做主表
```sql
SELECT e.last_name,e.first_name,d.dept_no
FROM dept_emp d LEFT JOIN employees e ON d.emp_no = e.emp_no 
```
在讨论区看到有使用 **using** 函数的，记录一下(两表字段关联的条件可以用函数简化)
```sql
SELECT e.last_name,e.first_name,d.dept_no
FROM dept_emp d LEFT JOIN employees e USING(emp_no)
```
[**牛客sql实战第5题**](https://www.nowcoder.com/practice/dbfafafb2ee2482aa390645abd4463bf?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

查找所有员工的last_name和first_name以及对应部门编号dept_no，也包括暂时没有分配具体部门的员工(请注意输出描述里各个列的前后顺序)

```sql
CREATE TABLE `dept_emp` (
`emp_no` int(11) NOT NULL,
`dept_no` char(4) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`dept_no`));
CREATE TABLE `employees` (
`emp_no` int(11) NOT NULL,
`birth_date` date NOT NULL,
`first_name` varchar(14) NOT NULL,
`last_name` varchar(16) NOT NULL,
`gender` char(1) NOT NULL,
`hire_date` date NOT NULL,
PRIMARY KEY (`emp_no`));
```
包括没有分配部门的，所以 **employees** 做主表

```sql
select e.last_name, e.first_name, d.dept_no from employees e
left join dept_emp d
on e.emp_no = d.emp_no
```

[**牛客sql实战第6题**](https://www.nowcoder.com/practice/23142e7a23e4480781a3b978b5e0f33a?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

查找所有员工入职时候的薪水情况，给出emp_no以及salary， 并按照emp_no进行逆序(请注意，一个员工可能有多次涨薪的情况)
```sql
CREATE TABLE `employees` (
`emp_no` int(11) NOT NULL,
`birth_date` date NOT NULL,
`first_name` varchar(14) NOT NULL,
`last_name` varchar(16) NOT NULL,
`gender` char(1) NOT NULL,
`hire_date` date NOT NULL,
PRIMARY KEY (`emp_no`));
CREATE TABLE `salaries` (
`emp_no` int(11) NOT NULL,
`salary` int(11) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`from_date`));
```
```sql
select e.emp_no, s.salary from employees e
join salaries s on e.emp_no = s.emp_no and e.hire_date = s.from_date
order by emp_no desc
```
评论区还有一种并列查询 and
```sql
SELECT e.emp_no, s.salary FROM employees AS e, salaries AS s
WHERE e.emp_no = s.emp_no AND e.hire_date = s.from_date
ORDER BY e.emp_no DESC
```

内连接是按照on后面的条件来构建临时表，而From表则使用的是**广义笛卡尔积**。
如果两张表的数据量很大的话，那么广义笛卡尔积的结果记录数为M(第一张表的记录数)xN(第二张表的记录数),
前者是**根据条件过滤构建临时表**，后者是**先构建临时表**然后再使用where过滤,所以当数据量大的时候广义笛卡尔积肯定性能更差些

[**牛客sql实战第7题**](https://www.nowcoder.com/practice/6d4a4cff1d58495182f536c548fee1ae?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

查找薪水变动超过15次的员工号emp_no以及其对应的变动次数t
```sql
CREATE TABLE `salaries` (
`emp_no` int(11) NOT NULL,
`salary` int(11) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`from_date`));
```
变动次数，说明薪水变动一次，就有一条emp_no记录
```sql
select emp_no, count(emp_no) t from salaries
group by emp_no having t > 15
```
[**牛客sql实战第8题**](https://www.nowcoder.com/practice/ae51e6d057c94f6d891735a48d1c2397?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

找出所有员工当前(to_date='9999-01-01')具体的薪水salary情况，对于相同的薪水只显示一次,并按照逆序显示
```sql
CREATE TABLE `salaries` (
`emp_no` int(11) NOT NULL,
`salary` int(11) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`from_date`));
```
根据字面意思直接写即可
```sql
select distinct salary from salaries where to_date = '9999-01-01' 
order by salary desc;
```
摘自讨论区：

大表一般用distinct效率不高，大数据量的时候都禁止用distinct，建议用group by解决重复问题。
```sql
select salary from salaries where to_date='9999-01-01' 
group by salary order by salary desc
```
WHERE语句在GROUP BY语句之前，SQL会在分组之前计算WHERE语句。   
HAVING语句在GROUP BY语句之后，SQL会在分组之后计算HAVING语句。

[**牛客sql实战第9题**](https://www.nowcoder.com/practice/4c8b4a10ca5b44189e411107e1d8bec1?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

获取所有部门当前(dept_manager.to_date='9999-01-01')manager的当前(salaries.to_date='9999-01-01')薪水情况，给出dept_no, emp_no以及salary，输出结果按照dept_no升序排列(请注意，同一个人可能有多条薪水情况记录)
```sql
CREATE TABLE `dept_manager` (
`dept_no` char(4) NOT NULL,
`emp_no` int(11) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`dept_no`));
CREATE TABLE `salaries` (
`emp_no` int(11) NOT NULL,
`salary` int(11) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`from_date`));
```
直接 join 或者 where 都可以
```sql
select d.dept_no, d.emp_no, s.salary from dept_manager d
join salaries s on d.emp_no = s.emp_no
and d.to_date='9999-01-01' 
and.to_date='9999-01-01'
order by dept_no
```
[**牛客sql实战第10题**](https://www.nowcoder.com/practice/32c53d06443346f4a2f2ca733c19660c?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

获取所有非manager的员工emp_no
```sql
CREATE TABLE `dept_manager` (
`dept_no` char(4) NOT NULL,
`emp_no` int(11) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`dept_no`));
CREATE TABLE `employees` (
`emp_no` int(11) NOT NULL,
`birth_date` date NOT NULL,
`first_name` varchar(14) NOT NULL,
`last_name` varchar(16) NOT NULL,
`gender` char(1) NOT NULL,
`hire_date` date NOT NULL,
PRIMARY KEY (`emp_no`));
```
方法一：先用一个left join 把employees表的记录全部查出来，再用 where把 dept_no 为空的都过滤掉就是非manager的员工
```sql
select e.emp_no from employees e
left join dept_manager d
on e.emp_no = d.emp_no
where d.dept_no is null
```
方法二：not in
```sql
SELECT emp_no FROM employees
WHERE emp_no NOT IN (SELECT emp_no FROM dept_manager)
```(String), /images/bg1.jpg(String), (String), 0(Integer), 0(Integer), false(Boolean), true(Boolean), true(Boolean), true(Boolean), false(Boolean), 2021-02-02 22:50:03.013(Timestamp), 2021-02-02 22:50:03.013(Timestamp), 26(Long), 0(Long), 牛客sql实战第1题，查找最晚入职员工的所有信息(String), 19(String)
2021-02-02 22:50:03.018 DEBUG 32808 --- [http-nio-8080-exec-4] com.personblog.dao.BlogMapper.saveBlog   : <==    Updates: 1
2021-02-02 22:50:03.019 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.saveBlog!selectKey    : ==>  Preparing: SELECT LAST_INSERT_ID()
2021-02-02 22:50:03.020 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.saveBlog!selectKey    : ==> Parameters: 
2021-02-02 22:50:03.021 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.saveBlog!selectKey    : <==      Total: 1
2021-02-02 22:50:03.022 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 22:50:03.022 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 19(Long), 40(Long)
2021-02-02 22:50:03.024 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 22:50:03.032 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 22:50:03.032 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 22:50:03.033 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 22:50:03.034 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 22:50:03.034 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 22:50:03.038 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 2
2021-02-02 22:50:03.040 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 22:50:03.041 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 22:50:03.042 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllType         : <==      Total: 2
2021-02-02 22:50:06.637  INFO 32808 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 22:50:06.640 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 22:50:06.640 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 22:50:06.643 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 22:50:06.644 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.create_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 22:50:06.644 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 22:50:06.649 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 2
2021-02-02 22:50:06.650 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 22:50:06.650 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 22:50:06.650 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 22:50:06.652 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 22:50:06.653 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 22:50:06.655 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 2
2021-02-02 22:50:06.658 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 22:50:06.658 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 22:50:06.659 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 22:50:06.659  INFO 32808 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 22:50:42.759 DEBUG 32808 --- [http-nio-8080-exec-4] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 22:50:42.760 DEBUG 32808 --- [http-nio-8080-exec-4] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 22:50:42.761 DEBUG 32808 --- [http-nio-8080-exec-4] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 4
2021-02-02 22:50:42.762 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 22:50:42.762 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 22:50:42.763 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllType         : <==      Total: 2
2021-02-02 22:52:45.727 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 22:52:45.727 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 26(Long)
2021-02-02 22:52:45.728 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 22:52:45.729 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 22:52:45.729 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 19(Long)
2021-02-02 22:52:45.730 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 22:52:45.732 DEBUG 32808 --- [http-nio-8080-exec-4] com.personblog.dao.BlogMapper.saveBlog   : ==>  Preparing: insert into t_blog (title, content, first_picture, flag, views, comment_count, appreciation, share_statement, commentabled, published, recommend, create_time, update_time, type_id, user_id, description, tag_ids) values (?,?,?,?,?,?,?, ?,?,?,?,?, ?,?,?,?,?)
2021-02-02 22:52:45.734 DEBUG 32808 --- [http-nio-8080-exec-4] com.personblog.dao.BlogMapper.saveBlog   : ==> Parameters: 牛客网-在线编程-sql实战76道-----11-20(String), [**牛客sql实战第11题**](https://www.nowcoder.com/practice/e50d92b8673a440ebdf3a517b5b37d62?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

获取所有员工当前的(dept_manager.to_date='9999-01-01')manager，如果员工是manager的话不显示(也就是如果当前的manager是自己的话结果不显示)。输出结果第一列给出当前员工的emp_no,第二列给出其manager对应的emp_no。
```sql
CREATE TABLE `dept_emp` (
`emp_no` int(11) NOT NULL, -- '所有的员工编号'
`dept_no` char(4) NOT NULL, -- '部门编号'
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`dept_no`));
CREATE TABLE `dept_manager` (
`dept_no` char(4) NOT NULL, -- '部门编号'
`emp_no` int(11) NOT NULL, -- '经理编号'
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`dept_no`));
```
这道题没啥说得，直接 join ,然后把该带的条件带上
```sql
select e.emp_no, m.emp_no manager_no from dept_emp e
join dept_manager m
on e.dept_no = m.dept_no
where e.emp_no <> m.emp_no 
and e.to_date='9999-01-01' and m.to_date='9999-01-01';
```
[**牛客sql实战第12题**](https://www.nowcoder.com/practice/4a052e3e1df5435880d4353eb18a91c6?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

获取所有部门中当前(dept_emp.to_date = '9999-01-01')员工当前(salaries.to_date='9999-01-01')薪水最高的相关信息，给出dept_no, emp_no以及其对应的salary，按照部门编号升序排列。
```sql
CREATE TABLE `dept_emp` (
`emp_no` int(11) NOT NULL,
`dept_no` char(4) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`dept_no`));
CREATE TABLE `salaries` (
`emp_no` int(11) NOT NULL,
`salary` int(11) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`from_date`));
```
这道题就是求每个部门的员工的最高薪水，此题讨论最多的就是最大薪水和emp_no对应的问题，以及 group by 前面的select 中只能出现 **分组字段和聚合函数** ，关联子查询
```sql
select e.dept_no, s.emp_no, s.salary from dept_emp e
join salaries s 
on e.emp_no=s.emp_no
and e.to_date='9999-01-01' and s.to_date='9999-01-01'
where s.salary = 
(select max(ss.salary) from dept_emp ee
join salaries ss 
on ee.emp_no=ss.emp_no
and ee.to_date='9999-01-01' and ss.to_date='9999-01-01'
where e.dept_no = ee.dept_no) order by e.dept_no
```
如果这题不需要给出emp_no(即只求所有部门中当前员工薪水最高值)，则用INNER JOIN和GROUP BY和MAX即可解决：
```sql
SELECT d.dept_no, MAX(s.salary)
FROM dept_emp as d
INNER JOIN salaries as s
ON d.emp_no=s.emp_no
AND d.to_date='9999-01-01'
AND s.to_date='9999-01-01'
GROUP BY d.dept_no;
```
[**牛客sql实战第13题**](https://www.nowcoder.com/practice/72ca694734294dc78f513e147da7821e?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

从titles表获取按照title进行分组，每组个数大于等于2，给出title以及对应的数目t。
```sql
CREATE TABLE IF NOT EXISTS "titles" (
`emp_no` int(11) NOT NULL,
`title` varchar(50) NOT NULL,
`from_date` date NOT NULL,
`to_date` date DEFAULT NULL);
```
这道题没什么说的，直接写
```sql
select title, count(title) t from titles group by title having t >= 2;
```
[**牛客sql实战第14题**](https://www.nowcoder.com/practice/c59b452f420c47f48d9c86d69efdff20?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

从titles表获取按照title进行分组，每组个数大于等于2，给出title以及对应的数目t。
注意对于重复的emp_no进行忽略(即emp_no重复的title不计算，title对应的数目t不增加)。
```sql
CREATE TABLE IF NOT EXISTS `titles` (
`emp_no` int(11) NOT NULL,
`title` varchar(50) NOT NULL,
`from_date` date NOT NULL,
`to_date` date DEFAULT NULL);
```
上一道题的变种，去重即可
```sql
select title, count(distinct emp_no) t from titles group by title having t>=2
```
[**牛客sql实战第15题**](https://www.nowcoder.com/practice/a32669eb1d1740e785f105fa22741d5c?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

查找employees表所有emp_no为奇数，且last_name不为Mary(注意大小写)的员工信息，并按照hire_date逆序排列
```sql
CREATE TABLE `employees` (
`emp_no` int(11) NOT NULL,
`birth_date` date NOT NULL,
`first_name` varchar(14) NOT NULL,
`last_name` varchar(16) NOT NULL,
`gender` char(1) NOT NULL,
`hire_date` date NOT NULL,
PRIMARY KEY (`emp_no`));
```
主要是奇数的表达方式：取余（oracle中不通用），mod函数，位运算
还有一个是关于不等号：<> 和 !=（oracle中不通用）
```sql
select * from employees where emp_no % 2 = 1 and last_name <> 'Mary' order by hire_date desc
```
```sql
select * from employees where emp_no & 1 = 1 and last_name <> 'Mary' order by hire_date desc
```
```sql
select * from employees where mod(emp_no,2) = 1 and last_name <> 'Mary' order by hire_date desc
```
[**牛客sql实战第16题**](https://www.nowcoder.com/practice/c8652e9e5a354b879e2a244200f1eaae?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

统计出当前(titles.to_date='9999-01-01')各个title类型对应的员工当前(salaries.to_date='9999-01-01')薪水对应的平均工资。结果给出title以及平均工资avg。
```sql
CREATE TABLE `salaries` (
`emp_no` int(11) NOT NULL,
`salary` int(11) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`from_date`));
CREATE TABLE IF NOT EXISTS "titles" (
`emp_no` int(11) NOT NULL,
`title` varchar(50) NOT NULL,
`from_date` date NOT NULL,
`to_date` date DEFAULT NULL);
```
要求每个 title 的平均工资，avg + group by 
```sql
select t.title, avg(s.salary) avg from salaries s
join titles t on s.emp_no = t.emp_no 
and t.to_date = '9999-01-01'
and s.to_date = '9999-01-01' 
group by title
```
[**牛客sql实战第17题**](https://www.nowcoder.com/practice/8d2c290cc4e24403b98ca82ce45d04db?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

获取当前（to_date='9999-01-01'）薪水第二多的员工的emp_no以及其对应的薪水salary
```sql
CREATE TABLE `salaries` (
`emp_no` int(11) NOT NULL,
`salary` int(11) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`from_date`));
```
倒序 + limit
```sql
select emp_no, salary 
from salaries 
where to_date='9999-01-01'
order by salary desc limit 1,1
```
以上写法没有考虑工资相同的情况, 先用group by去重得到第二大薪资，再查即可
```sql
select emp_no, salary
from salaries
where salary = (
    select salary from salaries 
    group by salary
    order by salary desc limit 1,1
) 
and to_date = '9999-01-01'
```
或者用 distinct
```sql
select emp_no, salary from salaries
where to_date = '9999-01-01' 
and salary = 
(select distinct salary from salaries order by salary desc limit 1,1)
```
[**牛客sql实战第18题**](https://www.nowcoder.com/practice/c1472daba75d4635b7f8540b837cc719?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

查找当前薪水(to_date='9999-01-01')排名第二多的员工编号emp_no、薪水salary、last_name以及first_name，你可以不使用order by完成吗
```sql
CREATE TABLE `employees` (
`emp_no` int(11) NOT NULL,
`birth_date` date NOT NULL,
`first_name` varchar(14) NOT NULL,
`last_name` varchar(16) NOT NULL,
`gender` char(1) NOT NULL,
`hire_date` date NOT NULL,
PRIMARY KEY (`emp_no`));
CREATE TABLE `salaries` (
`emp_no` int(11) NOT NULL,
`salary` int(11) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`from_date`));
```
把第二大薪资查出来，再 join ，由于不能用 order by , 所以改为 max，具体看 sql语句
```sql
select e.emp_no,s.salary,e.last_name,e.first_name
from employees e join salaries s 
on e.emp_no=s.emp_no 
and s.to_date='9999-01-01'
and s.salary = 
    (select max(salary) from salaries 
     where salary < (select max(salary) from salaries where to_date='9999-01-01')
    and to_date='9999-01-01')
```

[**牛客sql实战第19题**](https://www.nowcoder.com/practice/5a7975fabe1146329cee4f670c27ad55?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

查找所有员工的last_name和first_name以及对应的dept_name，也包括暂时没有分配部门的员工
```sql
CREATE TABLE `departments` (
`dept_no` char(4) NOT NULL,
`dept_name` varchar(40) NOT NULL,
PRIMARY KEY (`dept_no`));
CREATE TABLE `dept_emp` (
`emp_no` int(11) NOT NULL,
`dept_no` char(4) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`dept_no`));
CREATE TABLE `employees` (
`emp_no` int(11) NOT NULL,
`birth_date` date NOT NULL,
`first_name` varchar(14) NOT NULL,
`last_name` varchar(16) NOT NULL,
`gender` char(1) NOT NULL,
`hire_date` date NOT NULL,
PRIMARY KEY (`emp_no`));
```
left join 直接查
```sql
select e.last_name, e.first_name,d.dept_name from employees e
left join dept_emp de on e.emp_no = de.emp_no
left join departments d on de.dept_no = d.dept_no
```
[**牛客sql实战第20题**](https://www.nowcoder.com/practice/c727647886004942a89848e2b5130dc2?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

查找员工编号emp_no为10001其自入职以来的薪水salary涨幅(总共涨了多少)growth(可能有多次涨薪，没有降薪)
```sql
CREATE TABLE `salaries` (
`emp_no` int(11) NOT NULL,
`salary` int(11) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`from_date`));
```
入职以来最大减去最小即可
```sql
select (
(select salary from salaries where emp_no=10001 order by from_date desc limit 1)-
(select salary  from salaries  where emp_no=10001 order by from_date limit 1)
) as growth;
```
或者,只针对没有降薪的情况
```sql
SELECT (MAX(salary)-MIN(salary)) AS growth 
FROM salaries WHERE emp_no = '10001'
```(String), /images/bg2.jpg(String), 原创(String), 0(Integer), 0(Integer), false(Boolean), true(Boolean), true(Boolean), true(Boolean), false(Boolean), 2021-02-02 22:52:45.732(Timestamp), 2021-02-02 22:52:45.732(Timestamp), 26(Long), 0(Long), 牛客sql实战第11题，获取所有员工当前的(dept_manager.to_date=’9999-01-01’)manager，(String), 19(String)
2021-02-02 22:52:45.736 DEBUG 32808 --- [http-nio-8080-exec-4] com.personblog.dao.BlogMapper.saveBlog   : <==    Updates: 1
2021-02-02 22:52:45.736 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.saveBlog!selectKey    : ==>  Preparing: SELECT LAST_INSERT_ID()
2021-02-02 22:52:45.736 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.saveBlog!selectKey    : ==> Parameters: 
2021-02-02 22:52:45.737 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.saveBlog!selectKey    : <==      Total: 1
2021-02-02 22:52:45.738 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 22:52:45.738 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 19(Long), 41(Long)
2021-02-02 22:52:45.739 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 22:52:45.750 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 22:52:45.750 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 22:52:45.752 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 22:52:45.753 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 22:52:45.753 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 22:52:45.754 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 3
2021-02-02 22:52:45.755 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 22:52:45.756 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 22:52:45.756 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : <==      Total: 2
2021-02-02 22:52:51.094  INFO 32808 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 22:52:51.095 DEBUG 32808 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 22:52:51.096 DEBUG 32808 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 22:52:51.099 DEBUG 32808 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 22:52:51.099 DEBUG 32808 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.create_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 22:52:51.100 DEBUG 32808 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 22:52:51.102 DEBUG 32808 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 3
2021-02-02 22:52:51.105 DEBUG 32808 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 22:52:51.105 DEBUG 32808 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 22:52:51.107 DEBUG 32808 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 22:52:51.108 DEBUG 32808 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 22:52:51.108 DEBUG 32808 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 22:52:51.109 DEBUG 32808 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 3
2021-02-02 22:52:51.110 DEBUG 32808 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 22:52:51.110 DEBUG 32808 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 22:52:51.111 DEBUG 32808 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 22:52:51.111  INFO 32808 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 22:53:17.221  INFO 32808 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/41', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[41, {}]}
2021-02-02 22:53:17.222 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.create_time, b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 22:53:17.223 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 41(Long)
2021-02-02 22:53:17.226 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 22:53:17.241 DEBUG 32808 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 22:53:17.241 DEBUG 32808 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 41(Long)
2021-02-02 22:53:17.242 DEBUG 32808 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 22:53:17.243 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 22:53:17.243 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 41(Long), 41(Long), 41(Long)
2021-02-02 22:53:17.244 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 22:53:17.254 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 22:53:17.254 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 41(Long), -1(Long)
2021-02-02 22:53:17.254 DEBUG 32808 --- [http-nio-8080-exec-6] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 22:53:17.255  INFO 32808 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 22:53:18.065  INFO 32808 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/41', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[41, {}]}
2021-02-02 22:53:18.066 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 22:53:18.066 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 41(Long), -1(Long)
2021-02-02 22:53:18.067 DEBUG 32808 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 22:53:18.068  INFO 32808 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 22:53:36.050  INFO 32808 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/40', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[40, {}]}
2021-02-02 22:53:36.052 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.create_time, b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 22:53:36.052 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 40(Long)
2021-02-02 22:53:36.054 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 22:53:36.061 DEBUG 32808 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 22:53:36.062 DEBUG 32808 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 40(Long)
2021-02-02 22:53:36.063 DEBUG 32808 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 22:53:36.064 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 22:53:36.064 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 40(Long), 40(Long), 40(Long)
2021-02-02 22:53:36.067 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 22:53:36.071 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 22:53:36.072 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 40(Long), -1(Long)
2021-02-02 22:53:36.074 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 22:53:36.076  INFO 32808 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 22:53:36.853  INFO 32808 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/40', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[40, {}]}
2021-02-02 22:53:36.853 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 22:53:36.854 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 40(Long), -1(Long)
2021-02-02 22:53:36.854 DEBUG 32808 --- [http-nio-8080-exec-5] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 22:53:36.855  INFO 32808 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 22:53:43.711 DEBUG 32808 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getBlogById  : ==>  Preparing: select b.id, b.published,b.flag,b.title,b.content,b.type_id, b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement, b.appreciation,b.commentabled from t_blog b where b.id = ?
2021-02-02 22:53:43.711 DEBUG 32808 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getBlogById  : ==> Parameters: 40(Long)
2021-02-02 22:53:43.713 DEBUG 32808 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getBlogById  : <==      Total: 1
2021-02-02 22:53:43.715 DEBUG 32808 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 22:53:43.715 DEBUG 32808 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 22:53:43.715 DEBUG 32808 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : <==      Total: 2
2021-02-02 22:53:43.716 DEBUG 32808 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 22:53:43.717 DEBUG 32808 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 22:53:43.717 DEBUG 32808 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 4
2021-02-02 22:53:47.783  WARN 32808 --- [http-nio-8080-exec-1] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2021-02-02 22:53:47.785 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 22:53:47.785 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 26(Long)
2021-02-02 22:53:47.786 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 22:53:47.788 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 22:53:47.789 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 19(Long)
2021-02-02 22:53:47.791 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 22:53:47.793 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.deleteBlogAndTag      : ==>  Preparing: delete from t_blog_tag where blog_id = ?
2021-02-02 22:53:47.793 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.deleteBlogAndTag      : ==> Parameters: 40(Long)
2021-02-02 22:53:47.794 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.deleteBlogAndTag      : <==    Updates: 1
2021-02-02 22:53:47.794 DEBUG 32808 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.updateBlog   : ==>  Preparing: update t_blog set published = ?,flag = ? , title = ?, content = ?, type_id = ?, tag_ids = ?, first_picture = ? , description = ? , recommend = ? , share_statement = ?, appreciation = ?, commentabled = ? ,update_time = ? where id = ?
2021-02-02 22:53:47.796 DEBUG 32808 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.updateBlog   : ==> Parameters: true(Boolean), 原创(String), 牛客网-在线编程-sql实战76道-----1-10(String), [**牛客sql实战第1题**](https://www.nowcoder.com/practice/218ae58dfdcd4af195fff264e062138f?tpId=82&&tqId=29753&rp=1&ru=/ta/sql&qru=/ta/sql/question-ranking)

查找最晚入职员工的所有信息，为了减轻入门难度，目前所有的数据里员工入职的日期都不是同一天
```sql
CREATE TABLE `employees` (
`emp_no` int(11) NOT NULL,  -- '员工编号'
`birth_date` date NOT NULL,
`first_name` varchar(14) NOT NULL,
`last_name` varchar(16) NOT NULL,
`gender` char(1) NOT NULL,
`hire_date` date NOT NULL,
PRIMARY KEY (`emp_no`));
```
要找最晚入职的员工，这里有两种方式，第一种直接用 **max函数**，第二种**order by desc + limit**
由于题目说了入职日期不是同一天，所以我们这里两种都能用。如果有员工入职日期在同一天的话，自然 limit 就不能用了

```sql
select * from employees
where hire_date = (select max(hire_date) from employees)
```
```sql
SELECT * FROM employees ORDER BY hire_date DESC LIMIT 1;
```
这里再复习一波 max 和 limit

max 是分组函数其中之一，分组函数自动忽略NULL。分组函数不可直接使用在where子句当中，因为group by是在where执行之后才会执行的

limit 是mysql特有的，其他数据库中没有，不通用
limit 是sql语句最后执行的一个环节

limit startIndex, length
startIndex 表示起始位置，从0开始，0表示第一条数据。startIndex 如果为0可省略不写
length 表示取几个

[**牛客sql实战第2题**](https://www.nowcoder.com/practice/ec1ca44c62c14ceb990c3c40def1ec6c?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

查找入职员工时间排名倒数第三的员工所有信息，为了减轻入门难度，目前所有的数据里员工入职的日期都不是同一天
```sql
CREATE TABLE `employees` (
`emp_no` int(11) NOT NULL,
`birth_date` date NOT NULL,
`first_name` varchar(14) NOT NULL,
`last_name` varchar(16) NOT NULL,
`gender` char(1) NOT NULL,
`hire_date` date NOT NULL,
PRIMARY KEY (`emp_no`));
```
排名倒数第三，自然想到用 order by + limit 
同理，如果有同一天入职的员工则还要加一个 distinct 去重
```sql
select * from employees
order by hire_date desc limit 2,1
```
```sql
select * from employees
where hire_date = 
(select distinct hire_date from employees order by hire_date desc limit 2,1);
```

[**牛客sql实战第3题**](https://www.nowcoder.com/practice/c63c5b54d86e4c6d880e4834bfd70c3b?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

查找各个部门当前(dept_manager.to_date='9999-01-01')领导当前(salaries.to_date='9999-01-01')薪水详情以及其对应部门编号dept_no
(注:输出结果以salaries.emp_no升序排序，并且请注意输出结果里面dept_no列是最后一列)
```sql
CREATE TABLE `salaries` (
`emp_no` int(11) NOT NULL, -- '员工编号',
`salary` int(11) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`from_date`));
CREATE TABLE `dept_manager` (
`dept_no` char(4) NOT NULL, -- '部门编号'
`emp_no` int(11) NOT NULL, --  '员工编号'
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`dept_no`));
```
要查每个部门的领导的薪水，直接 join ，把当前条件带上
```sql
select s.*, d.dept_no from salaries s
join dept_manager d
on s.emp_no = d.emp_no
where s.to_date = '9999-01-01' and d.to_date='9999-01-01'
order by emp_no asc;
```
[**牛客sql实战第4题**](https://www.nowcoder.com/practice/6d35b1cd593545ab985a68cd86f28671?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

查找所有已经分配部门的员工的last_name和first_name以及dept_no(请注意输出描述里各个列的前后顺序)
```sql
CREATE TABLE `dept_emp` (
`emp_no` int(11) NOT NULL,
`dept_no` char(4) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`dept_no`));
CREATE TABLE `employees` (
`emp_no` int(11) NOT NULL,
`birth_date` date NOT NULL,
`first_name` varchar(14) NOT NULL,
`last_name` varchar(16) NOT NULL,
`gender` char(1) NOT NULL,
`hire_date` date NOT NULL,
PRIMARY KEY (`emp_no`));
```
**join**
```sql
select e.last_name, e.first_name, d.dept_no from employees e
join dept_emp d
on e.emp_no = d.emp_no
```
**left join** 注意要用 dept_emp 做主表
```sql
SELECT e.last_name,e.first_name,d.dept_no
FROM dept_emp d LEFT JOIN employees e ON d.emp_no = e.emp_no 
```
在讨论区看到有使用 **using** 函数的，记录一下(两表字段关联的条件可以用函数简化)
```sql
SELECT e.last_name,e.first_name,d.dept_no
FROM dept_emp d LEFT JOIN employees e USING(emp_no)
```
[**牛客sql实战第5题**](https://www.nowcoder.com/practice/dbfafafb2ee2482aa390645abd4463bf?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

查找所有员工的last_name和first_name以及对应部门编号dept_no，也包括暂时没有分配具体部门的员工(请注意输出描述里各个列的前后顺序)

```sql
CREATE TABLE `dept_emp` (
`emp_no` int(11) NOT NULL,
`dept_no` char(4) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`dept_no`));
CREATE TABLE `employees` (
`emp_no` int(11) NOT NULL,
`birth_date` date NOT NULL,
`first_name` varchar(14) NOT NULL,
`last_name` varchar(16) NOT NULL,
`gender` char(1) NOT NULL,
`hire_date` date NOT NULL,
PRIMARY KEY (`emp_no`));
```
包括没有分配部门的，所以 **employees** 做主表

```sql
select e.last_name, e.first_name, d.dept_no from employees e
left join dept_emp d
on e.emp_no = d.emp_no
```

[**牛客sql实战第6题**](https://www.nowcoder.com/practice/23142e7a23e4480781a3b978b5e0f33a?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

查找所有员工入职时候的薪水情况，给出emp_no以及salary， 并按照emp_no进行逆序(请注意，一个员工可能有多次涨薪的情况)
```sql
CREATE TABLE `employees` (
`emp_no` int(11) NOT NULL,
`birth_date` date NOT NULL,
`first_name` varchar(14) NOT NULL,
`last_name` varchar(16) NOT NULL,
`gender` char(1) NOT NULL,
`hire_date` date NOT NULL,
PRIMARY KEY (`emp_no`));
CREATE TABLE `salaries` (
`emp_no` int(11) NOT NULL,
`salary` int(11) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`from_date`));
```
```sql
select e.emp_no, s.salary from employees e
join salaries s on e.emp_no = s.emp_no and e.hire_date = s.from_date
order by emp_no desc
```
评论区还有一种并列查询 and
```sql
SELECT e.emp_no, s.salary FROM employees AS e, salaries AS s
WHERE e.emp_no = s.emp_no AND e.hire_date = s.from_date
ORDER BY e.emp_no DESC
```

内连接是按照on后面的条件来构建临时表，而From表则使用的是**广义笛卡尔积**。
如果两张表的数据量很大的话，那么广义笛卡尔积的结果记录数为M(第一张表的记录数)xN(第二张表的记录数),
前者是**根据条件过滤构建临时表**，后者是**先构建临时表**然后再使用where过滤,所以当数据量大的时候广义笛卡尔积肯定性能更差些

[**牛客sql实战第7题**](https://www.nowcoder.com/practice/6d4a4cff1d58495182f536c548fee1ae?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

查找薪水变动超过15次的员工号emp_no以及其对应的变动次数t
```sql
CREATE TABLE `salaries` (
`emp_no` int(11) NOT NULL,
`salary` int(11) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`from_date`));
```
变动次数，说明薪水变动一次，就有一条emp_no记录
```sql
select emp_no, count(emp_no) t from salaries
group by emp_no having t > 15
```
[**牛客sql实战第8题**](https://www.nowcoder.com/practice/ae51e6d057c94f6d891735a48d1c2397?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

找出所有员工当前(to_date='9999-01-01')具体的薪水salary情况，对于相同的薪水只显示一次,并按照逆序显示
```sql
CREATE TABLE `salaries` (
`emp_no` int(11) NOT NULL,
`salary` int(11) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`from_date`));
```
根据字面意思直接写即可
```sql
select distinct salary from salaries where to_date = '9999-01-01' 
order by salary desc;
```
摘自讨论区：

大表一般用distinct效率不高，大数据量的时候都禁止用distinct，建议用group by解决重复问题。
```sql
select salary from salaries where to_date='9999-01-01' 
group by salary order by salary desc
```
WHERE语句在GROUP BY语句之前，SQL会在分组之前计算WHERE语句。   
HAVING语句在GROUP BY语句之后，SQL会在分组之后计算HAVING语句。

[**牛客sql实战第9题**](https://www.nowcoder.com/practice/4c8b4a10ca5b44189e411107e1d8bec1?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

获取所有部门当前(dept_manager.to_date='9999-01-01')manager的当前(salaries.to_date='9999-01-01')薪水情况，给出dept_no, emp_no以及salary，输出结果按照dept_no升序排列(请注意，同一个人可能有多条薪水情况记录)
```sql
CREATE TABLE `dept_manager` (
`dept_no` char(4) NOT NULL,
`emp_no` int(11) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`dept_no`));
CREATE TABLE `salaries` (
`emp_no` int(11) NOT NULL,
`salary` int(11) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`from_date`));
```
直接 join 或者 where 都可以
```sql
select d.dept_no, d.emp_no, s.salary from dept_manager d
join salaries s on d.emp_no = s.emp_no
and d.to_date='9999-01-01' 
and.to_date='9999-01-01'
order by dept_no
```
[**牛客sql实战第10题**](https://www.nowcoder.com/practice/32c53d06443346f4a2f2ca733c19660c?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1)

获取所有非manager的员工emp_no
```sql
CREATE TABLE `dept_manager` (
`dept_no` char(4) NOT NULL,
`emp_no` int(11) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`dept_no`));
CREATE TABLE `employees` (
`emp_no` int(11) NOT NULL,
`birth_date` date NOT NULL,
`first_name` varchar(14) NOT NULL,
`last_name` varchar(16) NOT NULL,
`gender` char(1) NOT NULL,
`hire_date` date NOT NULL,
PRIMARY KEY (`emp_no`));
```
方法一：先用一个left join 把employees表的记录全部查出来，再用 where把 dept_no 为空的都过滤掉就是非manager的员工
```sql
select e.emp_no from employees e
left join dept_manager d
on e.emp_no = d.emp_no
where d.dept_no is null
```
方法二：not in
```sql
SELECT emp_no FROM employees
WHERE emp_no NOT IN (SELECT emp_no FROM dept_manager)
```(String), 26(Long), 19(String), /images/bg1.jpg(String), 牛客sql实战第1题，查找最晚入职员工的所有信息(String), false(Boolean), true(Boolean), false(Boolean), true(Boolean), 2021-02-02 22:53:47.792(Timestamp), 40(Long)
2021-02-02 22:53:47.797 DEBUG 32808 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.updateBlog   : <==    Updates: 1
2021-02-02 22:53:47.797 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 22:53:47.798 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 19(Long), 40(Long)
2021-02-02 22:53:47.798 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 22:53:47.805 DEBUG 32808 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 22:53:47.805 DEBUG 32808 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 22:53:47.805 DEBUG 32808 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 22:53:47.808 DEBUG 32808 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 22:53:47.809 DEBUG 32808 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 22:53:47.811 DEBUG 32808 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 3
2021-02-02 22:53:47.812 DEBUG 32808 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 22:53:47.813 DEBUG 32808 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 22:53:47.813 DEBUG 32808 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllType         : <==      Total: 2
2021-02-02 22:53:52.019  INFO 32808 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/40', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[40, {}]}
2021-02-02 22:53:52.020 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.create_time, b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 22:53:52.020 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 40(Long)
2021-02-02 22:53:52.021 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 22:53:52.028 DEBUG 32808 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 22:53:52.029 DEBUG 32808 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 40(Long)
2021-02-02 22:53:52.029 DEBUG 32808 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 22:53:52.030 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 22:53:52.030 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 40(Long), 40(Long), 40(Long)
2021-02-02 22:53:52.030 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 22:53:52.033 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 22:53:52.033 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 40(Long), -1(Long)
2021-02-02 22:53:52.033 DEBUG 32808 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 22:53:52.034  INFO 32808 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 22:53:52.707  INFO 32808 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/40', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[40, {}]}
2021-02-02 22:53:52.707 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 22:53:52.708 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 40(Long), -1(Long)
2021-02-02 22:53:52.708 DEBUG 32808 --- [http-nio-8080-exec-4] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 22:53:52.709  INFO 32808 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 22:54:28.715 DEBUG 32808 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 22:54:28.715 DEBUG 32808 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 22:54:28.716 DEBUG 32808 --- [http-nio-8080-exec-1] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 4
2021-02-02 22:54:28.718 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 22:54:28.718 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 22:54:28.720 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : <==      Total: 2
2021-02-02 22:55:57.317 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 22:55:57.317 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 26(Long)
2021-02-02 22:55:57.318 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 22:55:57.319 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 22:55:57.319 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 19(Long)
2021-02-02 22:55:57.320 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 22:55:57.321 DEBUG 32808 --- [http-nio-8080-exec-1] com.personblog.dao.BlogMapper.saveBlog   : ==>  Preparing: insert into t_blog (title, content, first_picture, flag, views, comment_count, appreciation, share_statement, commentabled, published, recommend, create_time, update_time, type_id, user_id, description, tag_ids) values (?,?,?,?,?,?,?, ?,?,?,?,?, ?,?,?,?,?)
2021-02-02 22:55:57.324 DEBUG 32808 --- [http-nio-8080-exec-1] com.personblog.dao.BlogMapper.saveBlog   : ==> Parameters: 牛客网-在线编程-sql实战76道-----32-52(String), 
```
牛客目前没有看到第31题，后面部分标号的题目也没有。今天的题目都是偏基础，包括一些函数的使用等等。
```

[**牛客sql实战第32题**](https://www.nowcoder.com/practice/6744b90bbdde40209f8ecaac0b0516fe?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1) 

将employees表的所有员工的last_name和first_name拼接起来作为Name，中间以一个空格区分
(注：sqllite,字符串拼接为 || 符号，不支持concat函数，mysql支持concat函数)
```sql
CREATE TABLE `employees` ( `emp_no` int(11) NOT NULL,
`birth_date` date NOT NULL,
`first_name` varchar(14) NOT NULL,
`last_name` varchar(16) NOT NULL,
`gender` char(1) NOT NULL,
`hire_date` date NOT NULL,
PRIMARY KEY (`emp_no`));
```
concat 函数的使用
```sql
select concat(concat(last_name," "),first_name)name from employees;
```
[**牛客sql实战第33题**](https://www.nowcoder.com/practice/ac233de508ef4849b0eeb4f38dcf09cf?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1) 

创建一个actor表，包含如下列信息(就是建表语句，这里就不列出来了)
```sql
create table  actor (
    actor_id smallint(5) not null primary key ,
    first_name varchar(45) not null ,
    last_name varchar(45) not null ,
    last_update date not null  
)
```
[**牛客sql实战第34题**](https://www.nowcoder.com/practice/51c12cea6a97468da149c04b7ecf362e?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1) 

题目已经先执行了如下语句:
```sql
drop table if exists actor;
CREATE TABLE actor (
   actor_id  smallint(5)  NOT NULL PRIMARY KEY,
   first_name  varchar(45) NOT NULL,
   last_name  varchar(45) NOT NULL,
   last_update  DATETIME NOT NULL)
```
请你对于表actor批量插入如下数据(不能有2条insert语句哦!)
```sql
insert into actor values
(1,'PENELOPE','GUINESS','2006-02-15 12:34:33'),
(2,"NICK","WAHLBERG","2006-02-15 12:34:33");
```
[**牛客sql实战第35题**](https://www.nowcoder.com/practice/153c8a8e7805400ba8e384e03acc6b3e?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1) 

题目已经先执行了如下语句:
```sql
drop table if exists actor;
CREATE TABLE actor (
   actor_id  smallint(5)  NOT NULL PRIMARY KEY,
   first_name  varchar(45) NOT NULL,
   last_name  varchar(45) NOT NULL,
   last_update  DATETIME NOT NULL);
);
insert into actor values ('3', 'WD', 'GUINESS', '2006-02-15 12:34:33');
```
对于表actor插入如下数据,如果数据已经存在，请忽略(不支持使用replace操作)
```sql
insert IGNORE into actor 
values(3,'ED','CHASE','2006-02-15 12:34:33');
```
如果不存在则插入，如果存在则忽略
**INSERT OR IGNORE** INTO tablename VALUES(...);

如果不存在则插入，如果存在则替换
**INSERT OR REPLACE** INTO tablename VALUES(...);

这里指的存在表示的是unique属性的列值存在的情况下，unique表示键值唯一

[**牛客sql实战第36题**](https://www.nowcoder.com/practice/881385f388cf4fe98b2ed9f8897846df?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1) 

对于如下表actor，其对应的数据为:	具体题目可以点击标题链接查看

先建表再插入
```sql
create table actor_name(
    first_name varchar(45) not null,
    last_name varchar(45) not null
);
insert into actor_name select first_name, last_name from actor;
```
[**牛客sql实战第37题**](https://www.nowcoder.com/practice/e1824daa0c49404aa602cf0cb34bdd75?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1) 

针对如下表actor结构创建索引：
(注:在 SQLite 中,除了重命名表和在已有的表中添加列,ALTER TABLE 命令不支持其他操作，
mysql支持ALTER TABLE创建索引)
```sql
CREATE TABLE actor  (
   actor_id  smallint(5)  NOT NULL PRIMARY KEY,
   first_name  varchar(45) NOT NULL,
   last_name  varchar(45) NOT NULL,
   last_update  datetime NOT NULL);
)
   ```
   对first_name创建**唯一索引**uniq_idx_firstname，对last_name创建**普通索引**idx_lastname

```sql
create unique index uniq_idx_firstname on actor(first_name);
create index idx_lastname on actor(last_name);
```
[**牛客sql实战第38题**](https://www.nowcoder.com/practice/b9db784b5e3d488cbd30bd78fdb2a862?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1) 

针对actor表创建视图actor_name_view，只包含first_name以及last_name两列，并对这两列重新命名，first_name为first_name_v，last_name修改为last_name_v：
```sql
CREATE TABLE  actor  (
   actor_id  smallint(5)  NOT NULL PRIMARY KEY,
   first_name  varchar(45) NOT NULL,
   last_name  varchar(45) NOT NULL,
   last_update datetime NOT NULL);
)
```
方法一：注意 CREATE VIEW ... AS ... 的 AS 是创建视图语法中的一部分，而后面的两个 AS 只是为字段创建别名
```sql
CREATE VIEW actor_name_view AS
SELECT first_name AS first_name_v, last_name AS last_name_v
FROM actor 
```
方法二：直接在视图名的后面用小括号创建视图中的字段名
```sql
CREATE VIEW actor_name_view (first_name_v, last_name_v) AS
SELECT first_name, last_name FROM actor 
```

[**牛客sql实战第39题**](https://www.nowcoder.com/practice/f9fa9dc1a1fc4130b08e26c22c7a1e5f?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1) 

针对salaries表emp_no字段创建索引idx_emp_no，查询emp_no为10005, 使用**强制索引**。

```sql
select * from salaries force index(idx_emp_no) where emp_no=10005;
```
[**牛客sql实战第40题**](https://www.nowcoder.com/practice/119f04716d284cb7a19fba65dd876b03?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1) 

存在actor表，包含如下列信息：...
现在在last_update后面**新增加一列**名字为create_date, 类型为datetime, NOT NULL，默认值为'2020-10-01 00:00:00'

```sql
alter table actor add create_date datetime not null default '2020-10-01 00:00:00'
```
[**牛客sql实战第41题**](https://www.nowcoder.com/practice/7e920bb2e1e74c4e83750f5c16033e2e?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1) 

构造一个**触发器**audit_log，在向employees_test表中插入一条数据的时候，触发插入相关的数据到audit中。
```sql
CREATE TABLE employees_test(
ID INT PRIMARY KEY NOT NULL,
NAME TEXT NOT NULL,
AGE INT NOT NULL,
ADDRESS CHAR(50),
SALARY REAL
);
CREATE TABLE audit(
EMP_no INT NOT NULL,
NAME TEXT NOT NULL
);
```
1. create trigger ：创建触发器
2. 触发器要说明是在after 还是before事务发生时触发
3. 要指明是insert 、delete、update操作
4. on 表名
5. begin和end之间写触发的动作
6. new 关键字表示更新后的表的字段 ，old表示更新前的表的字段 
```sql
create trigger audit_log after insert on employees_test 
begin 
insert into audit values(NEW.ID,NEW.NAME); 
end;
```
不加 **FOR EACH ROW** mysql 通不过
```sql
CREATE TRIGGER audit_log AFTER INSERT ON employees_test
FOR EACH ROW
BEGIN
INSERT INTO audit VALUES(NEW.ID,NEW.NAME);
END
```
[**牛客sql实战第42题**](https://www.nowcoder.com/practice/3d92551a6f6d4f1ebde272d20872cf05?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1) 

删除emp_no重复的记录，只保留最小的id对应的记录。
```sql
CREATE TABLE IF NOT EXISTS titles_test (
id int(11) not null primary key,
emp_no int(11) NOT NULL,
title varchar(50) NOT NULL,
from_date date NOT NULL,
to_date date DEFAULT NULL);
)
```
子查询
```sql
delete from titles_test
where id not in(
    select * from(
        select min(id) from titles_test group by emp_no
    ) as a
);
```
[**牛客sql实战第43题**](https://www.nowcoder.com/practice/859f28f43496404886a77600ea68ef59?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1) 

将所有to_date为9999-01-01的全部更新为NULL,且 from_date更新为2001-01-01。
```sql
CREATE TABLE IF NOT EXISTS titles_test (
id int(11) not null primary key,
emp_no int(11) NOT NULL,
title varchar(50) NOT NULL,
from_date date NOT NULL,
to_date date DEFAULT NULL);
);
```
```sql
update  titles_test  set to_date = null, from_date ='2001-01-01'
where to_date = '9999-01-01';
```
[**牛客sql实战第44题**](https://www.nowcoder.com/practice/2bec4d94f525458ca3d0ebf3bc8cd240?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1) 

将id=5以及emp_no=10001的行数据替换成id=5以及emp_no=10005,其他数据保持不变，使用`replace`实现，直接使用update会报错了。

```sql
replace into titles_test values(5,10005,'Senior Engineer','1986-06-26', '9999-01-01')
```
运用 `REPLACE(X,Y,Z)` 函数。其中X是要处理的字符串，Y是X中将要被替换的字符串，Z是用来替换Y的字符串，最终返回替换后的字符串
```sql
UPDATE titles_test SET emp_no = REPLACE(emp_no,10001,10005) WHERE id = 5
```
[**牛客sql实战第45题**](https://www.nowcoder.com/practice/5277d7f92aa746ab8aa42886e5d570d4?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1) 

将titles_test表名修改为titles_2017。
```sql
alter table titles_test rename to titles_2017
```
修改表名：`rename to`

[**牛客sql实战第46题**](https://www.nowcoder.com/practice/aeaa116185f24f209ca4fa40e226de48?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1) 

在audit表上创建外键约束，其emp_no对应employees_test表的主键id。
```sql
alter table audit add foreign key(emp_no) references employees_test(id)
```
[**牛客sql实战第48题**](https://www.nowcoder.com/practice/d3b058dcc94147e09352eb76f93b3274?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1) 

请你写出更新语句，将**所有获取奖金的员工**当前的(salaries.to_date='9999-01-01')**薪水增加10%**。(emp_bonus里面的emp_no都是当前获奖的所有员工)
```sql
create table emp_bonus(
emp_no int not null,
btype smallint not null
);
CREATE TABLE `salaries` (
`emp_no` int(11) NOT NULL,
`salary` int(11) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL, PRIMARY KEY (`emp_no`,`from_date`)
);
```
子查询
```sql
update salaries set salary=salary*1.1 where emp_no in (
	select emp_no from emp_bonus
) and to_date='9999-01-01'
```
[**牛客sql实战第50题**](https://www.nowcoder.com/practice/810bf4ee3ac64949b08983aa66ec7bee?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1) 

将employees表中的所有员工的last_name和first_name通过(')连接起来。(sqlite不支持concat，请用||实现，mysql支持concat)
```sql
select concat(concat(last_name,"'"),first_name) name from employees
```
```sql
SELECT last_name || "'" || first_name FROM employees
```
[**牛客sql实战第51题**](https://www.nowcoder.com/practice/e3870bd5d6744109a902db43c105bd50?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1) 

查找字符串'10,A,B' 中逗号','出现的次数cnt。
```sql
select length('10,A,B')-length(replace('10,A,B',",",""))
```
先用replace函数将原串中出现的**子串用空串替换**，再用原串长度减去替换后字符串的长度，最后除以子串的长度（本题中此步可省略，若子串长度大于1则不可省）。

但是取模之后通不过，小数点后面会多出几个零，不知道为啥。。
```sql
select length('10,A,B')-length(replace('10,A,B',',','' ))/length(',') as cnt
```

为什么要取模？来自讨论区

只是刚好问题统计的是逗号出现的次数，而逗号的长度是1，所以除和不除模是一样的；层主也说了，如果问的是两个逗号出现了几次，那就不一样了，一定得除以两个逗号的模2才是两个逗号出现的次数

[**牛客sql实战第52题**](https://www.nowcoder.com/practice/74d90728827e44e2864cce8b26882105?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1) 

获取Employees中的first_name，查询按照first_name最后两个字母，按照升序进行排列

```sql
select first_name from employees order by substr(first_name,length(first_name)-1,2)
```
`substr(字符串，起始位置，长度）`

**起始位置**:
截取的子串的起始位置（注意:字符串的第一个字符的索引是1)。
值为正时从字符串开始位置 开始计数，值为负时从字符串结尾位置开始计数。

**长度**: 截取子串的长度(String), /images/bg3.jpg(String), 原创(String), 0(Integer), 0(Integer), false(Boolean), true(Boolean), true(Boolean), true(Boolean), false(Boolean), 2021-02-02 22:55:57.321(Timestamp), 2021-02-02 22:55:57.321(Timestamp), 26(Long), 0(Long), 牛客sql实战第32题，将employees表的所有员工的last_name和first_name拼接...(String), 19(String)
2021-02-02 22:55:57.330 DEBUG 32808 --- [http-nio-8080-exec-1] com.personblog.dao.BlogMapper.saveBlog   : <==    Updates: 1
2021-02-02 22:55:57.331 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.saveBlog!selectKey    : ==>  Preparing: SELECT LAST_INSERT_ID()
2021-02-02 22:55:57.331 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.saveBlog!selectKey    : ==> Parameters: 
2021-02-02 22:55:57.331 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.saveBlog!selectKey    : <==      Total: 1
2021-02-02 22:55:57.332 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 22:55:57.332 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 19(Long), 42(Long)
2021-02-02 22:55:57.333 DEBUG 32808 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 22:55:57.345 DEBUG 32808 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 22:55:57.345 DEBUG 32808 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 22:55:57.346 DEBUG 32808 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 22:55:57.346 DEBUG 32808 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 22:55:57.346 DEBUG 32808 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 22:55:57.347 DEBUG 32808 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 4
2021-02-02 22:55:57.349 DEBUG 32808 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 22:55:57.349 DEBUG 32808 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 22:55:57.349 DEBUG 32808 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : <==      Total: 2
2021-02-02 22:56:01.502  INFO 32808 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 22:56:01.504 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 22:56:01.505 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 22:56:01.505 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 22:56:01.506 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.create_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.update_time desc LIMIT ?
2021-02-02 22:56:01.507 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 22:56:01.512 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 22:56:01.514 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 22:56:01.514 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 22:56:01.514 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 22:56:01.515 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 22:56:01.515 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 22:56:01.516 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 4
2021-02-02 22:56:01.516 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 22:56:01.516 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 22:56:01.516 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 22:56:01.517  INFO 32808 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 22:56:17.633  INFO 32808 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/42', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[42, {}]}
2021-02-02 22:56:17.635 DEBUG 32808 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.create_time, b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 22:56:17.635 DEBUG 32808 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 42(Long)
2021-02-02 22:56:17.637 DEBUG 32808 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 22:56:17.654 DEBUG 32808 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 22:56:17.654 DEBUG 32808 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 42(Long)
2021-02-02 22:56:17.655 DEBUG 32808 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 22:56:17.656 DEBUG 32808 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 22:56:17.656 DEBUG 32808 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 42(Long), 42(Long), 42(Long)
2021-02-02 22:56:17.657 DEBUG 32808 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 22:56:17.660 DEBUG 32808 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 22:56:17.660 DEBUG 32808 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 42(Long), -1(Long)
2021-02-02 22:56:17.661 DEBUG 32808 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 22:56:17.662  INFO 32808 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 22:56:18.410  INFO 32808 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/42', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[42, {}]}
2021-02-02 22:56:18.411 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 22:56:18.411 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 42(Long), -1(Long)
2021-02-02 22:56:18.412 DEBUG 32808 --- [http-nio-8080-exec-9] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 22:56:18.414  INFO 32808 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 22:57:41.448  INFO 29600 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 29600 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 22:57:41.451 DEBUG 29600 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 22:57:41.451  INFO 29600 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 22:57:41.519  INFO 29600 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 22:57:41.520  INFO 29600 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 22:57:42.851  INFO 29600 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 22:57:42.858  INFO 29600 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 22:57:42.859  INFO 29600 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 22:57:42.939  INFO 29600 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 22:57:42.939  INFO 29600 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1419 ms
2021-02-02 22:57:43.587  INFO 29600 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 22:57:43.669  INFO 29600 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 22:57:43.971  INFO 29600 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 22:57:44.014  INFO 29600 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 22:57:44.024  INFO 29600 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 3.451 seconds (JVM running for 4.682)
2021-02-02 22:57:46.567  INFO 29600 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 22:57:46.567  INFO 29600 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 22:57:46.582  INFO 29600 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 15 ms
2021-02-02 22:57:46.649  INFO 29600 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 22:57:46.683  INFO 29600 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 22:57:47.001  INFO 29600 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 22:57:47.090 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 22:57:47.113 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 22:57:47.135 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 22:57:47.138 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.create_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.create_time desc LIMIT ?
2021-02-02 22:57:47.139 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 22:57:47.149 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 22:57:47.153 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 22:57:47.153 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 22:57:47.154 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 22:57:47.158 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 22:57:47.160 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 22:57:47.165 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 4
2021-02-02 22:57:47.170 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 22:57:47.171 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 22:57:47.173 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 22:57:47.174  INFO 29600 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 22:58:32.872 DEBUG 29600 --- [http-nio-8080-exec-8] com.personblog.dao.UserMapper.login      : ==>  Preparing: select * from t_user where username = ? and password = ?;
2021-02-02 22:58:32.873 DEBUG 29600 --- [http-nio-8080-exec-8] com.personblog.dao.UserMapper.login      : ==> Parameters: tml(String), 202cb962ac59075b964b07152d234b70(String)
2021-02-02 22:58:32.875 DEBUG 29600 --- [http-nio-8080-exec-8] com.personblog.dao.UserMapper.login      : <==      Total: 1
2021-02-02 22:58:34.325 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 22:58:34.326 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 22:58:34.327 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 22:58:34.328 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 22:58:34.329 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 22:58:34.330 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 4
2021-02-02 22:58:34.332 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 22:58:34.332 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 22:58:34.333 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllType         : <==      Total: 2
2021-02-02 22:58:35.552 DEBUG 29600 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : ==>  Preparing: select id, name from t_tag
2021-02-02 22:58:35.553 DEBUG 29600 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : ==> Parameters: 
2021-02-02 22:58:35.554 DEBUG 29600 --- [http-nio-8080-exec-3] c.personblog.dao.TagMapper.selectAllTag  : <==      Total: 4
2021-02-02 22:58:35.556 DEBUG 29600 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 22:58:35.556 DEBUG 29600 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 22:58:35.565 DEBUG 29600 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllType         : <==      Total: 2
2021-02-02 22:59:27.244 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectTypeById        : ==>  Preparing: select id, name from t_type where id = ?
2021-02-02 22:59:27.245 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectTypeById        : ==> Parameters: 26(Long)
2021-02-02 22:59:27.249 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectTypeById        : <==      Total: 1
2021-02-02 22:59:27.251 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectTagById          : ==>  Preparing: select id, name from t_tag where id = ?
2021-02-02 22:59:27.251 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectTagById          : ==> Parameters: 19(Long)
2021-02-02 22:59:27.252 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectTagById          : <==      Total: 1
2021-02-02 22:59:27.253 DEBUG 29600 --- [http-nio-8080-exec-4] com.personblog.dao.BlogMapper.saveBlog   : ==>  Preparing: insert into t_blog (title, content, first_picture, flag, views, comment_count, appreciation, share_statement, commentabled, published, recommend, create_time, update_time, type_id, user_id, description, tag_ids) values (?,?,?,?,?,?,?, ?,?,?,?,?, ?,?,?,?,?)
2021-02-02 22:59:27.255 DEBUG 29600 --- [http-nio-8080-exec-4] com.personblog.dao.BlogMapper.saveBlog   : ==> Parameters: 牛客网-在线编程-sql实战76道-----53-62(String), [**牛客sql实战第53题**](https://www.nowcoder.com/practice/6e86365af15e49d8abe2c3d4b5126e87?tpId=82&&tqId=29821&rp=1&ru=/ta/sql&qru=/ta/sql/question-ranking) 

按照dept_no进行汇总，属于同一个部门的emp_no按照逗号进行连接，结果给出dept_no以及连接出的结果employees

```sql
SELECT dept_no, group_concat(emp_no) AS employees
FROM dept_emp GROUP BY dept_no
```
**group_concat()** 函数返回X的非null值的连接后的字符串。如果给出了参数Y，将会在每个X之间用Y作为分隔符。如果省略了Y，“，”将作为默认的分隔符。每个元素连接的顺序是随机的。

[**牛客sql实战第54题**](https://www.nowcoder.com/practice/95078e5e1fba4438b85d9f11240bc591?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1) 

查找排除最大、最小salary之后的当前(to_date = '9999-01-01' )员工的平均工资avg_salary。

主要是利用子查询查出最大和最小salary
```sql
select avg(salary) as avg_salary
from salaries
where salary not in (select max(salary) from salaries where to_date = '9999-01-01')
and salary not in (select min(salary) from salaries where to_date = '9999-01-01')
and to_date = '9999-01-01';
```

[**牛客sql实战第55题**](https://www.nowcoder.com/practice/f24966e0cb8a49c192b5e65339bc8c03?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1) 

分页查询employees表，每5行一页，返回第2页的数据

方法一：利用 LIMIT 和 OFFSET 关键字。LIMIT 后的数字代表返回几条记录，OFFSET 后的数字代表从第几条记录开始返回（第一条记录序号为0），也可理解为跳过多少条记录后开始返回。
```sql
SELECT * FROM employees LIMIT 5 OFFSET 5
```

方法二：只利用 LIMIT 关键字。注意：在 LIMIT X,Y 中，Y代表返回几条记录，X代表从第几条记录开始返回（第一条记录序号为0），切勿记反。
```sql
select * from employees limit 5,5
```

[**牛客sql实战第56题**](https://www.nowcoder.com/practice/e2dab5477fdd4ec0ba84031f8e817b8a?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1) 

获取所有员工的emp_no、部门编号dept_no以及对应的bonus类型btype和received，没有分配奖金的员工不显示对应的bonus类型btype和received

题意表述不清，根据通过答案，没有分配部门的员工不需要输出
```sql
select e.emp_no,d.dept_no,eb.btype,eb.received from employees e
join dept_emp d on e.emp_no=d.emp_no
left join emp_bonus eb on e.emp_no=eb.emp_no 
```

[**牛客sql实战第57题**](https://www.nowcoder.com/practice/c39cbfbd111a4d92b221acec1c7c1484?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1) 

使用含有关键字exists查找未分配具体部门的员工的所有信息。

```sql
select * from employees e where not exists
(select emp_no from dept_emp d where e.emp_no=d.emp_no)
```
```sql
select * from employees where emp_no not in
(select emp_no from dept_emp)
```
```sql
select e.* from employees e
left join dept_emp de on e.emp_no=de.emp_no
where de.emp_no is null;
```
主表为employees，从表为dept_emp，在主表和从表都对关联的列emp_no建立索引的前提下：
 - 当主表比从表大时，IN查询的效率较高；
- 当从表比主表大时，EXISTS查询的效率较高；
        
 原因如下：
 - in是先执行子查询，得到一个结果集，将结果集代入外层谓词条件执行主查询，子查询只需要执行一次
- exists是先从主查询中取得一条数据，再代入到子查询中，执行一次子查询，判断子查询是否能返回结果，主查询有多少条数据，子查询就要执行多少次

58题是没有的，59题先放一放

[**牛客sql实战第59题**](https://www.nowcoder.com/practice/5cdbf1dcbe8d4c689020b6b2743820bf?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1) 

[**牛客sql实战第60题**](https://www.nowcoder.com/practice/58824cd644ea47d7b2b670c506a159a6?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1) 

按照salary的累计和running_total，其中running_total为前N个当前( to_date = '9999-01-01')员工的salary累计和，其他以此类推。 具体结果如下Demo展示。。

```sql
SELECT emp_no,salary,
SUM(salary) OVER (ORDER BY emp_no) AS running_total
FROM salaries
WHERE to_date = '9999-01-01';
```
[点击跳转窗口函数详细用法](https://www.cnblogs.com/kuangwong/p/10540662.html)

```sql
SELECT s1.emp_no, s1.salary, 
(SELECT SUM(s2.salary) FROM salaries AS s2 
 WHERE s2.emp_no <= s1.emp_no AND s2.to_date = '9999-01-01') AS running_total 
FROM salaries AS s1 WHERE s1.to_date = '9999-01-01' ORDER BY s1.emp_no
```
**摘自大佬的分析：**

本题的思路为复用 salaries 表进行子查询，最后以 s1.emp_no 排序输出求和结果。

1、输出的第三个字段，是由一个 SELECT 子查询构成。将子查询内复用的 salaries 表记为 s2，主查询的 salaries 表记为 s1，当主查询的 s1.emp_no 确定时，对子查询中不大于 s1.emp_no 的 s2.emp_no 所对应的薪水求和

2、注意是对员工当前的薪水求和，所以在主查询和子查询内都要加限定条件 to_date = '9999-01-01'

[**牛客sql实战第61题**](https://www.nowcoder.com/practice/e3cf1171f6cc426bac85fd4ffa786594?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1) 

对于employees表中，输出first_name排名(按first_name升序排序)为奇数的first_name

题意：对于employees表，在对first_name进行排名后，选出奇数排名对应的first_name

```sql
select e1.first_name 
from employees e1
where (
	select count(*) from employees e2 where e1.first_name >= e2.first_name
)%2=1
```

SQL说明：

1.首先题目要求对first_name排序，所以子查询里有first_name的比较。

2.通过比较，
如果 e1.first_name 是第一位，那 e2.first_name 只有1个，就是 e1.first_name 本身，1%2=1；
如果 e1.first_name 排在第二位，就有它和比它小的2个 e2.first_name，2%2=0，所以不选，以此类推。

[**牛客sql实战第62题**](https://www.nowcoder.com/practice/c69ac94335744480aa50646864b7f24d?tpId=82&tags=&title=&diffculty=0&judgeStatus=0&rp=1) 

写一个sql查询，积分表里面出现三次以及三次以上的积分

```sql
select number from grade group by number having count(number) >= 3;
```(String), /images/bg4.jpg(String), 原创(String), 0(Integer), 0(Integer), false(Boolean), true(Boolean), true(Boolean), true(Boolean), false(Boolean), 2021-02-02 22:59:27.253(Timestamp), 2021-02-02 22:59:27.253(Timestamp), 26(Long), 0(Long), 牛客网-在线编程-sql实战76道-----53-62(String), 19(String)
2021-02-02 22:59:27.256 DEBUG 29600 --- [http-nio-8080-exec-4] com.personblog.dao.BlogMapper.saveBlog   : <==    Updates: 1
2021-02-02 22:59:27.257 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.saveBlog!selectKey    : ==>  Preparing: SELECT LAST_INSERT_ID()
2021-02-02 22:59:27.257 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.saveBlog!selectKey    : ==> Parameters: 
2021-02-02 22:59:27.258 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.saveBlog!selectKey    : <==      Total: 1
2021-02-02 22:59:27.259 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.saveBlogAndTag        : ==>  Preparing: insert into t_blog_tag (tag_id, blog_id) values (?,?)
2021-02-02 22:59:27.259 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.saveBlogAndTag        : ==> Parameters: 19(Long), 43(Long)
2021-02-02 22:59:27.260 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.saveBlogAndTag        : <==    Updates: 1
2021-02-02 22:59:27.278 DEBUG 29600 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==>  Preparing: SELECT count(0) FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id
2021-02-02 22:59:27.279 DEBUG 29600 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : ==> Parameters: 
2021-02-02 22:59:27.282 DEBUG 29600 --- [http-nio-8080-exec-2] c.p.d.BlogMapper.getAllBlogQuery_COUNT   : <==      Total: 1
2021-02-02 22:59:27.284 DEBUG 29600 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name FROM t_blog b LEFT JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2021-02-02 22:59:27.284 DEBUG 29600 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : ==> Parameters: 5(Integer)
2021-02-02 22:59:27.287 DEBUG 29600 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getAllBlogQuery       : <==      Total: 5
2021-02-02 22:59:27.289 DEBUG 29600 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==>  Preparing: select id, name from t_type
2021-02-02 22:59:27.289 DEBUG 29600 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : ==> Parameters: 
2021-02-02 22:59:27.290 DEBUG 29600 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllType         : <==      Total: 2
2021-02-02 22:59:32.005  INFO 29600 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 22:59:32.011 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 22:59:32.013 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 22:59:32.022 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 22:59:32.023 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.create_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.create_time desc LIMIT ?
2021-02-02 22:59:32.023 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 22:59:32.026 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 22:59:32.027 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 22:59:32.027 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 22:59:32.028 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 22:59:32.033 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 22:59:32.033 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 22:59:32.035 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 4
2021-02-02 22:59:32.036 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 22:59:32.037 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 22:59:32.037 DEBUG 29600 --- [http-nio-8080-exec-1] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 22:59:32.038  INFO 29600 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 22:59:35.935  INFO 29600 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/43', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[43, {}]}
2021-02-02 22:59:35.937 DEBUG 29600 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.create_time, b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 22:59:35.938 DEBUG 29600 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 43(Long)
2021-02-02 22:59:35.942 DEBUG 29600 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 22:59:35.981 DEBUG 29600 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 22:59:35.981 DEBUG 29600 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 43(Long)
2021-02-02 22:59:35.982 DEBUG 29600 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 22:59:35.983 DEBUG 29600 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 22:59:35.983 DEBUG 29600 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 43(Long), 43(Long), 43(Long)
2021-02-02 22:59:35.984 DEBUG 29600 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 22:59:35.989 DEBUG 29600 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 22:59:35.990 DEBUG 29600 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 43(Long), -1(Long)
2021-02-02 22:59:35.990 DEBUG 29600 --- [http-nio-8080-exec-8] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 22:59:35.991  INFO 29600 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 22:59:36.702  INFO 29600 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/43', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[43, {}]}
2021-02-02 22:59:36.706 DEBUG 29600 --- [http-nio-8080-exec-10] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 22:59:36.707 DEBUG 29600 --- [http-nio-8080-exec-10] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 43(Long), -1(Long)
2021-02-02 22:59:36.707 DEBUG 29600 --- [http-nio-8080-exec-10] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 22:59:36.709  INFO 29600 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 22:59:55.530  INFO 29600 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 2]}
2021-02-02 22:59:55.534 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 22:59:55.534 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 22:59:55.535 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 22:59:55.535 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.create_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.create_time desc LIMIT ?, ?
2021-02-02 22:59:55.536 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer), 4(Integer)
2021-02-02 22:59:55.537 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 22:59:55.538 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 22:59:55.539 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 22:59:55.539 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 22:59:55.540 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 22:59:55.540 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 22:59:55.541 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 4
2021-02-02 22:59:55.545 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 22:59:55.546 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 22:59:55.548 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 22:59:55.549  INFO 29600 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 23:00:02.501  INFO 29600 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 23:00:02.504 DEBUG 29600 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 23:00:02.504 DEBUG 29600 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 23:00:02.505 DEBUG 29600 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 23:00:02.505 DEBUG 29600 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.create_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.create_time desc LIMIT ?
2021-02-02 23:00:02.505 DEBUG 29600 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 23:00:02.507 DEBUG 29600 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 23:00:02.509 DEBUG 29600 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 23:00:02.510 DEBUG 29600 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 23:00:02.511 DEBUG 29600 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 23:00:02.513 DEBUG 29600 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 23:00:02.513 DEBUG 29600 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 23:00:02.515 DEBUG 29600 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 4
2021-02-02 23:00:02.517 DEBUG 29600 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 23:00:02.517 DEBUG 29600 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 23:00:02.517 DEBUG 29600 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 23:00:02.518  INFO 29600 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 23:00:04.205  INFO 29600 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/types/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TypeShowController.typeShow', args=[{}, -1, 1]}
2021-02-02 23:00:04.214 DEBUG 29600 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 23:00:04.215 DEBUG 29600 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 23:00:04.216 DEBUG 29600 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 4
2021-02-02 23:00:04.218 DEBUG 29600 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.getByTypeId  : ==>  Preparing: select b.id,b.title,b.flag,b.first_picture,b.published,b.views,b.update_time,b.description, t.id tid,t.name, b.comment_count, b.type_id, u.nickname, u.avatar from t_blog b join t_user u on b.user_id=u.id join t_type t on t.id=b.type_id and b.type_id = ? order by b.update_time desc
2021-02-02 23:00:04.218 DEBUG 29600 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.getByTypeId  : ==> Parameters: 26(Long)
2021-02-02 23:00:04.222 DEBUG 29600 --- [http-nio-8080-exec-10] c.personblog.dao.BlogMapper.getByTypeId  : <==      Total: 4
2021-02-02 23:00:04.223  INFO 29600 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Result : types
2021-02-02 23:00:13.111  INFO 29600 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/tags/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TagShowController.tag', args=[1, -1, {}]}
2021-02-02 23:00:13.117 DEBUG 29600 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 23:00:13.118 DEBUG 29600 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 23:00:13.129 DEBUG 29600 --- [http-nio-8080-exec-2] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 7
2021-02-02 23:00:13.133 DEBUG 29600 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getByTagId   : ==>  Preparing: select b.id,b.title,b.first_picture,b.flag,b.views,b.update_time,b.description, t.id,t.name, u.nickname, u.avatar, b.comment_count from t_blog b, t_type t,t_blog_tag tb ,t_user u,t_tag tt where b.type_id = t.id and u.id = b.user_id and tb.blog_id = b.id and tb.tag_id = tt.id and tb.tag_id = ? order by b.update_time desc
2021-02-02 23:00:13.133 DEBUG 29600 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getByTagId   : ==> Parameters: 19(Long)
2021-02-02 23:00:13.137 DEBUG 29600 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getByTagId   : <==      Total: 4
2021-02-02 23:00:13.138  INFO 29600 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Result : tags
2021-02-02 23:00:18.696  INFO 29600 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/tags/16', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TagShowController.tag', args=[1, 16, {}]}
2021-02-02 23:00:18.697 DEBUG 29600 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 23:00:18.697 DEBUG 29600 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 23:00:18.700 DEBUG 29600 --- [http-nio-8080-exec-6] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 7
2021-02-02 23:00:18.701 DEBUG 29600 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.getByTagId   : ==>  Preparing: select b.id,b.title,b.first_picture,b.flag,b.views,b.update_time,b.description, t.id,t.name, u.nickname, u.avatar, b.comment_count from t_blog b, t_type t,t_blog_tag tb ,t_user u,t_tag tt where b.type_id = t.id and u.id = b.user_id and tb.blog_id = b.id and tb.tag_id = tt.id and tb.tag_id = ? order by b.update_time desc
2021-02-02 23:00:18.702 DEBUG 29600 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.getByTagId   : ==> Parameters: 16(Long)
2021-02-02 23:00:18.703 DEBUG 29600 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.getByTagId   : <==      Total: 1
2021-02-02 23:00:18.704  INFO 29600 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : tags
2021-02-02 23:00:21.869  INFO 29600 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/tags/17', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TagShowController.tag', args=[1, 17, {}]}
2021-02-02 23:00:21.871 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 23:00:21.871 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 23:00:21.874 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 7
2021-02-02 23:00:21.877 DEBUG 29600 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.getByTagId   : ==>  Preparing: select b.id,b.title,b.first_picture,b.flag,b.views,b.update_time,b.description, t.id,t.name, u.nickname, u.avatar, b.comment_count from t_blog b, t_type t,t_blog_tag tb ,t_user u,t_tag tt where b.type_id = t.id and u.id = b.user_id and tb.blog_id = b.id and tb.tag_id = tt.id and tb.tag_id = ? order by b.update_time desc
2021-02-02 23:00:21.877 DEBUG 29600 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.getByTagId   : ==> Parameters: 17(Long)
2021-02-02 23:00:21.879 DEBUG 29600 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.getByTagId   : <==      Total: 1
2021-02-02 23:00:21.880  INFO 29600 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : tags
2021-02-02 23:00:23.584  INFO 29600 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/tags/18', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TagShowController.tag', args=[1, 18, {}]}
2021-02-02 23:00:23.585 DEBUG 29600 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 23:00:23.585 DEBUG 29600 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 23:00:23.586 DEBUG 29600 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 7
2021-02-02 23:00:23.587 DEBUG 29600 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.getByTagId   : ==>  Preparing: select b.id,b.title,b.first_picture,b.flag,b.views,b.update_time,b.description, t.id,t.name, u.nickname, u.avatar, b.comment_count from t_blog b, t_type t,t_blog_tag tb ,t_user u,t_tag tt where b.type_id = t.id and u.id = b.user_id and tb.blog_id = b.id and tb.tag_id = tt.id and tb.tag_id = ? order by b.update_time desc
2021-02-02 23:00:23.587 DEBUG 29600 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.getByTagId   : ==> Parameters: 18(Long)
2021-02-02 23:00:23.588 DEBUG 29600 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.getByTagId   : <==      Total: 1
2021-02-02 23:00:23.590  INFO 29600 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : tags
2021-02-02 23:00:25.675  INFO 29600 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/tags/19', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TagShowController.tag', args=[1, 19, {}]}
2021-02-02 23:00:25.677 DEBUG 29600 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 23:00:25.678 DEBUG 29600 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 23:00:25.681 DEBUG 29600 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 7
2021-02-02 23:00:25.683 DEBUG 29600 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.getByTagId   : ==>  Preparing: select b.id,b.title,b.first_picture,b.flag,b.views,b.update_time,b.description, t.id,t.name, u.nickname, u.avatar, b.comment_count from t_blog b, t_type t,t_blog_tag tb ,t_user u,t_tag tt where b.type_id = t.id and u.id = b.user_id and tb.blog_id = b.id and tb.tag_id = tt.id and tb.tag_id = ? order by b.update_time desc
2021-02-02 23:00:25.684 DEBUG 29600 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.getByTagId   : ==> Parameters: 19(Long)
2021-02-02 23:00:25.687 DEBUG 29600 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.getByTagId   : <==      Total: 4
2021-02-02 23:00:25.691  INFO 29600 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : tags
2021-02-02 23:00:26.914  INFO 29600 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/types/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TypeShowController.typeShow', args=[{}, -1, 1]}
2021-02-02 23:00:26.916 DEBUG 29600 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 23:00:26.917 DEBUG 29600 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 23:00:26.919 DEBUG 29600 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 4
2021-02-02 23:00:26.920 DEBUG 29600 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getByTypeId  : ==>  Preparing: select b.id,b.title,b.flag,b.first_picture,b.published,b.views,b.update_time,b.description, t.id tid,t.name, b.comment_count, b.type_id, u.nickname, u.avatar from t_blog b join t_user u on b.user_id=u.id join t_type t on t.id=b.type_id and b.type_id = ? order by b.update_time desc
2021-02-02 23:00:26.920 DEBUG 29600 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getByTypeId  : ==> Parameters: 26(Long)
2021-02-02 23:00:26.926 DEBUG 29600 --- [http-nio-8080-exec-3] c.personblog.dao.BlogMapper.getByTypeId  : <==      Total: 4
2021-02-02 23:00:26.926  INFO 29600 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : types
2021-02-02 23:00:34.270  INFO 29600 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 23:00:34.277 DEBUG 29600 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 23:00:34.277 DEBUG 29600 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 23:00:34.279 DEBUG 29600 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 23:00:34.280 DEBUG 29600 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.create_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.create_time desc LIMIT ?
2021-02-02 23:00:34.280 DEBUG 29600 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 23:00:34.283 DEBUG 29600 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 23:00:34.284 DEBUG 29600 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 23:00:34.285 DEBUG 29600 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 23:00:34.285 DEBUG 29600 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 23:00:34.286 DEBUG 29600 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 23:00:34.286 DEBUG 29600 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 23:00:34.290 DEBUG 29600 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 4
2021-02-02 23:00:34.292 DEBUG 29600 --- [http-nio-8080-exec-5] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 23:00:34.293 DEBUG 29600 --- [http-nio-8080-exec-5] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 23:00:34.295 DEBUG 29600 --- [http-nio-8080-exec-5] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 23:00:34.296  INFO 29600 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 23:00:37.957  INFO 29600 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/types/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TypeShowController.typeShow', args=[{}, -1, 1]}
2021-02-02 23:00:37.961 DEBUG 29600 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 23:00:37.963 DEBUG 29600 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 23:00:37.964 DEBUG 29600 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 4
2021-02-02 23:00:37.966 DEBUG 29600 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getByTypeId  : ==>  Preparing: select b.id,b.title,b.flag,b.first_picture,b.published,b.views,b.update_time,b.description, t.id tid,t.name, b.comment_count, b.type_id, u.nickname, u.avatar from t_blog b join t_user u on b.user_id=u.id join t_type t on t.id=b.type_id and b.type_id = ? order by b.update_time desc
2021-02-02 23:00:37.966 DEBUG 29600 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getByTypeId  : ==> Parameters: 26(Long)
2021-02-02 23:00:37.970 DEBUG 29600 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getByTypeId  : <==      Total: 4
2021-02-02 23:00:37.971  INFO 29600 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Result : types
2021-02-02 23:00:46.784  INFO 29600 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 2]}
2021-02-02 23:00:46.788 DEBUG 29600 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 23:00:46.788 DEBUG 29600 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 23:00:46.789 DEBUG 29600 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 23:00:46.790 DEBUG 29600 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.create_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.create_time desc LIMIT ?, ?
2021-02-02 23:00:46.790 DEBUG 29600 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer), 4(Integer)
2021-02-02 23:00:46.792 DEBUG 29600 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 23:00:46.794 DEBUG 29600 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 23:00:46.794 DEBUG 29600 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 23:00:46.795 DEBUG 29600 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 23:00:46.796 DEBUG 29600 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 23:00:46.796 DEBUG 29600 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 23:00:46.797 DEBUG 29600 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 4
2021-02-02 23:00:46.799 DEBUG 29600 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 23:00:46.799 DEBUG 29600 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 23:00:46.799 DEBUG 29600 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 23:00:46.800  INFO 29600 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 23:00:50.562  INFO 29600 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/message', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.message', args=[]}
2021-02-02 23:00:50.564  INFO 29600 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : message
2021-02-02 23:00:50.964  INFO 29600 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/messagecomment', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.messages', args=[{}]}
2021-02-02 23:00:50.971 DEBUG 29600 --- [http-nio-8080-exec-9] c.p.d.MessageMapper.findByParentIdNull   : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 23:00:50.973 DEBUG 29600 --- [http-nio-8080-exec-9] c.p.d.MessageMapper.findByParentIdNull   : ==> Parameters: -1(Long)
2021-02-02 23:00:50.977 DEBUG 29600 --- [http-nio-8080-exec-9] c.p.d.MessageMapper.findByParentIdNull   : <==      Total: 1
2021-02-02 23:00:50.978 DEBUG 29600 --- [http-nio-8080-exec-9] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 23:00:50.978 DEBUG 29600 --- [http-nio-8080-exec-9] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 121(Long)
2021-02-02 23:00:50.979 DEBUG 29600 --- [http-nio-8080-exec-9] c.p.d.M.findByParentIdNotNull            : <==      Total: 0
2021-02-02 23:00:50.980  INFO 29600 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : message::messageList
2021-02-02 23:00:53.253  INFO 29600 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/archives', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.ArchiveShowController.archive', args=[{count=Count(id=null, count=null, createTime=null), org.springframework.validation.BindingResult.count=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, Count(id=null, count=null, createTime=null)]}
2021-02-02 23:00:53.258 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.findGroupYear         : ==>  Preparing: select date_format(b.create_time,'%Y') year from t_blog b group by year order by year desc
2021-02-02 23:00:53.259 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.findGroupYear         : ==> Parameters: 
2021-02-02 23:00:53.271 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.findGroupYear         : <==      Total: 1
2021-02-02 23:00:53.273 DEBUG 29600 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.findByYear   : ==>  Preparing: select b.id bid, b.title, b.create_time, b.flag,t.name from t_blog b, t_type t where date_format(b.create_time,'%Y')=? and b.type_id=t.id order by b.create_time desc
2021-02-02 23:00:53.274 DEBUG 29600 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.findByYear   : ==> Parameters: 2021(String)
2021-02-02 23:00:53.275 DEBUG 29600 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.findByYear   : <==      Total: 5
2021-02-02 23:00:53.277 DEBUG 29600 --- [http-nio-8080-exec-4] com.personblog.dao.BlogMapper.count      : ==>  Preparing: select count(*) from t_blog
2021-02-02 23:00:53.277 DEBUG 29600 --- [http-nio-8080-exec-4] com.personblog.dao.BlogMapper.count      : ==> Parameters: 
2021-02-02 23:00:53.277 DEBUG 29600 --- [http-nio-8080-exec-4] com.personblog.dao.BlogMapper.count      : <==      Total: 1
2021-02-02 23:00:53.279 DEBUG 29600 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.deleteCount  : ==>  Preparing: delete from t_count
2021-02-02 23:00:53.279 DEBUG 29600 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.deleteCount  : ==> Parameters: 
2021-02-02 23:00:53.282 DEBUG 29600 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.deleteCount  : <==    Updates: 1
2021-02-02 23:00:53.283 DEBUG 29600 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.insertCount  : ==>  Preparing: insert into t_count(count,create_time) (select count(*) count, create_time from t_blog GROUP BY year(create_time),month(create_time) order by create_time desc)
2021-02-02 23:00:53.283 DEBUG 29600 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.insertCount  : ==> Parameters: 
2021-02-02 23:00:53.285 DEBUG 29600 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.insertCount  : <==    Updates: 1
2021-02-02 23:00:53.287 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.findGroupYear2        : ==>  Preparing: select date_format(t_count.create_time,'%Y年%m月') year1 from t_count GROUP BY year1 order by year1 desc
2021-02-02 23:00:53.288 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.findGroupYear2        : ==> Parameters: 
2021-02-02 23:00:53.289 DEBUG 29600 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.findGroupYear2        : <==      Total: 1
2021-02-02 23:00:53.291 DEBUG 29600 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.findByYear2  : ==>  Preparing: select c.id,c.count,c.create_time from t_count c where date_format(c.create_time,'%Y年%m月')=? order by c.create_time desc
2021-02-02 23:00:53.291 DEBUG 29600 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.findByYear2  : ==> Parameters: 2021年02月(String)
2021-02-02 23:00:53.292 DEBUG 29600 --- [http-nio-8080-exec-4] c.personblog.dao.BlogMapper.findByYear2  : <==      Total: 1
2021-02-02 23:00:53.295  INFO 29600 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : archives
2021-02-02 23:00:57.241  INFO 29600 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/blog/39', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.blog', args=[39, {}]}
2021-02-02 23:00:57.242 DEBUG 29600 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getDetailedBlog       : ==>  Preparing: select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views, b.comment_count,b.update_time,b.create_time, b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar, t.name from t_blog b, t_user u, t_type t where b.user_id = u.id and b.type_id = t.id and published = true and b.id = ?
2021-02-02 23:00:57.243 DEBUG 29600 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getDetailedBlog       : ==> Parameters: 39(Long)
2021-02-02 23:00:57.244 DEBUG 29600 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getDetailedBlog       : <==      Total: 1
2021-02-02 23:00:57.253 DEBUG 29600 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.updateViews  : ==>  Preparing: update t_blog b set b.views = b.views + 1 where b.id = ?
2021-02-02 23:00:57.254 DEBUG 29600 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.updateViews  : ==> Parameters: 39(Long)
2021-02-02 23:00:57.256 DEBUG 29600 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.updateViews  : <==    Updates: 1
2021-02-02 23:00:57.256 DEBUG 29600 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getCommentCountById   : ==>  Preparing: update t_blog b set b.comment_count = ( select count(*) from t_comment c where c.blog_id = ? and b.id = ? ) WHERE b.id = ?
2021-02-02 23:00:57.256 DEBUG 29600 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getCommentCountById   : ==> Parameters: 39(Long), 39(Long), 39(Long)
2021-02-02 23:00:57.257 DEBUG 29600 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.getCommentCountById   : <==    Updates: 1
2021-02-02 23:00:57.259 DEBUG 29600 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 23:00:57.260 DEBUG 29600 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 39(Long), -1(Long)
2021-02-02 23:00:57.261 DEBUG 29600 --- [http-nio-8080-exec-2] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 23:00:57.261  INFO 29600 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Result : blog
2021-02-02 23:00:57.764  INFO 29600 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/comments/39', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.CommentController.comments', args=[39, {}]}
2021-02-02 23:00:57.765 DEBUG 29600 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : ==>  Preparing: select * from t_comment c where c.blog_id = ? and c.parent_comment_id = ? order by c.create_time desc
2021-02-02 23:00:57.765 DEBUG 29600 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : ==> Parameters: 39(Long), -1(Long)
2021-02-02 23:00:57.766 DEBUG 29600 --- [http-nio-8080-exec-7] c.p.d.C.findByBlogIdParentIdNull         : <==      Total: 0
2021-02-02 23:00:57.766  INFO 29600 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : blog :: commentList
2021-02-02 23:01:03.783  INFO 29600 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 23:01:03.789 DEBUG 29600 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 23:01:03.790 DEBUG 29600 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 23:01:03.790 DEBUG 29600 --- [http-nio-8080-exec-6] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 23:01:03.791 DEBUG 29600 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.create_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.create_time desc LIMIT ?
2021-02-02 23:01:03.791 DEBUG 29600 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 23:01:03.793 DEBUG 29600 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 23:01:03.794 DEBUG 29600 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 23:01:03.794 DEBUG 29600 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 23:01:03.795 DEBUG 29600 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 23:01:03.796 DEBUG 29600 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 23:01:03.796 DEBUG 29600 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 23:01:03.797 DEBUG 29600 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 4
2021-02-02 23:01:03.798 DEBUG 29600 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 23:01:03.798 DEBUG 29600 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 23:01:03.799 DEBUG 29600 --- [http-nio-8080-exec-6] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 23:01:03.799  INFO 29600 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 23:01:05.725  INFO 29600 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/types/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TypeShowController.typeShow', args=[{}, -1, 1]}
2021-02-02 23:01:05.726 DEBUG 29600 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 23:01:05.726 DEBUG 29600 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 23:01:05.728 DEBUG 29600 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 4
2021-02-02 23:01:05.729 DEBUG 29600 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.getByTypeId  : ==>  Preparing: select b.id,b.title,b.flag,b.first_picture,b.published,b.views,b.update_time,b.description, t.id tid,t.name, b.comment_count, b.type_id, u.nickname, u.avatar from t_blog b join t_user u on b.user_id=u.id join t_type t on t.id=b.type_id and b.type_id = ? order by b.update_time desc
2021-02-02 23:01:05.730 DEBUG 29600 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.getByTypeId  : ==> Parameters: 26(Long)
2021-02-02 23:01:05.732 DEBUG 29600 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.getByTypeId  : <==      Total: 4
2021-02-02 23:01:05.735  INFO 29600 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : types
2021-02-02 23:01:14.477  INFO 29600 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/types/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TypeShowController.typeShow', args=[{}, -1, 1]}
2021-02-02 23:01:14.479 DEBUG 29600 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc limit 4
2021-02-02 23:01:14.479 DEBUG 29600 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 23:01:14.481 DEBUG 29600 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 4
2021-02-02 23:01:14.486 DEBUG 29600 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getByTypeId  : ==>  Preparing: select b.id,b.title,b.flag,b.first_picture,b.published,b.views,b.update_time,b.description, t.id tid,t.name, b.comment_count, b.type_id, u.nickname, u.avatar from t_blog b join t_user u on b.user_id=u.id join t_type t on t.id=b.type_id and b.type_id = ? order by b.update_time desc
2021-02-02 23:01:14.487 DEBUG 29600 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getByTypeId  : ==> Parameters: 26(Long)
2021-02-02 23:01:14.492 DEBUG 29600 --- [http-nio-8080-exec-2] c.personblog.dao.BlogMapper.getByTypeId  : <==      Total: 4
2021-02-02 23:01:14.493  INFO 29600 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Result : types
2021-02-02 23:04:19.773  INFO 26480 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 26480 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 23:04:19.779 DEBUG 26480 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 23:04:19.779  INFO 26480 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 23:04:19.834  INFO 26480 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-02-02 23:04:19.835  INFO 26480 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-02-02 23:04:21.025  INFO 26480 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 23:04:21.032  INFO 26480 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 23:04:21.033  INFO 26480 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 23:04:21.128  INFO 26480 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 23:04:21.129  INFO 26480 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1294 ms
2021-02-02 23:04:21.773  INFO 26480 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 23:04:21.849  INFO 26480 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 23:04:22.172  INFO 26480 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 23:04:22.215  INFO 26480 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 23:04:22.225  INFO 26480 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 3.075 seconds (JVM running for 4.405)
2021-02-02 23:04:27.538  INFO 26480 --- [Thread-182] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-02-02 23:04:27.936  INFO 26480 --- [restartedMain] com.personblog.PersonBlogApplication     : Starting PersonBlogApplication on DESKTOP-G613JOF with PID 26480 (E:\PersonBlog\target\classes started by 汤老 in E:\PersonBlog)
2021-02-02 23:04:27.937 DEBUG 26480 --- [restartedMain] com.personblog.PersonBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2021-02-02 23:04:27.937  INFO 26480 --- [restartedMain] com.personblog.PersonBlogApplication     : The following profiles are active: dev
2021-02-02 23:04:28.744  INFO 26480 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-02-02 23:04:28.748  INFO 26480 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-02-02 23:04:28.748  INFO 26480 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2021-02-02 23:04:28.792  INFO 26480 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-02-02 23:04:28.793  INFO 26480 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 853 ms
2021-02-02 23:04:29.376  INFO 26480 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-02-02 23:04:29.438  INFO 26480 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-02-02 23:04:29.737  INFO 26480 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-02-02 23:04:29.752  INFO 26480 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-02-02 23:04:29.755  INFO 26480 --- [restartedMain] com.personblog.PersonBlogApplication     : Started PersonBlogApplication in 1.943 seconds (JVM running for 11.935)
2021-02-02 23:04:29.757  INFO 26480 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2021-02-02 23:04:29.932  INFO 26480 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-02-02 23:04:29.932  INFO 26480 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-02-02 23:04:29.950  INFO 26480 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 18 ms
2021-02-02 23:04:29.992  INFO 26480 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/types/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TypeShowController.typeShow', args=[{}, -1, 1]}
2021-02-02 23:04:30.004  INFO 26480 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-02-02 23:04:30.185  INFO 26480 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-02-02 23:04:30.216 DEBUG 26480 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 23:04:30.232 DEBUG 26480 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 23:04:30.250 DEBUG 26480 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 5
2021-02-02 23:04:30.265 DEBUG 26480 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getByTypeId  : ==>  Preparing: select b.id,b.title,b.flag,b.first_picture,b.published,b.views,b.update_time,b.description, t.id tid,t.name, b.comment_count, b.type_id, u.nickname, u.avatar from t_blog b join t_user u on b.user_id=u.id join t_type t on t.id=b.type_id and b.type_id = ? order by b.create_time desc
2021-02-02 23:04:30.266 DEBUG 26480 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getByTypeId  : ==> Parameters: 26(Long)
2021-02-02 23:04:30.272 DEBUG 26480 --- [http-nio-8080-exec-1] c.personblog.dao.BlogMapper.getByTypeId  : <==      Total: 4
2021-02-02 23:04:30.278  INFO 26480 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : types
2021-02-02 23:04:34.241  INFO 26480 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/types/25', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TypeShowController.typeShow', args=[{}, 25, 1]}
2021-02-02 23:04:34.244 DEBUG 26480 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 23:04:34.244 DEBUG 26480 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 23:04:34.248 DEBUG 26480 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 5
2021-02-02 23:04:34.250 DEBUG 26480 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.getByTypeId  : ==>  Preparing: select b.id,b.title,b.flag,b.first_picture,b.published,b.views,b.update_time,b.description, t.id tid,t.name, b.comment_count, b.type_id, u.nickname, u.avatar from t_blog b join t_user u on b.user_id=u.id join t_type t on t.id=b.type_id and b.type_id = ? order by b.create_time desc
2021-02-02 23:04:34.251 DEBUG 26480 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.getByTypeId  : ==> Parameters: 25(Long)
2021-02-02 23:04:34.252 DEBUG 26480 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.getByTypeId  : <==      Total: 1
2021-02-02 23:04:34.253  INFO 26480 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : types
2021-02-02 23:04:36.745  INFO 26480 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='127.0.0.1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 23:04:36.784 DEBUG 26480 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 23:04:36.784 DEBUG 26480 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 23:04:36.786 DEBUG 26480 --- [http-nio-8080-exec-8] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 23:04:36.787 DEBUG 26480 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.create_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.create_time desc LIMIT ?
2021-02-02 23:04:36.788 DEBUG 26480 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 23:04:36.793 DEBUG 26480 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 23:04:36.796 DEBUG 26480 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 23:04:36.796 DEBUG 26480 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 23:04:36.797 DEBUG 26480 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 23:04:36.798 DEBUG 26480 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 23:04:36.798 DEBUG 26480 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 23:04:36.800 DEBUG 26480 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 5
2021-02-02 23:04:36.803 DEBUG 26480 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 23:04:36.803 DEBUG 26480 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 23:04:36.805 DEBUG 26480 --- [http-nio-8080-exec-8] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 23:04:36.814  INFO 26480 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 23:05:32.031  INFO 26480 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/types/-1', ip='127.0.0.1', classMethod='com.personblog.controller.TypeShowController.typeShow', args=[{}, -1, 1]}
2021-02-02 23:05:32.035 DEBUG 26480 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 23:05:32.036 DEBUG 26480 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 23:05:32.042 DEBUG 26480 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 5
2021-02-02 23:05:32.043 DEBUG 26480 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.getByTypeId  : ==>  Preparing: select b.id,b.title,b.flag,b.first_picture,b.published,b.views,b.update_time,b.description, t.id tid,t.name, b.comment_count, b.type_id, u.nickname, u.avatar from t_blog b join t_user u on b.user_id=u.id join t_type t on t.id=b.type_id and b.type_id = ? order by b.create_time desc
2021-02-02 23:05:32.044 DEBUG 26480 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.getByTypeId  : ==> Parameters: 26(Long)
2021-02-02 23:05:32.047 DEBUG 26480 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.getByTypeId  : <==      Total: 4
2021-02-02 23:05:32.049  INFO 26480 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : types
2021-02-02 23:05:35.406  INFO 26480 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/tags/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TagShowController.tag', args=[1, -1, {}]}
2021-02-02 23:05:35.417 DEBUG 26480 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTagAndBlog    : ==>  Preparing: select t.id, t.name, b.id bid,b.title from t_tag t left join t_blog_tag bt on bt.tag_id = t.id left join t_blog b on bt.blog_id = b.id where b.published = true order by b.update_time desc
2021-02-02 23:05:35.417 DEBUG 26480 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTagAndBlog    : ==> Parameters: 
2021-02-02 23:05:35.422 DEBUG 26480 --- [http-nio-8080-exec-5] c.p.dao.TagMapper.selectAllTagAndBlog    : <==      Total: 7
2021-02-02 23:05:35.423 DEBUG 26480 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.getByTagId   : ==>  Preparing: select b.id,b.title,b.first_picture,b.flag,b.views,b.update_time,b.description, t.id,t.name, u.nickname, u.avatar, b.comment_count from t_blog b, t_type t,t_blog_tag tb ,t_user u,t_tag tt where b.type_id = t.id and u.id = b.user_id and tb.blog_id = b.id and tb.tag_id = tt.id and tb.tag_id = ? order by b.create_time desc
2021-02-02 23:05:35.424 DEBUG 26480 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.getByTagId   : ==> Parameters: 19(Long)
2021-02-02 23:05:35.440 DEBUG 26480 --- [http-nio-8080-exec-5] c.personblog.dao.BlogMapper.getByTagId   : <==      Total: 4
2021-02-02 23:05:35.441  INFO 26480 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : tags
2021-02-02 23:05:39.417  INFO 26480 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/message', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.message', args=[]}
2021-02-02 23:05:39.421  INFO 26480 --- [http-nio-8080-exec-1] com.personblog.aspect.LogAspect          : Result : message
2021-02-02 23:05:39.855  INFO 26480 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/messagecomment', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.MessageController.messages', args=[{}]}
2021-02-02 23:05:39.859 DEBUG 26480 --- [http-nio-8080-exec-2] c.p.d.MessageMapper.findByParentIdNull   : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 23:05:39.859 DEBUG 26480 --- [http-nio-8080-exec-2] c.p.d.MessageMapper.findByParentIdNull   : ==> Parameters: -1(Long)
2021-02-02 23:05:39.860 DEBUG 26480 --- [http-nio-8080-exec-2] c.p.d.MessageMapper.findByParentIdNull   : <==      Total: 1
2021-02-02 23:05:39.861 DEBUG 26480 --- [http-nio-8080-exec-2] c.p.d.M.findByParentIdNotNull            : ==>  Preparing: select * from t_message c where c.parent_message_id = ? order by c.create_time desc
2021-02-02 23:05:39.861 DEBUG 26480 --- [http-nio-8080-exec-2] c.p.d.M.findByParentIdNotNull            : ==> Parameters: 121(Long)
2021-02-02 23:05:39.862 DEBUG 26480 --- [http-nio-8080-exec-2] c.p.d.M.findByParentIdNotNull            : <==      Total: 0
2021-02-02 23:05:39.862  INFO 26480 --- [http-nio-8080-exec-2] com.personblog.aspect.LogAspect          : Result : message::messageList
2021-02-02 23:05:41.964  INFO 26480 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/archives', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.ArchiveShowController.archive', args=[{count=Count(id=null, count=null, createTime=null), org.springframework.validation.BindingResult.count=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, Count(id=null, count=null, createTime=null)]}
2021-02-02 23:05:41.971 DEBUG 26480 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.findGroupYear         : ==>  Preparing: select date_format(b.create_time,'%Y') year from t_blog b group by year order by year desc
2021-02-02 23:05:41.972 DEBUG 26480 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.findGroupYear         : ==> Parameters: 
2021-02-02 23:05:41.973 DEBUG 26480 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.findGroupYear         : <==      Total: 1
2021-02-02 23:05:41.974 DEBUG 26480 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.findByYear   : ==>  Preparing: select b.id bid, b.title, b.create_time, b.flag,t.name from t_blog b, t_type t where date_format(b.create_time,'%Y')=? and b.type_id=t.id order by b.create_time desc
2021-02-02 23:05:41.975 DEBUG 26480 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.findByYear   : ==> Parameters: 2021(String)
2021-02-02 23:05:41.976 DEBUG 26480 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.findByYear   : <==      Total: 5
2021-02-02 23:05:41.977 DEBUG 26480 --- [http-nio-8080-exec-9] com.personblog.dao.BlogMapper.count      : ==>  Preparing: select count(*) from t_blog
2021-02-02 23:05:41.978 DEBUG 26480 --- [http-nio-8080-exec-9] com.personblog.dao.BlogMapper.count      : ==> Parameters: 
2021-02-02 23:05:41.978 DEBUG 26480 --- [http-nio-8080-exec-9] com.personblog.dao.BlogMapper.count      : <==      Total: 1
2021-02-02 23:05:41.979 DEBUG 26480 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.deleteCount  : ==>  Preparing: delete from t_count
2021-02-02 23:05:41.980 DEBUG 26480 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.deleteCount  : ==> Parameters: 
2021-02-02 23:05:41.989 DEBUG 26480 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.deleteCount  : <==    Updates: 1
2021-02-02 23:05:41.990 DEBUG 26480 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.insertCount  : ==>  Preparing: insert into t_count(count,create_time) (select count(*) count, create_time from t_blog GROUP BY year(create_time),month(create_time) order by create_time desc)
2021-02-02 23:05:41.990 DEBUG 26480 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.insertCount  : ==> Parameters: 
2021-02-02 23:05:41.991 DEBUG 26480 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.insertCount  : <==    Updates: 1
2021-02-02 23:05:41.992 DEBUG 26480 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.findGroupYear2        : ==>  Preparing: select date_format(t_count.create_time,'%Y年%m月') year1 from t_count GROUP BY year1 order by year1 desc
2021-02-02 23:05:41.992 DEBUG 26480 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.findGroupYear2        : ==> Parameters: 
2021-02-02 23:05:41.993 DEBUG 26480 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.findGroupYear2        : <==      Total: 1
2021-02-02 23:05:41.993 DEBUG 26480 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.findByYear2  : ==>  Preparing: select c.id,c.count,c.create_time from t_count c where date_format(c.create_time,'%Y年%m月')=? order by c.create_time desc
2021-02-02 23:05:41.993 DEBUG 26480 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.findByYear2  : ==> Parameters: 2021年02月(String)
2021-02-02 23:05:41.994 DEBUG 26480 --- [http-nio-8080-exec-9] c.personblog.dao.BlogMapper.findByYear2  : <==      Total: 1
2021-02-02 23:05:41.996  INFO 26480 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : archives
2021-02-02 23:05:44.447  INFO 26480 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/archives', ip='127.0.0.1', classMethod='com.personblog.controller.ArchiveShowController.archive', args=[{count=Count(id=null, count=null, createTime=null), org.springframework.validation.BindingResult.count=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, Count(id=null, count=null, createTime=null)]}
2021-02-02 23:05:44.451 DEBUG 26480 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.findGroupYear         : ==>  Preparing: select date_format(b.create_time,'%Y') year from t_blog b group by year order by year desc
2021-02-02 23:05:44.451 DEBUG 26480 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.findGroupYear         : ==> Parameters: 
2021-02-02 23:05:44.452 DEBUG 26480 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.findGroupYear         : <==      Total: 1
2021-02-02 23:05:44.453 DEBUG 26480 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.findByYear   : ==>  Preparing: select b.id bid, b.title, b.create_time, b.flag,t.name from t_blog b, t_type t where date_format(b.create_time,'%Y')=? and b.type_id=t.id order by b.create_time desc
2021-02-02 23:05:44.453 DEBUG 26480 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.findByYear   : ==> Parameters: 2021(String)
2021-02-02 23:05:44.455 DEBUG 26480 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.findByYear   : <==      Total: 5
2021-02-02 23:05:44.457 DEBUG 26480 --- [http-nio-8080-exec-8] com.personblog.dao.BlogMapper.count      : ==>  Preparing: select count(*) from t_blog
2021-02-02 23:05:44.457 DEBUG 26480 --- [http-nio-8080-exec-8] com.personblog.dao.BlogMapper.count      : ==> Parameters: 
2021-02-02 23:05:44.457 DEBUG 26480 --- [http-nio-8080-exec-8] com.personblog.dao.BlogMapper.count      : <==      Total: 1
2021-02-02 23:05:44.458 DEBUG 26480 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.deleteCount  : ==>  Preparing: delete from t_count
2021-02-02 23:05:44.459 DEBUG 26480 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.deleteCount  : ==> Parameters: 
2021-02-02 23:05:44.459 DEBUG 26480 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.deleteCount  : <==    Updates: 1
2021-02-02 23:05:44.460 DEBUG 26480 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.insertCount  : ==>  Preparing: insert into t_count(count,create_time) (select count(*) count, create_time from t_blog GROUP BY year(create_time),month(create_time) order by create_time desc)
2021-02-02 23:05:44.460 DEBUG 26480 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.insertCount  : ==> Parameters: 
2021-02-02 23:05:44.468 DEBUG 26480 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.insertCount  : <==    Updates: 1
2021-02-02 23:05:44.469 DEBUG 26480 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.findGroupYear2        : ==>  Preparing: select date_format(t_count.create_time,'%Y年%m月') year1 from t_count GROUP BY year1 order by year1 desc
2021-02-02 23:05:44.469 DEBUG 26480 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.findGroupYear2        : ==> Parameters: 
2021-02-02 23:05:44.470 DEBUG 26480 --- [http-nio-8080-exec-8] c.p.dao.BlogMapper.findGroupYear2        : <==      Total: 1
2021-02-02 23:05:44.470 DEBUG 26480 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.findByYear2  : ==>  Preparing: select c.id,c.count,c.create_time from t_count c where date_format(c.create_time,'%Y年%m月')=? order by c.create_time desc
2021-02-02 23:05:44.470 DEBUG 26480 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.findByYear2  : ==> Parameters: 2021年02月(String)
2021-02-02 23:05:44.471 DEBUG 26480 --- [http-nio-8080-exec-8] c.personblog.dao.BlogMapper.findByYear2  : <==      Total: 1
2021-02-02 23:05:44.473  INFO 26480 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : archives
2021-02-02 23:05:49.478  INFO 26480 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/about', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.AboutShowController.about', args=[]}
2021-02-02 23:05:49.481  INFO 26480 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : about
2021-02-02 23:06:54.350  INFO 26480 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/about', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.AboutShowController.about', args=[]}
2021-02-02 23:06:54.350  INFO 26480 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : about
2021-02-02 23:07:14.712  INFO 26480 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/about', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.AboutShowController.about', args=[]}
2021-02-02 23:07:14.713  INFO 26480 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : about
2021-02-02 23:07:34.881  INFO 26480 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/about', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.AboutShowController.about', args=[]}
2021-02-02 23:07:34.881  INFO 26480 --- [http-nio-8080-exec-8] com.personblog.aspect.LogAspect          : Result : about
2021-02-02 23:08:02.541  INFO 26480 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/about', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.AboutShowController.about', args=[]}
2021-02-02 23:08:02.541  INFO 26480 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : about
2021-02-02 23:08:33.752  INFO 26480 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/about', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.AboutShowController.about', args=[]}
2021-02-02 23:08:33.752  INFO 26480 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : about
2021-02-02 23:08:41.702  INFO 26480 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 23:08:41.705 DEBUG 26480 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 23:08:41.705 DEBUG 26480 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 23:08:41.706 DEBUG 26480 --- [http-nio-8080-exec-9] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 23:08:41.706 DEBUG 26480 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.create_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.create_time desc LIMIT ?
2021-02-02 23:08:41.707 DEBUG 26480 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 23:08:41.710 DEBUG 26480 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 23:08:41.712 DEBUG 26480 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 23:08:41.713 DEBUG 26480 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 23:08:41.717 DEBUG 26480 --- [http-nio-8080-exec-9] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 23:08:41.718 DEBUG 26480 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 23:08:41.719 DEBUG 26480 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 23:08:41.720 DEBUG 26480 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 5
2021-02-02 23:08:41.721 DEBUG 26480 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 23:08:41.721 DEBUG 26480 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 23:08:41.722 DEBUG 26480 --- [http-nio-8080-exec-9] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 23:08:41.723  INFO 26480 --- [http-nio-8080-exec-9] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 23:08:48.533  INFO 26480 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/about', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.AboutShowController.about', args=[]}
2021-02-02 23:08:48.533  INFO 26480 --- [http-nio-8080-exec-7] com.personblog.aspect.LogAspect          : Result : about
2021-02-02 23:08:51.685  INFO 26480 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 23:08:51.687 DEBUG 26480 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 23:08:51.688 DEBUG 26480 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 23:08:51.689 DEBUG 26480 --- [http-nio-8080-exec-4] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 23:08:51.689 DEBUG 26480 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.create_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.create_time desc LIMIT ?
2021-02-02 23:08:51.689 DEBUG 26480 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 23:08:51.694 DEBUG 26480 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 23:08:51.697 DEBUG 26480 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 23:08:51.697 DEBUG 26480 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 23:08:51.697 DEBUG 26480 --- [http-nio-8080-exec-4] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 23:08:51.698 DEBUG 26480 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 23:08:51.699 DEBUG 26480 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 23:08:51.700 DEBUG 26480 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 5
2021-02-02 23:08:51.701 DEBUG 26480 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 23:08:51.701 DEBUG 26480 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 23:08:51.702 DEBUG 26480 --- [http-nio-8080-exec-4] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 23:08:51.702  INFO 26480 --- [http-nio-8080-exec-4] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 23:09:01.559  INFO 26480 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 2]}
2021-02-02 23:09:01.566 DEBUG 26480 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 23:09:01.566 DEBUG 26480 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 23:09:01.567 DEBUG 26480 --- [http-nio-8080-exec-5] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 23:09:01.567 DEBUG 26480 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.create_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.create_time desc LIMIT ?, ?
2021-02-02 23:09:01.567 DEBUG 26480 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer), 4(Integer)
2021-02-02 23:09:01.569 DEBUG 26480 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 1
2021-02-02 23:09:01.571 DEBUG 26480 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 23:09:01.571 DEBUG 26480 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 23:09:01.571 DEBUG 26480 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 23:09:01.574 DEBUG 26480 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 23:09:01.575 DEBUG 26480 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 23:09:01.577 DEBUG 26480 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 5
2021-02-02 23:09:01.578 DEBUG 26480 --- [http-nio-8080-exec-5] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 23:09:01.579 DEBUG 26480 --- [http-nio-8080-exec-5] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 23:09:01.579 DEBUG 26480 --- [http-nio-8080-exec-5] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 23:09:01.580  INFO 26480 --- [http-nio-8080-exec-5] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 23:09:07.141  INFO 26480 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 23:09:07.145 DEBUG 26480 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 23:09:07.145 DEBUG 26480 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 23:09:07.146 DEBUG 26480 --- [http-nio-8080-exec-3] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 23:09:07.147 DEBUG 26480 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.create_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.create_time desc LIMIT ?
2021-02-02 23:09:07.147 DEBUG 26480 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 23:09:07.150 DEBUG 26480 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 23:09:07.151 DEBUG 26480 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 23:09:07.152 DEBUG 26480 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 23:09:07.153 DEBUG 26480 --- [http-nio-8080-exec-3] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 23:09:07.154 DEBUG 26480 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 23:09:07.154 DEBUG 26480 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 23:09:07.157 DEBUG 26480 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 5
2021-02-02 23:09:07.160 DEBUG 26480 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 23:09:07.161 DEBUG 26480 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 23:09:07.162 DEBUG 26480 --- [http-nio-8080-exec-3] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 23:09:07.163  INFO 26480 --- [http-nio-8080-exec-3] com.personblog.aspect.LogAspect          : Result : index
2021-02-02 23:09:56.807  INFO 26480 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/types/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.TypeShowController.typeShow', args=[{}, -1, 1]}
2021-02-02 23:09:56.809 DEBUG 26480 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 23:09:56.809 DEBUG 26480 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 23:09:56.812 DEBUG 26480 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 5
2021-02-02 23:09:56.814 DEBUG 26480 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.getByTypeId  : ==>  Preparing: select b.id,b.title,b.flag,b.first_picture,b.published,b.views,b.update_time,b.description, t.id tid,t.name, b.comment_count, b.type_id, u.nickname, u.avatar from t_blog b join t_user u on b.user_id=u.id join t_type t on t.id=b.type_id and b.type_id = ? order by b.create_time desc
2021-02-02 23:09:56.815 DEBUG 26480 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.getByTypeId  : ==> Parameters: 26(Long)
2021-02-02 23:09:56.818 DEBUG 26480 --- [http-nio-8080-exec-6] c.personblog.dao.BlogMapper.getByTypeId  : <==      Total: 4
2021-02-02 23:09:56.821  INFO 26480 --- [http-nio-8080-exec-6] com.personblog.aspect.LogAspect          : Result : types
2021-02-02 23:09:58.421  INFO 26480 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.personblog.controller.IndexController.index', args=[{}, 1]}
2021-02-02 23:09:58.424 DEBUG 26480 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type t, t_user u WHERE b.type_id = t.id AND u.id = b.user_id AND b.published = true
2021-02-02 23:09:58.424 DEBUG 26480 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : ==> Parameters: 
2021-02-02 23:09:58.425 DEBUG 26480 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.getFirstPageBlog_COUNT  : <==      Total: 1
2021-02-02 23:09:58.425 DEBUG 26480 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : ==>  Preparing: select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.create_time,b.description, t.name , u.nickname, u.avatar from t_blog b, t_type t,t_user u where b.type_id = t.id and u.id = b.user_id and b.published=true order by b.create_time desc LIMIT ?
2021-02-02 23:09:58.426 DEBUG 26480 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : ==> Parameters: 4(Integer)
2021-02-02 23:09:58.427 DEBUG 26480 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getFirstPageBlog      : <==      Total: 4
2021-02-02 23:09:58.429 DEBUG 26480 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==>  Preparing: select id, title, recommend from t_blog b where b.recommend = true order by b.update_time desc limit 4
2021-02-02 23:09:58.429 DEBUG 26480 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : ==> Parameters: 
2021-02-02 23:09:58.429 DEBUG 26480 --- [http-nio-8080-exec-10] c.p.dao.BlogMapper.getAllRecommendBlog   : <==      Total: 1
2021-02-02 23:09:58.431 DEBUG 26480 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==>  Preparing: select t.id tid, t.name, b.id bid, b.title,b.type_id from t_type t left join t_blog b on t.id = b.type_id where b.published=true order by b.update_time desc
2021-02-02 23:09:58.431 DEBUG 26480 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : ==> Parameters: 
2021-02-02 23:09:58.432 DEBUG 26480 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectAllTypeAndBlog  : <==      Total: 5
2021-02-02 23:09:58.435 DEBUG 26480 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==>  Preparing: select id, content from t_notice
2021-02-02 23:09:58.435 DEBUG 26480 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : ==> Parameters: 
2021-02-02 23:09:58.435 DEBUG 26480 --- [http-nio-8080-exec-10] c.p.dao.NoticeMapper.selectAllNotice     : <==      Total: 2
2021-02-02 23:09:58.436  INFO 26480 --- [http-nio-8080-exec-10] com.personblog.aspect.LogAspect          : Result : index
