<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.personblog.dao.BlogMapper">

    <resultMap id="blog" type="com.personblog.vo.BlogQuery">
        <id property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="updateTime" column="update_time"/>
        <result property="recommend" column="recommend"/>
        <result property="published" column="published"/>
        <result property="typeId" column="type_id"/>
        <association property="type" javaType="com.personblog.entity.Type">
            <id property="id" column="id"/>
            <result property="name" column="name"/>
        </association>
    </resultMap>
    <!--1、后台查询文章列表-->
    <select id="getAllBlogQuery" resultMap="blog">
        select b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id , t.name
        from t_blog b
        left join t_type t on b.type_id = t.id
    </select>

    <!--2、新增文章-->
    <insert id="saveBlog" parameterType="com.personblog.entity.Blog" useGeneratedKeys="true">
        insert into t_blog (title, content, first_picture, flag,
        views, comment_count, appreciation, share_statement, commentabled, published,
        recommend, create_time, update_time, type_id, user_id, description, tag_ids)
        values (#{title},#{content},#{firstPicture},#{flag},#{views},#{commentCount},#{appreciation},
        #{shareStatement},#{commentabled},#{published},#{recommend},#{createTime},
        #{updateTime},#{typeId},#{userId},#{description},#{tagIds})
        <selectKey keyProperty="id" resultType="Long" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>
    <!--把标签保存在中间表中-->
    <resultMap id="blogAndTag" type="com.personblog.vo.BlogAndTag">
        <result property="blogId" column="blog_id"/>
        <result property="tagId"  column="tag_id"/>
    </resultMap>
    <insert id="saveBlogAndTag" parameterType="com.personblog.vo.BlogAndTag" >
        insert into t_blog_tag (tag_id, blog_id) values (#{tagId},#{blogId})
    </insert>


    <!--
        3、根据title搜，title模糊查询；只根据type搜，全称(下拉列表)
            bind：bind标签可以使用OGNL表达式创建一个变量并将其绑定到上下文中
            name属性：为绑定到上下文的变量名
            value属性：为OGNL表达式
    -->
    <select id="searchByTitleOrType" parameterType="com.personblog.vo.SearchBlog" resultMap="blog">
        <bind name="pattern" value="'%' + title + '%'" />
        select b.id, b.title, b.update_time, b.type_id, t.id , t.name
        from t_blog b
        left join t_type t
        on b.type_id = t.id
        <where>
            <if test="typeId != null and typeId != -1">
                and b.type_id=#{typeId}
            </if>
            <if test="title != null">
                and b.title like #{pattern}
            </if>
        </where>
        order by b.create_time desc
    </select>

    <!--4、删除博客-->
    <delete id="deleteBlog">
        delete from t_blog where id = #{id}
    </delete>
    <delete id="deleteBlogAndTag" >
        delete from t_blog_tag where blog_id = #{blogId}
    </delete>

    <!--5、根据id修改博客信息-->
    <update id="updateBlog" parameterType="com.personblog.entity.Blog">
        update t_blog set published = #{published},flag = #{flag} ,
                          title = #{title}, content = #{content}, type_id = #{typeId}, tag_ids = #{tagIds},
                          first_picture = #{firstPicture} , description = #{description} , recommend = #{recommend} ,
                          share_statement = #{shareStatement}, appreciation = #{appreciation},
                          commentabled = #{commentabled} ,update_time = #{updateTime} where id = #{id}
    </update>

    <!--根据id查询博客信息，在修改页面做一个回显-->
    <select id="getBlogById" resultType="com.personblog.entity.Blog" >
        select b.id, b.published,b.flag,b.title,b.content,b.type_id,
               b.tag_ids,b.first_picture,b.description,b.recommend,b.share_statement,
               b.appreciation,b.commentabled from t_blog b  where  b.id = #{id}
    </select>


    <!--前端展示-->
    <!--查询首页信息-->
    <resultMap id="firstPageBlog" type="com.personblog.vo.FirstPageBlog">
        <result property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="firstPicture" column="first_picture"/>
        <result property="views" column="views"/>
        <result property="updateTime" column="update_time"/>
        <result property="createTime" column="create_time"/>
        <result property="description" column="description"/>
        <result property="commentCount" column="comment_count"/>
        <association property="type" javaType="com.personblog.entity.Type">
            <id property="id" column="id"/>
            <result property="name" column="name"/>
        </association>
        <association property="user" javaType="com.personblog.entity.User">
            <result property="nickname" column="nickname"/>
            <result property="avatar" column="avatar"/>
        </association>
    </resultMap>
    <select id="getFirstPageBlog" resultMap="firstPageBlog">
        select b.id,b.title,b.first_picture, b.views, b.comment_count,b.update_time,b.create_time,b.description,
               t.name ,
               u.nickname, u.avatar
        from t_blog b, t_type t,t_user u
        where b.type_id = t.id and  u.id = b.user_id and b.published=true order by b.create_time desc

    </select>

    <!--查询已推荐的博客-->
    <resultMap id="recommendBlog" type="com.personblog.vo.RecommendBlog">
        <result property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="recommend" column="recommend"/>
    </resultMap>
    <select id="getAllRecommendBlog" resultMap="recommendBlog">
        select id, title, recommend
        from t_blog b
        where b.recommend = true
        order by b.update_time desc limit 4
    </select>

    <!--全局搜索-->
    <select id="getSearchBlog" resultMap="firstPageBlog">
        <bind name="pattern" value="'%' + query + '%'" />
        select b.id,b.title,b.first_picture, b.views,b.comment_count,b.update_time,b.description,
        t.name ,
        u.nickname, u.avatar
        from t_blog b, t_type t, t_user u
        where b.type_id = t.id
        and u.id = b.user_id
        and b.published = true
        and (b.title like #{pattern} or b.content like #{pattern})
        order by b.update_time desc
    </select>

    <!--博客详情-->
    <resultMap id="detailedBlog" type="com.personblog.vo.DetailedBlog">
        <id property="id" column="bid"/>
        <result property="firstPicture" column="first_picture"/>
        <result property="flag" column="flag"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="views" column="views"/>
        <result property="commentCount" column="comment_count"/>
        <result property="updateTime" column="update_time"/>
        <result property="createTime" column="create_time"/>
        <result property="commentabled" column="commentabled"/>
        <result property="shareStatement" column="share_statement"/>
        <result property="appreciation" column="appreciation"/>
        <association property="user" javaType="com.personblog.entity.User">
            <id property="id" column="id"/>
            <result property="nickname" column="nickname"/>
            <result property="avatar" column="avatar"/>
        </association>
        <association property="type" javaType="com.personblog.entity.Type">
            <id property="id" column="id"/>
            <result property="name" column="name"/>
        </association>
    </resultMap>

    <select id="getDetailedBlog" resultMap="detailedBlog">
        select
               b.id bid,b.first_picture,b.flag,b.title,b.content,b.views,
               b.comment_count,b.update_time,b.create_time, b.commentabled,b.share_statement,b.appreciation,
               u.nickname,u.avatar,
               t.name
        from t_blog b, t_user u, t_type t
        where b.user_id = u.id and b.type_id = t.id and published = true and b.id = #{id}
    </select>

    <!--文章访问自增-->
    <update id="updateViews" parameterType="com.personblog.entity.Blog">
        update t_blog b set b.views = b.views + 1 where b.id = #{id}
    </update>

    <!--查询出文章评论数量并更新-->
    <update id="getCommentCountById" parameterType="com.personblog.entity.Blog">
        update t_blog b set b.comment_count = (
            select count(*) from t_comment c where c.blog_id = #{id} and b.id = #{id}
        ) WHERE b.id = #{id}
    </update>

    <!--查询前台分类-->
    <select id="getByTypeId" resultMap="firstPageBlog">
        select b.id,b.title,b.flag,b.first_picture,b.published,b.views,b.update_time,b.description,
               t.id tid,t.name, b.comment_count, b.type_id,
               u.nickname, u.avatar
        from t_blog b
        join t_user u on b.user_id=u.id
        join t_type t on t.id=b.type_id
              and b.type_id = #{typeId}
        order by b.create_time desc
    </select>
    <!--查询前台标签-->
    <select id="getByTagId" resultMap="firstPageBlog">
        select b.id,b.title,b.first_picture,b.flag,b.views,b.update_time,b.description, t.id,t.name,
               u.nickname, u.avatar, b.comment_count
        from t_blog b, t_type t,t_blog_tag tb ,t_user u,t_tag tt

        where b.type_id = t.id and u.id = b.user_id and tb.blog_id = b.id
          and tb.tag_id = tt.id and tb.tag_id = #{tagId} order by b.create_time desc
    </select>

    <!--  归档-->
    <!--  查询当前时间的年份-->
    <select id="findGroupYear" resultType="java.lang.String">
        select date_format(b.create_time,'%Y') year
        from t_blog b
        group by year
        order by year desc
    </select>

    <!--获取除年份以外的剩下的信息(显示分类信息)，并封装成Map-->
    <select id="findByYear" resultMap="detailedBlog">
        select b.id bid, b.title, b.create_time, b.flag,t.name
        from t_blog b, t_type t where date_format(b.create_time,'%Y')=#{year}
        and b.type_id=t.id
        order by b.create_time desc
    </select>

    <select id="count" resultType="Long">
        select count(*) from t_blog
    </select>

    <insert id="insertCount" parameterType="com.personblog.entity.Count">
        insert into t_count(count,create_time)
        (select count(*) count, create_time  from t_blog GROUP BY year(create_time),month(create_time)
        order by create_time desc)
    </insert>

    <delete id="deleteCount" parameterType="com.personblog.entity.Count">
        delete from t_count
    </delete>
    <select id="findGroupYear2" resultType="java.lang.String">
        select date_format(t_count.create_time,'%Y年%m月') year1 from t_count GROUP BY year1
        order by year1 desc
    </select>

    <select id="findByYear2" resultType="com.personblog.entity.Count">
        select c.id,c.count,c.create_time
        from t_count c where date_format(c.create_time,'%Y年%m月')=#{year}
        order by c.create_time desc
    </select>

</mapper>
